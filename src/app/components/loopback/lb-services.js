// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbservices";
}

(function(window, angular, undefined) {'use strict';

var urlBase = "http://192.168.99.100:3000/api";
var authHeader = 'authorization';

function getHost(url) {
  var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
  return m ? m[1] : null;
}

var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbservices
 * @module
 * @description
 *
 * The `lbservices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbservices.SozialeVerantwortung
 * @header lbservices.SozialeVerantwortung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SozialeVerantwortung",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SozialeVerantwortung/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SozialeVerantwortung.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SozialeVerantwortung.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/SozialeVerantwortung/:id/translations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#create
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SozialeVerantwortung",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#createMany
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortung",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#upsert
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SozialeVerantwortung",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#exists
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SozialeVerantwortung/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#findById
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SozialeVerantwortung/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#find
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortung",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#findOne
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SozialeVerantwortung/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#updateAll
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SozialeVerantwortung/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#deleteById
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SozialeVerantwortung/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#count
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SozialeVerantwortung/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#prototype$updateAttributes
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SozialeVerantwortung/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#createChangeStream
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SozialeVerantwortung/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#getContentData
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/SozialeVerantwortung/contentData",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#getZFHilftData
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        "getZFHilftData": {
          url: urlBase + "/SozialeVerantwortung/zfHilftData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#updateOrCreate
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#update
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#destroyById
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#removeById
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortung` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SozialeVerantwortung#modelName
    * @propertyOf lbservices.SozialeVerantwortung
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SozialeVerantwortung`.
    */
    R.modelName = "SozialeVerantwortung";

    /**
     * @ngdoc object
     * @name lbservices.SozialeVerantwortung.translations
     * @header lbservices.SozialeVerantwortung.translations
     * @object
     * @description
     *
     * The object `SozialeVerantwortung.translations` groups methods
     * manipulating `SozialeVerantwortungTranslation` instances related to `SozialeVerantwortung`.
     *
     * Call {@link lbservices.SozialeVerantwortung#translations SozialeVerantwortung.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung#translations
         * @methodOf lbservices.SozialeVerantwortung
         *
         * @description
         *
         * Queries translations of SozialeVerantwortung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::get::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#count
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Counts translations of SozialeVerantwortung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::count::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#create
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::create::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#createMany
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::createMany::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#destroyAll
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::delete::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#destroyById
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::destroyById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#findById
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::findById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortung.translations#updateById
         * @methodOf lbservices.SozialeVerantwortung.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::updateById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SozialeVerantwortungTranslation
 * @header lbservices.SozialeVerantwortungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SozialeVerantwortungTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SozialeVerantwortungTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#create
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SozialeVerantwortungTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#createMany
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortungTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#upsert
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SozialeVerantwortungTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#exists
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SozialeVerantwortungTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#findById
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SozialeVerantwortungTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#find
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortungTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#findOne
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SozialeVerantwortungTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#updateAll
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SozialeVerantwortungTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#deleteById
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SozialeVerantwortungTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#count
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SozialeVerantwortungTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#prototype$updateAttributes
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SozialeVerantwortungTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#createChangeStream
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SozialeVerantwortungTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.findById() instead.
        "::findById::SozialeVerantwortung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.destroyById() instead.
        "::destroyById::SozialeVerantwortung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.updateById() instead.
        "::updateById::SozialeVerantwortung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SozialeVerantwortung.translations() instead.
        "::get::SozialeVerantwortung::translations": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.create() instead.
        "::create::SozialeVerantwortung::translations": {
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.createMany() instead.
        "::createMany::SozialeVerantwortung::translations": {
          isArray: true,
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.destroyAll() instead.
        "::delete::SozialeVerantwortung::translations": {
          url: urlBase + "/SozialeVerantwortung/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use SozialeVerantwortung.translations.count() instead.
        "::count::SozialeVerantwortung::translations": {
          url: urlBase + "/SozialeVerantwortung/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#updateOrCreate
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#update
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#destroyById
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SozialeVerantwortungTranslation#removeById
         * @methodOf lbservices.SozialeVerantwortungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SozialeVerantwortungTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SozialeVerantwortungTranslation#modelName
    * @propertyOf lbservices.SozialeVerantwortungTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SozialeVerantwortungTranslation`.
    */
    R.modelName = "SozialeVerantwortungTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojekt
 * @header lbservices.SvHilfsprojekt
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojekt` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojekt",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojekts/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SvHilfsprojekt.items.findById() instead.
        "prototype$__findById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojekt.items.destroyById() instead.
        "prototype$__destroyById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojekt.items.updateById() instead.
        "prototype$__updateById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojekt.items() instead.
        "prototype$__get__items": {
          isArray: true,
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojekt.items.create() instead.
        "prototype$__create__items": {
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojekt.items.destroyAll() instead.
        "prototype$__delete__items": {
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojekt.items.count() instead.
        "prototype$__count__items": {
          url: urlBase + "/SvHilfsprojekts/:id/items/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#create
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojekts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#createMany
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojekts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#upsert
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojekts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#exists
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojekts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#findById
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojekts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#find
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojekts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#findOne
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojekts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#updateAll
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojekts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#deleteById
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojekts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#count
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojekts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojekts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#createChangeStream
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojekts/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.projects.findById() instead.
        "::findById::SvZfhilft::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/projects/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.projects.destroyById() instead.
        "::destroyById::SvZfhilft::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/projects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.projects.updateById() instead.
        "::updateById::SvZfhilft::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/projects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvZfhilft.projects() instead.
        "::get::SvZfhilft::projects": {
          isArray: true,
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.projects.create() instead.
        "::create::SvZfhilft::projects": {
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.projects.createMany() instead.
        "::createMany::SvZfhilft::projects": {
          isArray: true,
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.projects.destroyAll() instead.
        "::delete::SvZfhilft::projects": {
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.projects.count() instead.
        "::count::SvZfhilft::projects": {
          url: urlBase + "/SvZfhilfts/:id/projects/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#updateOrCreate
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#update
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#destroyById
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#removeById
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojekt#modelName
    * @propertyOf lbservices.SvHilfsprojekt
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojekt`.
    */
    R.modelName = "SvHilfsprojekt";

    /**
     * @ngdoc object
     * @name lbservices.SvHilfsprojekt.items
     * @header lbservices.SvHilfsprojekt.items
     * @object
     * @description
     *
     * The object `SvHilfsprojekt.items` groups methods
     * manipulating `SvHilfsprojektItem` instances related to `SvHilfsprojekt`.
     *
     * Call {@link lbservices.SvHilfsprojekt#items SvHilfsprojekt.items()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt#items
         * @methodOf lbservices.SvHilfsprojekt
         *
         * @description
         *
         * Queries items of SvHilfsprojekt.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R.items = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::get::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#count
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Counts items of SvHilfsprojekt.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.items.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::count::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#create
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R.items.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::create::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#createMany
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R.items.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::createMany::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#destroyAll
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Deletes all items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::delete::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#destroyById
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Delete a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::destroyById::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#findById
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Find a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R.items.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::findById::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojekt.items#updateById
         * @methodOf lbservices.SvHilfsprojekt.items
         *
         * @description
         *
         * Update a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R.items.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::updateById::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektTranslation
 * @header lbservices.SvHilfsprojektTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#create
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#createMany
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#upsert
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#exists
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#findById
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#find
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#findOne
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#updateAll
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#deleteById
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#count
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#createChangeStream
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#update
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#destroyById
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektTranslation#removeById
         * @methodOf lbservices.SvHilfsprojektTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektTranslation#modelName
    * @propertyOf lbservices.SvHilfsprojektTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektTranslation`.
    */
    R.modelName = "SvHilfsprojektTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItem
 * @header lbservices.SvHilfsprojektItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItem",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItems/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SvHilfsprojektItem.texts.findById() instead.
        "prototype$__findById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.destroyById() instead.
        "prototype$__destroyById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.updateById() instead.
        "prototype$__updateById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.findById() instead.
        "prototype$__findById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.destroyById() instead.
        "prototype$__destroyById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.updateById() instead.
        "prototype$__updateById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.findById() instead.
        "prototype$__findById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.destroyById() instead.
        "prototype$__destroyById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.updateById() instead.
        "prototype$__updateById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts() instead.
        "prototype$__get__texts": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.create() instead.
        "prototype$__create__texts": {
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.destroyAll() instead.
        "prototype$__delete__texts": {
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.count() instead.
        "prototype$__count__texts": {
          url: urlBase + "/SvHilfsprojektItems/:id/texts/count",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.images() instead.
        "prototype$__get__images": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.create() instead.
        "prototype$__create__images": {
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.destroyAll() instead.
        "prototype$__delete__images": {
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.count() instead.
        "prototype$__count__images": {
          url: urlBase + "/SvHilfsprojektItems/:id/images/count",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos() instead.
        "prototype$__get__videos": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.create() instead.
        "prototype$__create__videos": {
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.destroyAll() instead.
        "prototype$__delete__videos": {
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.count() instead.
        "prototype$__count__videos": {
          url: urlBase + "/SvHilfsprojektItems/:id/videos/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#create
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#createMany
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#upsert
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItems",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#exists
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItems/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#findById
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItems/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#find
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#findOne
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItems/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#updateAll
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItems/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#deleteById
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItems/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#count
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItems/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItems/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItems/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojekt.items.findById() instead.
        "::findById::SvHilfsprojekt::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojekt.items.destroyById() instead.
        "::destroyById::SvHilfsprojekt::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojekt.items.updateById() instead.
        "::updateById::SvHilfsprojekt::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojekt.items() instead.
        "::get::SvHilfsprojekt::items": {
          isArray: true,
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojekt.items.create() instead.
        "::create::SvHilfsprojekt::items": {
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojekt.items.createMany() instead.
        "::createMany::SvHilfsprojekt::items": {
          isArray: true,
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojekt.items.destroyAll() instead.
        "::delete::SvHilfsprojekt::items": {
          url: urlBase + "/SvHilfsprojekts/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojekt.items.count() instead.
        "::count::SvHilfsprojekt::items": {
          url: urlBase + "/SvHilfsprojekts/:id/items/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#update
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#destroyById
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#removeById
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItem` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItem#modelName
    * @propertyOf lbservices.SvHilfsprojektItem
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItem`.
    */
    R.modelName = "SvHilfsprojektItem";

    /**
     * @ngdoc object
     * @name lbservices.SvHilfsprojektItem.texts
     * @header lbservices.SvHilfsprojektItem.texts
     * @object
     * @description
     *
     * The object `SvHilfsprojektItem.texts` groups methods
     * manipulating `SvHilfsprojektItemText` instances related to `SvHilfsprojektItem`.
     *
     * Call {@link lbservices.SvHilfsprojektItem#texts SvHilfsprojektItem.texts()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#texts
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Queries texts of SvHilfsprojektItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R.texts = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::get::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#count
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Counts texts of SvHilfsprojektItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.texts.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::count::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#create
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Creates a new instance in texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R.texts.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::create::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#createMany
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Creates a new instance in texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R.texts.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::createMany::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#destroyAll
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Deletes all texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.texts.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::delete::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#destroyById
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Delete a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.texts.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::destroyById::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#findById
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Find a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R.texts.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::findById::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.texts#updateById
         * @methodOf lbservices.SvHilfsprojektItem.texts
         *
         * @description
         *
         * Update a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R.texts.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::updateById::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.SvHilfsprojektItem.images
     * @header lbservices.SvHilfsprojektItem.images
     * @object
     * @description
     *
     * The object `SvHilfsprojektItem.images` groups methods
     * manipulating `SvHilfsprojektItemImage` instances related to `SvHilfsprojektItem`.
     *
     * Call {@link lbservices.SvHilfsprojektItem#images SvHilfsprojektItem.images()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#images
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Queries images of SvHilfsprojektItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R.images = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::get::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#count
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Counts images of SvHilfsprojektItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.images.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::count::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#create
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R.images.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::create::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#createMany
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R.images.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::createMany::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#destroyAll
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Deletes all images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::delete::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#destroyById
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Delete a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::destroyById::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#findById
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Find a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R.images.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::findById::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.images#updateById
         * @methodOf lbservices.SvHilfsprojektItem.images
         *
         * @description
         *
         * Update a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R.images.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::updateById::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.SvHilfsprojektItem.videos
     * @header lbservices.SvHilfsprojektItem.videos
     * @object
     * @description
     *
     * The object `SvHilfsprojektItem.videos` groups methods
     * manipulating `SvHilfsprojektItemVideo` instances related to `SvHilfsprojektItem`.
     *
     * Call {@link lbservices.SvHilfsprojektItem#videos SvHilfsprojektItem.videos()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem#videos
         * @methodOf lbservices.SvHilfsprojektItem
         *
         * @description
         *
         * Queries videos of SvHilfsprojektItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R.videos = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::get::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#count
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Counts videos of SvHilfsprojektItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.videos.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::count::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#create
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Creates a new instance in videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R.videos.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::create::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#createMany
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Creates a new instance in videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::createMany::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#destroyAll
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Deletes all videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::delete::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#destroyById
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Delete a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::destroyById::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#findById
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Find a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R.videos.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::findById::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItem.videos#updateById
         * @methodOf lbservices.SvHilfsprojektItem.videos
         *
         * @description
         *
         * Update a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::updateById::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItemText
 * @header lbservices.SvHilfsprojektItemText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItemText",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItemTexts/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#create
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItemTexts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#createMany
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemTexts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#upsert
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItemTexts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#exists
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItemTexts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#findById
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItemTexts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#find
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemTexts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#findOne
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItemTexts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#updateAll
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItemTexts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#deleteById
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItemTexts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#count
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItemTexts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItemTexts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItemTexts/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.findById() instead.
        "::findById::SvHilfsprojektItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.destroyById() instead.
        "::destroyById::SvHilfsprojektItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.updateById() instead.
        "::updateById::SvHilfsprojektItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts() instead.
        "::get::SvHilfsprojektItem::texts": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.create() instead.
        "::create::SvHilfsprojektItem::texts": {
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.createMany() instead.
        "::createMany::SvHilfsprojektItem::texts": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.destroyAll() instead.
        "::delete::SvHilfsprojektItem::texts": {
          url: urlBase + "/SvHilfsprojektItems/:id/texts",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.texts.count() instead.
        "::count::SvHilfsprojektItem::texts": {
          url: urlBase + "/SvHilfsprojektItems/:id/texts/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#update
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#destroyById
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemText#removeById
         * @methodOf lbservices.SvHilfsprojektItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemText` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItemText#modelName
    * @propertyOf lbservices.SvHilfsprojektItemText
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItemText`.
    */
    R.modelName = "SvHilfsprojektItemText";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItemTextTranslation
 * @header lbservices.SvHilfsprojektItemTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItemTextTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItemTextTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#create
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#createMany
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemTextTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#upsert
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#exists
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#findById
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#find
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemTextTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#findOne
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#updateAll
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#deleteById
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#count
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItemTextTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#update
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#destroyById
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemTextTranslation#removeById
         * @methodOf lbservices.SvHilfsprojektItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItemTextTranslation#modelName
    * @propertyOf lbservices.SvHilfsprojektItemTextTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItemTextTranslation`.
    */
    R.modelName = "SvHilfsprojektItemTextTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItemImage
 * @header lbservices.SvHilfsprojektItemImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItemImage",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItemImages/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#create
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItemImages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#createMany
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemImages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#upsert
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItemImages",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#exists
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItemImages/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#findById
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItemImages/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#find
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemImages",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#findOne
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItemImages/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#updateAll
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItemImages/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#deleteById
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItemImages/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#count
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItemImages/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItemImages/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItemImages/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.findById() instead.
        "::findById::SvHilfsprojektItem::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.destroyById() instead.
        "::destroyById::SvHilfsprojektItem::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.updateById() instead.
        "::updateById::SvHilfsprojektItem::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojektItem.images() instead.
        "::get::SvHilfsprojektItem::images": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.create() instead.
        "::create::SvHilfsprojektItem::images": {
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.createMany() instead.
        "::createMany::SvHilfsprojektItem::images": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.destroyAll() instead.
        "::delete::SvHilfsprojektItem::images": {
          url: urlBase + "/SvHilfsprojektItems/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.images.count() instead.
        "::count::SvHilfsprojektItem::images": {
          url: urlBase + "/SvHilfsprojektItems/:id/images/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#update
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#destroyById
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImage#removeById
         * @methodOf lbservices.SvHilfsprojektItemImage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImage` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItemImage#modelName
    * @propertyOf lbservices.SvHilfsprojektItemImage
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItemImage`.
    */
    R.modelName = "SvHilfsprojektItemImage";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItemImageTranslation
 * @header lbservices.SvHilfsprojektItemImageTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemImageTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItemImageTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItemImageTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#create
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#createMany
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemImageTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#upsert
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#exists
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#findById
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#find
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemImageTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#findOne
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#updateAll
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#deleteById
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#count
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItemImageTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#update
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#destroyById
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemImageTranslation#removeById
         * @methodOf lbservices.SvHilfsprojektItemImageTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItemImageTranslation#modelName
    * @propertyOf lbservices.SvHilfsprojektItemImageTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItemImageTranslation`.
    */
    R.modelName = "SvHilfsprojektItemImageTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvKunststiftung
 * @header lbservices.SvKunststiftung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvKunststiftung",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvKunststiftungs/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SvKunststiftung.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvKunststiftung.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvKunststiftung.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvKunststiftung.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use SvKunststiftung.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SvKunststiftung.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use SvKunststiftung.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/SvKunststiftungs/:id/translations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#create
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvKunststiftungs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#createMany
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvKunststiftungs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#upsert
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvKunststiftungs",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#exists
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvKunststiftungs/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#findById
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvKunststiftungs/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#find
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvKunststiftungs",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#findOne
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvKunststiftungs/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#updateAll
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvKunststiftungs/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#deleteById
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvKunststiftungs/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#count
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvKunststiftungs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#prototype$updateAttributes
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvKunststiftungs/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#createChangeStream
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvKunststiftungs/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#getContentData
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/SvKunststiftungs/contentData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#updateOrCreate
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#update
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#destroyById
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#removeById
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftung` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvKunststiftung#modelName
    * @propertyOf lbservices.SvKunststiftung
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvKunststiftung`.
    */
    R.modelName = "SvKunststiftung";

    /**
     * @ngdoc object
     * @name lbservices.SvKunststiftung.translations
     * @header lbservices.SvKunststiftung.translations
     * @object
     * @description
     *
     * The object `SvKunststiftung.translations` groups methods
     * manipulating `SvKunststiftungTranslation` instances related to `SvKunststiftung`.
     *
     * Call {@link lbservices.SvKunststiftung#translations SvKunststiftung.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung#translations
         * @methodOf lbservices.SvKunststiftung
         *
         * @description
         *
         * Queries translations of SvKunststiftung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::get::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#count
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Counts translations of SvKunststiftung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::count::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#create
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::create::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#createMany
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::createMany::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#destroyAll
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::delete::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#destroyById
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::destroyById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#findById
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::findById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftung.translations#updateById
         * @methodOf lbservices.SvKunststiftung.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::updateById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvKunststiftungTranslation
 * @header lbservices.SvKunststiftungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvKunststiftungTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvKunststiftungTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#create
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvKunststiftungTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#createMany
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvKunststiftungTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#upsert
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvKunststiftungTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#exists
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvKunststiftungTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#findById
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvKunststiftungTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#find
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvKunststiftungTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#findOne
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvKunststiftungTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#updateAll
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvKunststiftungTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#deleteById
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvKunststiftungTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#count
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvKunststiftungTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#prototype$updateAttributes
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvKunststiftungTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#createChangeStream
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvKunststiftungTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvKunststiftung.translations.findById() instead.
        "::findById::SvKunststiftung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvKunststiftung.translations.destroyById() instead.
        "::destroyById::SvKunststiftung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvKunststiftung.translations.updateById() instead.
        "::updateById::SvKunststiftung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvKunststiftung.translations() instead.
        "::get::SvKunststiftung::translations": {
          isArray: true,
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use SvKunststiftung.translations.create() instead.
        "::create::SvKunststiftung::translations": {
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SvKunststiftung.translations.createMany() instead.
        "::createMany::SvKunststiftung::translations": {
          isArray: true,
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SvKunststiftung.translations.destroyAll() instead.
        "::delete::SvKunststiftung::translations": {
          url: urlBase + "/SvKunststiftungs/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use SvKunststiftung.translations.count() instead.
        "::count::SvKunststiftung::translations": {
          url: urlBase + "/SvKunststiftungs/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#updateOrCreate
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#update
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#destroyById
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvKunststiftungTranslation#removeById
         * @methodOf lbservices.SvKunststiftungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvKunststiftungTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvKunststiftungTranslation#modelName
    * @propertyOf lbservices.SvKunststiftungTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvKunststiftungTranslation`.
    */
    R.modelName = "SvKunststiftungTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStiftungTranslation
 * @header lbservices.KsStiftungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStiftungTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStiftungTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#create
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStiftungTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#createMany
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStiftungTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#upsert
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStiftungTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#exists
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStiftungTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#findById
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStiftungTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#find
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStiftungTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#findOne
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStiftungTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#updateAll
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStiftungTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#deleteById
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStiftungTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#count
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStiftungTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStiftungTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#createChangeStream
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStiftungTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.translations.findById() instead.
        "::findById::KsStiftung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.translations.destroyById() instead.
        "::destroyById::KsStiftung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.translations.updateById() instead.
        "::updateById::KsStiftung::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStiftung.translations() instead.
        "::get::KsStiftung::translations": {
          isArray: true,
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.translations.create() instead.
        "::create::KsStiftung::translations": {
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.translations.createMany() instead.
        "::createMany::KsStiftung::translations": {
          isArray: true,
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.translations.destroyAll() instead.
        "::delete::KsStiftung::translations": {
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.translations.count() instead.
        "::count::KsStiftung::translations": {
          url: urlBase + "/KsStiftungs/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#updateOrCreate
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#update
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#destroyById
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungTranslation#removeById
         * @methodOf lbservices.KsStiftungTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStiftungTranslation#modelName
    * @propertyOf lbservices.KsStiftungTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStiftungTranslation`.
    */
    R.modelName = "KsStiftungTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStiftungVideoTranslation
 * @header lbservices.KsStiftungVideoTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftungVideoTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStiftungVideoTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStiftungVideoTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#create
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStiftungVideoTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#createMany
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStiftungVideoTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#upsert
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStiftungVideoTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#exists
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStiftungVideoTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#findById
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStiftungVideoTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#find
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStiftungVideoTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#findOne
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStiftungVideoTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#updateAll
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStiftungVideoTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#deleteById
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStiftungVideoTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#count
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStiftungVideoTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStiftungVideoTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#createChangeStream
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStiftungVideoTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#updateOrCreate
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#update
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#destroyById
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideoTranslation#removeById
         * @methodOf lbservices.KsStiftungVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideoTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStiftungVideoTranslation#modelName
    * @propertyOf lbservices.KsStiftungVideoTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStiftungVideoTranslation`.
    */
    R.modelName = "KsStiftungVideoTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStiftung
 * @header lbservices.KsStiftung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStiftung",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStiftungs/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsStiftung.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStiftung.videos.findById() instead.
        "prototype$__findById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/videos/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.videos.destroyById() instead.
        "prototype$__destroyById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/videos/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.videos.updateById() instead.
        "prototype$__updateById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/videos/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStiftung.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/KsStiftungs/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/KsStiftungs/:id/translations/count",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.videos() instead.
        "prototype$__get__videos": {
          isArray: true,
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.videos.create() instead.
        "prototype$__create__videos": {
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.videos.destroyAll() instead.
        "prototype$__delete__videos": {
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.videos.count() instead.
        "prototype$__count__videos": {
          url: urlBase + "/KsStiftungs/:id/videos/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#create
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStiftungs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#createMany
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStiftungs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#upsert
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStiftungs",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#exists
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStiftungs/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#findById
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStiftungs/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#find
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStiftungs",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#findOne
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStiftungs/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#updateAll
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStiftungs/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#deleteById
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStiftungs/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#count
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStiftungs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#prototype$updateAttributes
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStiftungs/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#createChangeStream
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStiftungs/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#getContentData
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/KsStiftungs/contentData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#updateOrCreate
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#update
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#destroyById
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#removeById
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftung` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStiftung#modelName
    * @propertyOf lbservices.KsStiftung
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStiftung`.
    */
    R.modelName = "KsStiftung";

    /**
     * @ngdoc object
     * @name lbservices.KsStiftung.translations
     * @header lbservices.KsStiftung.translations
     * @object
     * @description
     *
     * The object `KsStiftung.translations` groups methods
     * manipulating `KsStiftungTranslation` instances related to `KsStiftung`.
     *
     * Call {@link lbservices.KsStiftung#translations KsStiftung.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#translations
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Queries translations of KsStiftung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::get::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#count
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Counts translations of KsStiftung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::count::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#create
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::create::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#createMany
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::createMany::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#destroyAll
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::delete::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#destroyById
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::destroyById::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#findById
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::findById::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.translations#updateById
         * @methodOf lbservices.KsStiftung.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::updateById::KsStiftung::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsStiftung.videos
     * @header lbservices.KsStiftung.videos
     * @object
     * @description
     *
     * The object `KsStiftung.videos` groups methods
     * manipulating `KsStiftungVideo` instances related to `KsStiftung`.
     *
     * Call {@link lbservices.KsStiftung#videos KsStiftung.videos()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStiftung#videos
         * @methodOf lbservices.KsStiftung
         *
         * @description
         *
         * Queries videos of KsStiftung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R.videos = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::get::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#count
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Counts videos of KsStiftung.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.videos.count = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::count::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#create
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Creates a new instance in videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R.videos.create = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::create::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#createMany
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Creates a new instance in videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::createMany::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#destroyAll
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Deletes all videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::delete::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#destroyById
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Delete a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::destroyById::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#findById
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Find a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R.videos.findById = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::findById::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStiftung.videos#updateById
         * @methodOf lbservices.KsStiftung.videos
         *
         * @description
         *
         * Update a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::updateById::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKultur
 * @header lbservices.KsKultur
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKultur` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKultur",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturs/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsKultur.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKultur.items.findById() instead.
        "prototype$__findById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.items.destroyById() instead.
        "prototype$__destroyById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.items.updateById() instead.
        "prototype$__updateById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKultur.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/KsKulturs/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/KsKulturs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/KsKulturs/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/KsKulturs/:id/translations/count",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.items() instead.
        "prototype$__get__items": {
          isArray: true,
          url: urlBase + "/KsKulturs/:id/items",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.items.create() instead.
        "prototype$__create__items": {
          url: urlBase + "/KsKulturs/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.items.destroyAll() instead.
        "prototype$__delete__items": {
          url: urlBase + "/KsKulturs/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.items.count() instead.
        "prototype$__count__items": {
          url: urlBase + "/KsKulturs/:id/items/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#create
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#createMany
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#upsert
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturs",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#exists
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturs/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#findById
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturs/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#find
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturs",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#findOne
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturs/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#updateAll
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturs/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#deleteById
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturs/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#count
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#prototype$updateAttributes
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturs/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#createChangeStream
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturs/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#getContentData
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/KsKulturs/contentData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKultur#updateOrCreate
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#update
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#destroyById
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKultur#removeById
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKultur` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKultur#modelName
    * @propertyOf lbservices.KsKultur
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKultur`.
    */
    R.modelName = "KsKultur";

    /**
     * @ngdoc object
     * @name lbservices.KsKultur.translations
     * @header lbservices.KsKultur.translations
     * @object
     * @description
     *
     * The object `KsKultur.translations` groups methods
     * manipulating `KsKulturTranslation` instances related to `KsKultur`.
     *
     * Call {@link lbservices.KsKultur#translations KsKultur.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsKultur#translations
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Queries translations of KsKultur.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::get::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#count
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Counts translations of KsKultur.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::count::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#create
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::create::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#createMany
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::createMany::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#destroyAll
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::delete::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#destroyById
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::destroyById::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#findById
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::findById::KsKultur::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.translations#updateById
         * @methodOf lbservices.KsKultur.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::updateById::KsKultur::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsKultur.items
     * @header lbservices.KsKultur.items
     * @object
     * @description
     *
     * The object `KsKultur.items` groups methods
     * manipulating `KsKulturItem` instances related to `KsKultur`.
     *
     * Call {@link lbservices.KsKultur#items KsKultur.items()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsKultur#items
         * @methodOf lbservices.KsKultur
         *
         * @description
         *
         * Queries items of KsKultur.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R.items = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::get::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#count
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Counts items of KsKultur.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.items.count = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::count::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#create
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R.items.create = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::create::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#createMany
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R.items.createMany = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::createMany::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#destroyAll
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Deletes all items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::delete::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#destroyById
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Delete a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::destroyById::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#findById
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Find a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R.items.findById = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::findById::KsKultur::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKultur.items#updateById
         * @methodOf lbservices.KsKultur.items
         *
         * @description
         *
         * Update a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R.items.updateById = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::updateById::KsKultur::items"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKulturTranslation
 * @header lbservices.KsKulturTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKulturTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#create
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#createMany
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#upsert
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#exists
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#findById
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#find
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#findOne
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#updateAll
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#deleteById
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#count
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#createChangeStream
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.translations.findById() instead.
        "::findById::KsKultur::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.translations.destroyById() instead.
        "::destroyById::KsKultur::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.translations.updateById() instead.
        "::updateById::KsKultur::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKultur.translations() instead.
        "::get::KsKultur::translations": {
          isArray: true,
          url: urlBase + "/KsKulturs/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.translations.create() instead.
        "::create::KsKultur::translations": {
          url: urlBase + "/KsKulturs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.translations.createMany() instead.
        "::createMany::KsKultur::translations": {
          isArray: true,
          url: urlBase + "/KsKulturs/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.translations.destroyAll() instead.
        "::delete::KsKultur::translations": {
          url: urlBase + "/KsKulturs/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.translations.count() instead.
        "::count::KsKultur::translations": {
          url: urlBase + "/KsKulturs/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#updateOrCreate
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#update
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#destroyById
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturTranslation#removeById
         * @methodOf lbservices.KsKulturTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKulturTranslation#modelName
    * @propertyOf lbservices.KsKulturTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKulturTranslation`.
    */
    R.modelName = "KsKulturTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKulturItem
 * @header lbservices.KsKulturItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKulturItem",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturItems/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsKulturItem.images.findById() instead.
        "prototype$__findById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.images.destroyById() instead.
        "prototype$__destroyById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.images.updateById() instead.
        "prototype$__updateById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKulturItem.videos.findById() instead.
        "prototype$__findById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/videos/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.videos.destroyById() instead.
        "prototype$__destroyById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/videos/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.videos.updateById() instead.
        "prototype$__updateById__videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/videos/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKulturItem.images() instead.
        "prototype$__get__images": {
          isArray: true,
          url: urlBase + "/KsKulturItems/:id/images",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.images.create() instead.
        "prototype$__create__images": {
          url: urlBase + "/KsKulturItems/:id/images",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.images.destroyAll() instead.
        "prototype$__delete__images": {
          url: urlBase + "/KsKulturItems/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.images.count() instead.
        "prototype$__count__images": {
          url: urlBase + "/KsKulturItems/:id/images/count",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.videos() instead.
        "prototype$__get__videos": {
          isArray: true,
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.videos.create() instead.
        "prototype$__create__videos": {
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.videos.destroyAll() instead.
        "prototype$__delete__videos": {
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.videos.count() instead.
        "prototype$__count__videos": {
          url: urlBase + "/KsKulturItems/:id/videos/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#create
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#createMany
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#upsert
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturItems",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#exists
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturItems/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#findById
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturItems/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#find
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturItems",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#findOne
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturItems/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#updateAll
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturItems/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#deleteById
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturItems/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#count
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturItems/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#prototype$updateAttributes
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturItems/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#createChangeStream
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturItems/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.items.findById() instead.
        "::findById::KsKultur::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.items.destroyById() instead.
        "::destroyById::KsKultur::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.items.updateById() instead.
        "::updateById::KsKultur::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturs/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKultur.items() instead.
        "::get::KsKultur::items": {
          isArray: true,
          url: urlBase + "/KsKulturs/:id/items",
          method: "GET"
        },

        // INTERNAL. Use KsKultur.items.create() instead.
        "::create::KsKultur::items": {
          url: urlBase + "/KsKulturs/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.items.createMany() instead.
        "::createMany::KsKultur::items": {
          isArray: true,
          url: urlBase + "/KsKulturs/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsKultur.items.destroyAll() instead.
        "::delete::KsKultur::items": {
          url: urlBase + "/KsKulturs/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use KsKultur.items.count() instead.
        "::count::KsKultur::items": {
          url: urlBase + "/KsKulturs/:id/items/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#updateOrCreate
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#update
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#destroyById
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#removeById
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItem` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKulturItem#modelName
    * @propertyOf lbservices.KsKulturItem
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKulturItem`.
    */
    R.modelName = "KsKulturItem";

    /**
     * @ngdoc object
     * @name lbservices.KsKulturItem.images
     * @header lbservices.KsKulturItem.images
     * @object
     * @description
     *
     * The object `KsKulturItem.images` groups methods
     * manipulating `KsKulturItemImage` instances related to `KsKulturItem`.
     *
     * Call {@link lbservices.KsKulturItem#images KsKulturItem.images()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#images
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Queries images of KsKulturItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R.images = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::get::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#count
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Counts images of KsKulturItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.images.count = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::count::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#create
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R.images.create = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::create::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#createMany
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R.images.createMany = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::createMany::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#destroyAll
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Deletes all images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::delete::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#destroyById
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Delete a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::destroyById::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#findById
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Find a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R.images.findById = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::findById::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.images#updateById
         * @methodOf lbservices.KsKulturItem.images
         *
         * @description
         *
         * Update a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R.images.updateById = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::updateById::KsKulturItem::images"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsKulturItem.videos
     * @header lbservices.KsKulturItem.videos
     * @object
     * @description
     *
     * The object `KsKulturItem.videos` groups methods
     * manipulating `KsKulturItemVideo` instances related to `KsKulturItem`.
     *
     * Call {@link lbservices.KsKulturItem#videos KsKulturItem.videos()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem#videos
         * @methodOf lbservices.KsKulturItem
         *
         * @description
         *
         * Queries videos of KsKulturItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R.videos = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::get::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#count
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Counts videos of KsKulturItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.videos.count = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::count::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#create
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Creates a new instance in videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R.videos.create = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::create::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#createMany
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Creates a new instance in videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::createMany::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#destroyAll
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Deletes all videos of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::delete::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#destroyById
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Delete a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::destroyById::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#findById
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Find a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R.videos.findById = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::findById::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItem.videos#updateById
         * @methodOf lbservices.KsKulturItem.videos
         *
         * @description
         *
         * Update a related item by id for videos.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for videos
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::updateById::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKulturItemImage
 * @header lbservices.KsKulturItemImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKulturItemImage",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturItemImages/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#create
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturItemImages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#createMany
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturItemImages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#upsert
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturItemImages",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#exists
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturItemImages/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#findById
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturItemImages/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#find
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturItemImages",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#findOne
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturItemImages/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#updateAll
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturItemImages/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#deleteById
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturItemImages/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#count
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturItemImages/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#prototype$updateAttributes
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturItemImages/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#createChangeStream
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturItemImages/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.images.findById() instead.
        "::findById::KsKulturItem::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.images.destroyById() instead.
        "::destroyById::KsKulturItem::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.images.updateById() instead.
        "::updateById::KsKulturItem::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKulturItem.images() instead.
        "::get::KsKulturItem::images": {
          isArray: true,
          url: urlBase + "/KsKulturItems/:id/images",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.images.create() instead.
        "::create::KsKulturItem::images": {
          url: urlBase + "/KsKulturItems/:id/images",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.images.createMany() instead.
        "::createMany::KsKulturItem::images": {
          isArray: true,
          url: urlBase + "/KsKulturItems/:id/images",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.images.destroyAll() instead.
        "::delete::KsKulturItem::images": {
          url: urlBase + "/KsKulturItems/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.images.count() instead.
        "::count::KsKulturItem::images": {
          url: urlBase + "/KsKulturItems/:id/images/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#updateOrCreate
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#update
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#destroyById
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImage#removeById
         * @methodOf lbservices.KsKulturItemImage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImage` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKulturItemImage#modelName
    * @propertyOf lbservices.KsKulturItemImage
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKulturItemImage`.
    */
    R.modelName = "KsKulturItemImage";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKulturItemImageTranslation
 * @header lbservices.KsKulturItemImageTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemImageTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKulturItemImageTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturItemImageTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#create
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturItemImageTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#createMany
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturItemImageTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#upsert
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturItemImageTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#exists
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturItemImageTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#findById
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturItemImageTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#find
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturItemImageTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#findOne
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturItemImageTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#updateAll
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturItemImageTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#deleteById
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturItemImageTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#count
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturItemImageTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturItemImageTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#createChangeStream
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturItemImageTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#updateOrCreate
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#update
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#destroyById
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemImageTranslation#removeById
         * @methodOf lbservices.KsKulturItemImageTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemImageTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKulturItemImageTranslation#modelName
    * @propertyOf lbservices.KsKulturItemImageTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKulturItemImageTranslation`.
    */
    R.modelName = "KsKulturItemImageTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKulturItemVideo
 * @header lbservices.KsKulturItemVideo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemVideo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKulturItemVideo",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturItemVideos/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#create
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturItemVideos",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#createMany
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturItemVideos",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#upsert
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturItemVideos",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#exists
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturItemVideos/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#findById
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturItemVideos/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#find
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturItemVideos",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#findOne
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturItemVideos/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#updateAll
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturItemVideos/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#deleteById
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturItemVideos/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#count
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturItemVideos/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#prototype$updateAttributes
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturItemVideos/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#createChangeStream
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturItemVideos/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.videos.findById() instead.
        "::findById::KsKulturItem::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/videos/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.videos.destroyById() instead.
        "::destroyById::KsKulturItem::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/videos/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.videos.updateById() instead.
        "::updateById::KsKulturItem::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsKulturItems/:id/videos/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsKulturItem.videos() instead.
        "::get::KsKulturItem::videos": {
          isArray: true,
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "GET"
        },

        // INTERNAL. Use KsKulturItem.videos.create() instead.
        "::create::KsKulturItem::videos": {
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.videos.createMany() instead.
        "::createMany::KsKulturItem::videos": {
          isArray: true,
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use KsKulturItem.videos.destroyAll() instead.
        "::delete::KsKulturItem::videos": {
          url: urlBase + "/KsKulturItems/:id/videos",
          method: "DELETE"
        },

        // INTERNAL. Use KsKulturItem.videos.count() instead.
        "::count::KsKulturItem::videos": {
          url: urlBase + "/KsKulturItems/:id/videos/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#updateOrCreate
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#update
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#destroyById
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideo#removeById
         * @methodOf lbservices.KsKulturItemVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideo` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKulturItemVideo#modelName
    * @propertyOf lbservices.KsKulturItemVideo
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKulturItemVideo`.
    */
    R.modelName = "KsKulturItemVideo";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsKulturItemVideoTranslation
 * @header lbservices.KsKulturItemVideoTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemVideoTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsKulturItemVideoTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsKulturItemVideoTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#create
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsKulturItemVideoTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#createMany
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsKulturItemVideoTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#upsert
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsKulturItemVideoTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#exists
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsKulturItemVideoTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#findById
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsKulturItemVideoTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#find
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsKulturItemVideoTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#findOne
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsKulturItemVideoTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#updateAll
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsKulturItemVideoTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#deleteById
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsKulturItemVideoTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#count
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsKulturItemVideoTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsKulturItemVideoTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#createChangeStream
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsKulturItemVideoTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#updateOrCreate
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#update
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#destroyById
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsKulturItemVideoTranslation#removeById
         * @methodOf lbservices.KsKulturItemVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsKulturItemVideoTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsKulturItemVideoTranslation#modelName
    * @propertyOf lbservices.KsKulturItemVideoTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsKulturItemVideoTranslation`.
    */
    R.modelName = "KsKulturItemVideoTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreis
 * @header lbservices.KsMusikpreis
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreis` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreis",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreis/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsMusikpreis.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreis.items.findById() instead.
        "prototype$__findById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.items.destroyById() instead.
        "prototype$__destroyById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.items.updateById() instead.
        "prototype$__updateById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreis.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/KsMusikpreis/:id/translations/count",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.items() instead.
        "prototype$__get__items": {
          isArray: true,
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.items.create() instead.
        "prototype$__create__items": {
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.items.destroyAll() instead.
        "prototype$__delete__items": {
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.items.count() instead.
        "prototype$__count__items": {
          url: urlBase + "/KsMusikpreis/:id/items/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#create
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreis",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#createMany
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreis",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#upsert
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreis",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#exists
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreis/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#findById
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreis/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#find
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreis",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#findOne
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreis/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#updateAll
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreis/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#deleteById
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreis/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#count
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreis/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreis/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#createChangeStream
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreis/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#getContentData
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/KsMusikpreis/contentData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#updateOrCreate
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#update
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#destroyById
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#removeById
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreis` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreis#modelName
    * @propertyOf lbservices.KsMusikpreis
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreis`.
    */
    R.modelName = "KsMusikpreis";

    /**
     * @ngdoc object
     * @name lbservices.KsMusikpreis.translations
     * @header lbservices.KsMusikpreis.translations
     * @object
     * @description
     *
     * The object `KsMusikpreis.translations` groups methods
     * manipulating `KsMusikpreisTranslation` instances related to `KsMusikpreis`.
     *
     * Call {@link lbservices.KsMusikpreis#translations KsMusikpreis.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#translations
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Queries translations of KsMusikpreis.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::get::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#count
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Counts translations of KsMusikpreis.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::count::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#create
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::create::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#createMany
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::createMany::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#destroyAll
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::delete::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#destroyById
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::destroyById::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#findById
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::findById::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.translations#updateById
         * @methodOf lbservices.KsMusikpreis.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::updateById::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsMusikpreis.items
     * @header lbservices.KsMusikpreis.items
     * @object
     * @description
     *
     * The object `KsMusikpreis.items` groups methods
     * manipulating `KsMusikpreisItem` instances related to `KsMusikpreis`.
     *
     * Call {@link lbservices.KsMusikpreis#items KsMusikpreis.items()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis#items
         * @methodOf lbservices.KsMusikpreis
         *
         * @description
         *
         * Queries items of KsMusikpreis.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R.items = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::get::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#count
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Counts items of KsMusikpreis.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.items.count = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::count::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#create
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R.items.create = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::create::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#createMany
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R.items.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::createMany::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#destroyAll
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Deletes all items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::delete::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#destroyById
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Delete a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::destroyById::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#findById
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Find a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R.items.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::findById::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreis.items#updateById
         * @methodOf lbservices.KsMusikpreis.items
         *
         * @description
         *
         * Update a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R.items.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::updateById::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreisTranslation
 * @header lbservices.KsMusikpreisTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreisTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreisTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#create
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreisTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#createMany
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreisTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#upsert
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreisTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#exists
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreisTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#findById
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreisTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#find
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreisTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#findOne
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreisTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#updateAll
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreisTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#deleteById
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreisTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#count
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreisTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreisTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#createChangeStream
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreisTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.translations.findById() instead.
        "::findById::KsMusikpreis::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.translations.destroyById() instead.
        "::destroyById::KsMusikpreis::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.translations.updateById() instead.
        "::updateById::KsMusikpreis::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreis.translations() instead.
        "::get::KsMusikpreis::translations": {
          isArray: true,
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.translations.create() instead.
        "::create::KsMusikpreis::translations": {
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.translations.createMany() instead.
        "::createMany::KsMusikpreis::translations": {
          isArray: true,
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.translations.destroyAll() instead.
        "::delete::KsMusikpreis::translations": {
          url: urlBase + "/KsMusikpreis/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.translations.count() instead.
        "::count::KsMusikpreis::translations": {
          url: urlBase + "/KsMusikpreis/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#updateOrCreate
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#update
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#destroyById
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisTranslation#removeById
         * @methodOf lbservices.KsMusikpreisTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreisTranslation#modelName
    * @propertyOf lbservices.KsMusikpreisTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreisTranslation`.
    */
    R.modelName = "KsMusikpreisTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreisItem
 * @header lbservices.KsMusikpreisItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreisItem",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreisItems/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsMusikpreisItem.texts.findById() instead.
        "prototype$__findById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.destroyById() instead.
        "prototype$__destroyById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.updateById() instead.
        "prototype$__updateById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.findById() instead.
        "prototype$__findById__persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.destroyById() instead.
        "prototype$__destroyById__persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.updateById() instead.
        "prototype$__updateById__persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreisItem.texts() instead.
        "prototype$__get__texts": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.create() instead.
        "prototype$__create__texts": {
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.destroyAll() instead.
        "prototype$__delete__texts": {
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.count() instead.
        "prototype$__count__texts": {
          url: urlBase + "/KsMusikpreisItems/:id/texts/count",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.persons() instead.
        "prototype$__get__persons": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.create() instead.
        "prototype$__create__persons": {
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.destroyAll() instead.
        "prototype$__delete__persons": {
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.count() instead.
        "prototype$__count__persons": {
          url: urlBase + "/KsMusikpreisItems/:id/persons/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#create
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreisItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#createMany
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#upsert
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreisItems",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#exists
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreisItems/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#findById
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreisItems/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#find
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#findOne
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreisItems/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#updateAll
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreisItems/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#deleteById
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreisItems/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#count
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreisItems/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreisItems/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#createChangeStream
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreisItems/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.items.findById() instead.
        "::findById::KsMusikpreis::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.items.destroyById() instead.
        "::destroyById::KsMusikpreis::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.items.updateById() instead.
        "::updateById::KsMusikpreis::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreis/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreis.items() instead.
        "::get::KsMusikpreis::items": {
          isArray: true,
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreis.items.create() instead.
        "::create::KsMusikpreis::items": {
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.items.createMany() instead.
        "::createMany::KsMusikpreis::items": {
          isArray: true,
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreis.items.destroyAll() instead.
        "::delete::KsMusikpreis::items": {
          url: urlBase + "/KsMusikpreis/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreis.items.count() instead.
        "::count::KsMusikpreis::items": {
          url: urlBase + "/KsMusikpreis/:id/items/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#updateOrCreate
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#update
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#destroyById
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#removeById
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItem` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreisItem#modelName
    * @propertyOf lbservices.KsMusikpreisItem
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreisItem`.
    */
    R.modelName = "KsMusikpreisItem";

    /**
     * @ngdoc object
     * @name lbservices.KsMusikpreisItem.texts
     * @header lbservices.KsMusikpreisItem.texts
     * @object
     * @description
     *
     * The object `KsMusikpreisItem.texts` groups methods
     * manipulating `KsMusikpreisItemText` instances related to `KsMusikpreisItem`.
     *
     * Call {@link lbservices.KsMusikpreisItem#texts KsMusikpreisItem.texts()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#texts
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Queries texts of KsMusikpreisItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R.texts = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::get::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#count
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Counts texts of KsMusikpreisItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.texts.count = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::count::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#create
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Creates a new instance in texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R.texts.create = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::create::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#createMany
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Creates a new instance in texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R.texts.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::createMany::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#destroyAll
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Deletes all texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.texts.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::delete::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#destroyById
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Delete a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.texts.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::destroyById::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#findById
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Find a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R.texts.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::findById::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.texts#updateById
         * @methodOf lbservices.KsMusikpreisItem.texts
         *
         * @description
         *
         * Update a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R.texts.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::updateById::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsMusikpreisItem.persons
     * @header lbservices.KsMusikpreisItem.persons
     * @object
     * @description
     *
     * The object `KsMusikpreisItem.persons` groups methods
     * manipulating `KsMusikpreisItemPerson` instances related to `KsMusikpreisItem`.
     *
     * Call {@link lbservices.KsMusikpreisItem#persons KsMusikpreisItem.persons()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem#persons
         * @methodOf lbservices.KsMusikpreisItem
         *
         * @description
         *
         * Queries persons of KsMusikpreisItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R.persons = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::get::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#count
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Counts persons of KsMusikpreisItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.persons.count = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::count::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#create
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Creates a new instance in persons of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R.persons.create = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::create::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#createMany
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Creates a new instance in persons of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R.persons.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::createMany::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#destroyAll
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Deletes all persons of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.persons.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::delete::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#destroyById
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Delete a related item by id for persons.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for persons
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.persons.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::destroyById::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#findById
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Find a related item by id for persons.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for persons
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R.persons.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::findById::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItem.persons#updateById
         * @methodOf lbservices.KsMusikpreisItem.persons
         *
         * @description
         *
         * Update a related item by id for persons.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for persons
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R.persons.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::updateById::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreisItemText
 * @header lbservices.KsMusikpreisItemText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreisItemText",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreisItemTexts/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#create
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreisItemTexts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#createMany
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemTexts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#upsert
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreisItemTexts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#exists
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreisItemTexts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#findById
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreisItemTexts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#find
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemTexts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#findOne
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreisItemTexts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#updateAll
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreisItemTexts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#deleteById
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreisItemTexts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#count
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreisItemTexts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreisItemTexts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#createChangeStream
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreisItemTexts/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.findById() instead.
        "::findById::KsMusikpreisItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.destroyById() instead.
        "::destroyById::KsMusikpreisItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.updateById() instead.
        "::updateById::KsMusikpreisItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreisItem.texts() instead.
        "::get::KsMusikpreisItem::texts": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.create() instead.
        "::create::KsMusikpreisItem::texts": {
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.createMany() instead.
        "::createMany::KsMusikpreisItem::texts": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.destroyAll() instead.
        "::delete::KsMusikpreisItem::texts": {
          url: urlBase + "/KsMusikpreisItems/:id/texts",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.texts.count() instead.
        "::count::KsMusikpreisItem::texts": {
          url: urlBase + "/KsMusikpreisItems/:id/texts/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#updateOrCreate
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#update
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#destroyById
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemText#removeById
         * @methodOf lbservices.KsMusikpreisItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemText` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreisItemText#modelName
    * @propertyOf lbservices.KsMusikpreisItemText
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreisItemText`.
    */
    R.modelName = "KsMusikpreisItemText";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreisItemTextTranslation
 * @header lbservices.KsMusikpreisItemTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreisItemTextTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreisItemTextTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#create
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreisItemTextTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#createMany
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemTextTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#upsert
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreisItemTextTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#exists
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#findById
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#find
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemTextTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#findOne
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#updateAll
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#deleteById
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#count
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#createChangeStream
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreisItemTextTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#updateOrCreate
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#update
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#destroyById
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemTextTranslation#removeById
         * @methodOf lbservices.KsMusikpreisItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreisItemTextTranslation#modelName
    * @propertyOf lbservices.KsMusikpreisItemTextTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreisItemTextTranslation`.
    */
    R.modelName = "KsMusikpreisItemTextTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreisItemPerson
 * @header lbservices.KsMusikpreisItemPerson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemPerson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreisItemPerson",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreisItemPeople/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#create
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreisItemPeople",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#createMany
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemPeople",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#upsert
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreisItemPeople",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#exists
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreisItemPeople/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#findById
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreisItemPeople/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#find
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemPeople",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#findOne
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreisItemPeople/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#updateAll
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreisItemPeople/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#deleteById
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreisItemPeople/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#count
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreisItemPeople/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreisItemPeople/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#createChangeStream
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreisItemPeople/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.findById() instead.
        "::findById::KsMusikpreisItem::persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.destroyById() instead.
        "::destroyById::KsMusikpreisItem::persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.updateById() instead.
        "::updateById::KsMusikpreisItem::persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsMusikpreisItem.persons() instead.
        "::get::KsMusikpreisItem::persons": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "GET"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.create() instead.
        "::create::KsMusikpreisItem::persons": {
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.createMany() instead.
        "::createMany::KsMusikpreisItem::persons": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "POST"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.destroyAll() instead.
        "::delete::KsMusikpreisItem::persons": {
          url: urlBase + "/KsMusikpreisItems/:id/persons",
          method: "DELETE"
        },

        // INTERNAL. Use KsMusikpreisItem.persons.count() instead.
        "::count::KsMusikpreisItem::persons": {
          url: urlBase + "/KsMusikpreisItems/:id/persons/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#updateOrCreate
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#update
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#destroyById
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPerson#removeById
         * @methodOf lbservices.KsMusikpreisItemPerson
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPerson` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreisItemPerson#modelName
    * @propertyOf lbservices.KsMusikpreisItemPerson
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreisItemPerson`.
    */
    R.modelName = "KsMusikpreisItemPerson";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsMusikpreisItemPersonTranslation
 * @header lbservices.KsMusikpreisItemPersonTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemPersonTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsMusikpreisItemPersonTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsMusikpreisItemPersonTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#create
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#createMany
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemPersonTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#upsert
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#exists
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#findById
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#find
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsMusikpreisItemPersonTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#findOne
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#updateAll
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#deleteById
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#count
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#createChangeStream
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsMusikpreisItemPersonTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#updateOrCreate
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#update
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#destroyById
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsMusikpreisItemPersonTranslation#removeById
         * @methodOf lbservices.KsMusikpreisItemPersonTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsMusikpreisItemPersonTranslation#modelName
    * @propertyOf lbservices.KsMusikpreisItemPersonTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsMusikpreisItemPersonTranslation`.
    */
    R.modelName = "KsMusikpreisItemPersonTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItemVideo
 * @header lbservices.SvHilfsprojektItemVideo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemVideo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItemVideo",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItemVideos/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#create
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItemVideos",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#createMany
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemVideos",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#upsert
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItemVideos",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#exists
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItemVideos/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#findById
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItemVideos/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#find
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemVideos",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#findOne
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItemVideos/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#updateAll
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItemVideos/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#deleteById
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItemVideos/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#count
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItemVideos/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItemVideos/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItemVideos/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.findById() instead.
        "::findById::SvHilfsprojektItem::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.destroyById() instead.
        "::destroyById::SvHilfsprojektItem::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.updateById() instead.
        "::updateById::SvHilfsprojektItem::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos() instead.
        "::get::SvHilfsprojektItem::videos": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "GET"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.create() instead.
        "::create::SvHilfsprojektItem::videos": {
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.createMany() instead.
        "::createMany::SvHilfsprojektItem::videos": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.destroyAll() instead.
        "::delete::SvHilfsprojektItem::videos": {
          url: urlBase + "/SvHilfsprojektItems/:id/videos",
          method: "DELETE"
        },

        // INTERNAL. Use SvHilfsprojektItem.videos.count() instead.
        "::count::SvHilfsprojektItem::videos": {
          url: urlBase + "/SvHilfsprojektItems/:id/videos/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#update
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#destroyById
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideo#removeById
         * @methodOf lbservices.SvHilfsprojektItemVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideo` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItemVideo#modelName
    * @propertyOf lbservices.SvHilfsprojektItemVideo
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItemVideo`.
    */
    R.modelName = "SvHilfsprojektItemVideo";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvHilfsprojektItemVideoTranslation
 * @header lbservices.SvHilfsprojektItemVideoTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemVideoTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvHilfsprojektItemVideoTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#create
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#createMany
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemVideoTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#upsert
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#exists
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#findById
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#find
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvHilfsprojektItemVideoTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#findOne
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#updateAll
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#deleteById
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#count
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#prototype$updateAttributes
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#createChangeStream
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvHilfsprojektItemVideoTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#updateOrCreate
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#update
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#destroyById
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvHilfsprojektItemVideoTranslation#removeById
         * @methodOf lbservices.SvHilfsprojektItemVideoTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvHilfsprojektItemVideoTranslation#modelName
    * @propertyOf lbservices.SvHilfsprojektItemVideoTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvHilfsprojektItemVideoTranslation`.
    */
    R.modelName = "SvHilfsprojektItemVideoTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvZfhilftTranslation
 * @header lbservices.SvZfhilftTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvZfhilftTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvZfhilftTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#create
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvZfhilftTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#createMany
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvZfhilftTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#upsert
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvZfhilftTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#exists
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvZfhilftTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#findById
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvZfhilftTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#find
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvZfhilftTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#findOne
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvZfhilftTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#updateAll
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvZfhilftTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#deleteById
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvZfhilftTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#count
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvZfhilftTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#prototype$updateAttributes
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvZfhilftTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#createChangeStream
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvZfhilftTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.translations.findById() instead.
        "::findById::SvZfhilft::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.translations.destroyById() instead.
        "::destroyById::SvZfhilft::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.translations.updateById() instead.
        "::updateById::SvZfhilft::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvZfhilft.translations() instead.
        "::get::SvZfhilft::translations": {
          isArray: true,
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.translations.create() instead.
        "::create::SvZfhilft::translations": {
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.translations.createMany() instead.
        "::createMany::SvZfhilft::translations": {
          isArray: true,
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.translations.destroyAll() instead.
        "::delete::SvZfhilft::translations": {
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.translations.count() instead.
        "::count::SvZfhilft::translations": {
          url: urlBase + "/SvZfhilfts/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#updateOrCreate
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#update
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#destroyById
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilftTranslation#removeById
         * @methodOf lbservices.SvZfhilftTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvZfhilftTranslation#modelName
    * @propertyOf lbservices.SvZfhilftTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvZfhilftTranslation`.
    */
    R.modelName = "SvZfhilftTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.SvZfhilft
 * @header lbservices.SvZfhilft
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilft` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SvZfhilft",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SvZfhilfts/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SvZfhilft.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvZfhilft.projects.findById() instead.
        "prototype$__findById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/projects/:fk",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.projects.destroyById() instead.
        "prototype$__destroyById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/projects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.projects.updateById() instead.
        "prototype$__updateById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/SvZfhilfts/:id/projects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use SvZfhilft.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/SvZfhilfts/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/SvZfhilfts/:id/translations/count",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.projects() instead.
        "prototype$__get__projects": {
          isArray: true,
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "GET"
        },

        // INTERNAL. Use SvZfhilft.projects.create() instead.
        "prototype$__create__projects": {
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use SvZfhilft.projects.destroyAll() instead.
        "prototype$__delete__projects": {
          url: urlBase + "/SvZfhilfts/:id/projects",
          method: "DELETE"
        },

        // INTERNAL. Use SvZfhilft.projects.count() instead.
        "prototype$__count__projects": {
          url: urlBase + "/SvZfhilfts/:id/projects/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#create
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SvZfhilfts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#createMany
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/SvZfhilfts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#upsert
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SvZfhilfts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#exists
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SvZfhilfts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#findById
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SvZfhilfts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#find
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SvZfhilfts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#findOne
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SvZfhilfts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#updateAll
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/SvZfhilfts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#deleteById
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/SvZfhilfts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#count
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SvZfhilfts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#prototype$updateAttributes
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SvZfhilfts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#createChangeStream
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/SvZfhilfts/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#getContentData
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/SvZfhilfts/contentData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#updateOrCreate
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#update
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#destroyById
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#removeById
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilft` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.SvZfhilft#modelName
    * @propertyOf lbservices.SvZfhilft
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SvZfhilft`.
    */
    R.modelName = "SvZfhilft";

    /**
     * @ngdoc object
     * @name lbservices.SvZfhilft.translations
     * @header lbservices.SvZfhilft.translations
     * @object
     * @description
     *
     * The object `SvZfhilft.translations` groups methods
     * manipulating `SvZfhilftTranslation` instances related to `SvZfhilft`.
     *
     * Call {@link lbservices.SvZfhilft#translations SvZfhilft.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#translations
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Queries translations of SvZfhilft.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::get::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#count
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Counts translations of SvZfhilft.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::count::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#create
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::create::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#createMany
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::createMany::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#destroyAll
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::delete::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#destroyById
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::destroyById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#findById
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::findById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.translations#updateById
         * @methodOf lbservices.SvZfhilft.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvZfhilftTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::updateById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.SvZfhilft.projects
     * @header lbservices.SvZfhilft.projects
     * @object
     * @description
     *
     * The object `SvZfhilft.projects` groups methods
     * manipulating `SvHilfsprojekt` instances related to `SvZfhilft`.
     *
     * Call {@link lbservices.SvZfhilft#projects SvZfhilft.projects()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft#projects
         * @methodOf lbservices.SvZfhilft
         *
         * @description
         *
         * Queries projects of SvZfhilft.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R.projects = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::get::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#count
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Counts projects of SvZfhilft.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.projects.count = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::count::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#create
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Creates a new instance in projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R.projects.create = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::create::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#createMany
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Creates a new instance in projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R.projects.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::createMany::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#destroyAll
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Deletes all projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::delete::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#destroyById
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Delete a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::destroyById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#findById
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Find a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R.projects.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::findById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.SvZfhilft.projects#updateById
         * @methodOf lbservices.SvZfhilft.projects
         *
         * @description
         *
         * Update a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SvHilfsprojekt` object.)
         * </em>
         */
        R.projects.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::updateById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStiftungVideo
 * @header lbservices.KsStiftungVideo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftungVideo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStiftungVideo",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStiftungVideos/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#create
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStiftungVideos",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#createMany
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStiftungVideos",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#upsert
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStiftungVideos",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#exists
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStiftungVideos/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#findById
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStiftungVideos/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#find
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStiftungVideos",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#findOne
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStiftungVideos/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#updateAll
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStiftungVideos/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#deleteById
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStiftungVideos/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#count
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStiftungVideos/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#prototype$updateAttributes
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStiftungVideos/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#createChangeStream
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStiftungVideos/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.videos.findById() instead.
        "::findById::KsStiftung::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/videos/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.videos.destroyById() instead.
        "::destroyById::KsStiftung::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/videos/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.videos.updateById() instead.
        "::updateById::KsStiftung::videos": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStiftungs/:id/videos/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStiftung.videos() instead.
        "::get::KsStiftung::videos": {
          isArray: true,
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "GET"
        },

        // INTERNAL. Use KsStiftung.videos.create() instead.
        "::create::KsStiftung::videos": {
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.videos.createMany() instead.
        "::createMany::KsStiftung::videos": {
          isArray: true,
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "POST"
        },

        // INTERNAL. Use KsStiftung.videos.destroyAll() instead.
        "::delete::KsStiftung::videos": {
          url: urlBase + "/KsStiftungs/:id/videos",
          method: "DELETE"
        },

        // INTERNAL. Use KsStiftung.videos.count() instead.
        "::count::KsStiftung::videos": {
          url: urlBase + "/KsStiftungs/:id/videos/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#updateOrCreate
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#update
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#destroyById
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStiftungVideo#removeById
         * @methodOf lbservices.KsStiftungVideo
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStiftungVideo` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStiftungVideo#modelName
    * @propertyOf lbservices.KsStiftungVideo
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStiftungVideo`.
    */
    R.modelName = "KsStiftungVideo";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiat
 * @header lbservices.KsStipendiat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiat",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiats/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsStipendiat.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiat.items.findById() instead.
        "prototype$__findById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.items.destroyById() instead.
        "prototype$__destroyById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.items.updateById() instead.
        "prototype$__updateById__items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiat.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/KsStipendiats/:id/translations/count",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.items() instead.
        "prototype$__get__items": {
          isArray: true,
          url: urlBase + "/KsStipendiats/:id/items",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.items.create() instead.
        "prototype$__create__items": {
          url: urlBase + "/KsStipendiats/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.items.destroyAll() instead.
        "prototype$__delete__items": {
          url: urlBase + "/KsStipendiats/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.items.count() instead.
        "prototype$__count__items": {
          url: urlBase + "/KsStipendiats/:id/items/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#create
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiats",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#createMany
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiats",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#upsert
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiats",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#exists
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiats/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#findById
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiats/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#find
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiats",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#findOne
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiats/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#updateAll
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiats/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#deleteById
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiats/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#count
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiats/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiats/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#createChangeStream
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiats/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#getContentData
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        "getContentData": {
          url: urlBase + "/KsStipendiats/contentData",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#updateOrCreate
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#update
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#destroyById
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#removeById
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiat` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiat#modelName
    * @propertyOf lbservices.KsStipendiat
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiat`.
    */
    R.modelName = "KsStipendiat";

    /**
     * @ngdoc object
     * @name lbservices.KsStipendiat.translations
     * @header lbservices.KsStipendiat.translations
     * @object
     * @description
     *
     * The object `KsStipendiat.translations` groups methods
     * manipulating `KsStipendiatTranslation` instances related to `KsStipendiat`.
     *
     * Call {@link lbservices.KsStipendiat#translations KsStipendiat.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#translations
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Queries translations of KsStipendiat.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::get::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#count
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Counts translations of KsStipendiat.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::count::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#create
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::create::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#createMany
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::createMany::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#destroyAll
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::delete::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#destroyById
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::destroyById::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#findById
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::findById::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.translations#updateById
         * @methodOf lbservices.KsStipendiat.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::updateById::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsStipendiat.items
     * @header lbservices.KsStipendiat.items
     * @object
     * @description
     *
     * The object `KsStipendiat.items` groups methods
     * manipulating `KsStipendiatItem` instances related to `KsStipendiat`.
     *
     * Call {@link lbservices.KsStipendiat#items KsStipendiat.items()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat#items
         * @methodOf lbservices.KsStipendiat
         *
         * @description
         *
         * Queries items of KsStipendiat.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R.items = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::get::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#count
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Counts items of KsStipendiat.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.items.count = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::count::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#create
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R.items.create = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::create::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#createMany
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Creates a new instance in items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R.items.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::createMany::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#destroyAll
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Deletes all items of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::delete::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#destroyById
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Delete a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::destroyById::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#findById
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Find a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R.items.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::findById::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiat.items#updateById
         * @methodOf lbservices.KsStipendiat.items
         *
         * @description
         *
         * Update a related item by id for items.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for items
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R.items.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::updateById::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiatTranslation
 * @header lbservices.KsStipendiatTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiatTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiatTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#create
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiatTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#createMany
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiatTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#upsert
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiatTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#exists
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiatTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#findById
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiatTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#find
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiatTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#findOne
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiatTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#updateAll
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiatTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#deleteById
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiatTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#count
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiatTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiatTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#createChangeStream
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiatTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.translations.findById() instead.
        "::findById::KsStipendiat::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.translations.destroyById() instead.
        "::destroyById::KsStipendiat::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.translations.updateById() instead.
        "::updateById::KsStipendiat::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiat.translations() instead.
        "::get::KsStipendiat::translations": {
          isArray: true,
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.translations.create() instead.
        "::create::KsStipendiat::translations": {
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.translations.createMany() instead.
        "::createMany::KsStipendiat::translations": {
          isArray: true,
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.translations.destroyAll() instead.
        "::delete::KsStipendiat::translations": {
          url: urlBase + "/KsStipendiats/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.translations.count() instead.
        "::count::KsStipendiat::translations": {
          url: urlBase + "/KsStipendiats/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#updateOrCreate
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#update
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#destroyById
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatTranslation#removeById
         * @methodOf lbservices.KsStipendiatTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiatTranslation#modelName
    * @propertyOf lbservices.KsStipendiatTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiatTranslation`.
    */
    R.modelName = "KsStipendiatTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiatItem
 * @header lbservices.KsStipendiatItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiatItem",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiatItems/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsStipendiatItem.persons.findById() instead.
        "prototype$__findById__persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.persons.destroyById() instead.
        "prototype$__destroyById__persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.persons.updateById() instead.
        "prototype$__updateById__persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiatItem.texts.findById() instead.
        "prototype$__findById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.texts.destroyById() instead.
        "prototype$__destroyById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.texts.updateById() instead.
        "prototype$__updateById__texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiatItem.persons() instead.
        "prototype$__get__persons": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.persons.create() instead.
        "prototype$__create__persons": {
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.persons.destroyAll() instead.
        "prototype$__delete__persons": {
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.persons.count() instead.
        "prototype$__count__persons": {
          url: urlBase + "/KsStipendiatItems/:id/persons/count",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.texts() instead.
        "prototype$__get__texts": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.texts.create() instead.
        "prototype$__create__texts": {
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.texts.destroyAll() instead.
        "prototype$__delete__texts": {
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.texts.count() instead.
        "prototype$__count__texts": {
          url: urlBase + "/KsStipendiatItems/:id/texts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#create
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiatItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#createMany
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#upsert
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiatItems",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#exists
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiatItems/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#findById
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiatItems/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#find
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#findOne
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiatItems/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#updateAll
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiatItems/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#deleteById
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiatItems/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#count
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiatItems/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiatItems/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#createChangeStream
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiatItems/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.items.findById() instead.
        "::findById::KsStipendiat::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/items/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.items.destroyById() instead.
        "::destroyById::KsStipendiat::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/items/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.items.updateById() instead.
        "::updateById::KsStipendiat::items": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiats/:id/items/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiat.items() instead.
        "::get::KsStipendiat::items": {
          isArray: true,
          url: urlBase + "/KsStipendiats/:id/items",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiat.items.create() instead.
        "::create::KsStipendiat::items": {
          url: urlBase + "/KsStipendiats/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.items.createMany() instead.
        "::createMany::KsStipendiat::items": {
          isArray: true,
          url: urlBase + "/KsStipendiats/:id/items",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiat.items.destroyAll() instead.
        "::delete::KsStipendiat::items": {
          url: urlBase + "/KsStipendiats/:id/items",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiat.items.count() instead.
        "::count::KsStipendiat::items": {
          url: urlBase + "/KsStipendiats/:id/items/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#updateOrCreate
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#update
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#destroyById
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#removeById
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItem` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiatItem#modelName
    * @propertyOf lbservices.KsStipendiatItem
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiatItem`.
    */
    R.modelName = "KsStipendiatItem";

    /**
     * @ngdoc object
     * @name lbservices.KsStipendiatItem.persons
     * @header lbservices.KsStipendiatItem.persons
     * @object
     * @description
     *
     * The object `KsStipendiatItem.persons` groups methods
     * manipulating `KsStipendiatItemPerson` instances related to `KsStipendiatItem`.
     *
     * Call {@link lbservices.KsStipendiatItem#persons KsStipendiatItem.persons()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#persons
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Queries persons of KsStipendiatItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R.persons = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::get::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#count
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Counts persons of KsStipendiatItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.persons.count = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::count::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#create
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Creates a new instance in persons of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R.persons.create = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::create::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#createMany
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Creates a new instance in persons of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R.persons.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::createMany::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#destroyAll
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Deletes all persons of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.persons.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::delete::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#destroyById
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Delete a related item by id for persons.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for persons
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.persons.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::destroyById::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#findById
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Find a related item by id for persons.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for persons
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R.persons.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::findById::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.persons#updateById
         * @methodOf lbservices.KsStipendiatItem.persons
         *
         * @description
         *
         * Update a related item by id for persons.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for persons
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R.persons.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::updateById::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbservices.KsStipendiatItem.texts
     * @header lbservices.KsStipendiatItem.texts
     * @object
     * @description
     *
     * The object `KsStipendiatItem.texts` groups methods
     * manipulating `KsStipendiatItemText` instances related to `KsStipendiatItem`.
     *
     * Call {@link lbservices.KsStipendiatItem#texts KsStipendiatItem.texts()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem#texts
         * @methodOf lbservices.KsStipendiatItem
         *
         * @description
         *
         * Queries texts of KsStipendiatItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R.texts = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::get::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#count
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Counts texts of KsStipendiatItem.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.texts.count = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::count::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#create
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Creates a new instance in texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R.texts.create = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::create::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#createMany
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Creates a new instance in texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R.texts.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::createMany::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#destroyAll
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Deletes all texts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.texts.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::delete::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#destroyById
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Delete a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.texts.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::destroyById::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#findById
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Find a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R.texts.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::findById::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItem.texts#updateById
         * @methodOf lbservices.KsStipendiatItem.texts
         *
         * @description
         *
         * Update a related item by id for texts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for texts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R.texts.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::updateById::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiatItemPerson
 * @header lbservices.KsStipendiatItemPerson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemPerson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiatItemPerson",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiatItemPeople/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use KsStipendiatItemPerson.translations.findById() instead.
        "prototype$__findById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.destroyById() instead.
        "prototype$__destroyById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.updateById() instead.
        "prototype$__updateById__translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations() instead.
        "prototype$__get__translations": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.create() instead.
        "prototype$__create__translations": {
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.destroyAll() instead.
        "prototype$__delete__translations": {
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.count() instead.
        "prototype$__count__translations": {
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#create
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiatItemPeople",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#createMany
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPeople",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#upsert
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiatItemPeople",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#exists
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiatItemPeople/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#findById
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiatItemPeople/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#find
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPeople",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#findOne
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiatItemPeople/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#updateAll
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiatItemPeople/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#deleteById
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiatItemPeople/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#count
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiatItemPeople/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiatItemPeople/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#createChangeStream
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiatItemPeople/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.persons.findById() instead.
        "::findById::KsStipendiatItem::persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.persons.destroyById() instead.
        "::destroyById::KsStipendiatItem::persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.persons.updateById() instead.
        "::updateById::KsStipendiatItem::persons": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiatItem.persons() instead.
        "::get::KsStipendiatItem::persons": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.persons.create() instead.
        "::create::KsStipendiatItem::persons": {
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.persons.createMany() instead.
        "::createMany::KsStipendiatItem::persons": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.persons.destroyAll() instead.
        "::delete::KsStipendiatItem::persons": {
          url: urlBase + "/KsStipendiatItems/:id/persons",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.persons.count() instead.
        "::count::KsStipendiatItem::persons": {
          url: urlBase + "/KsStipendiatItems/:id/persons/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#updateOrCreate
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#update
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#destroyById
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#removeById
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPerson` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiatItemPerson#modelName
    * @propertyOf lbservices.KsStipendiatItemPerson
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiatItemPerson`.
    */
    R.modelName = "KsStipendiatItemPerson";

    /**
     * @ngdoc object
     * @name lbservices.KsStipendiatItemPerson.translations
     * @header lbservices.KsStipendiatItemPerson.translations
     * @object
     * @description
     *
     * The object `KsStipendiatItemPerson.translations` groups methods
     * manipulating `KsStipendiatItemPersonTranslation` instances related to `KsStipendiatItemPerson`.
     *
     * Call {@link lbservices.KsStipendiatItemPerson#translations KsStipendiatItemPerson.translations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson#translations
         * @methodOf lbservices.KsStipendiatItemPerson
         *
         * @description
         *
         * Queries translations of KsStipendiatItemPerson.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R.translations = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::get::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#count
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Counts translations of KsStipendiatItemPerson.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::count::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#create
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::create::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#createMany
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Creates a new instance in translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::createMany::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#destroyAll
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Deletes all translations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::delete::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#destroyById
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Delete a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::destroyById::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#findById
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Find a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::findById::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPerson.translations#updateById
         * @methodOf lbservices.KsStipendiatItemPerson.translations
         *
         * @description
         *
         * Update a related item by id for translations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for translations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::updateById::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiatItemPersonTranslation
 * @header lbservices.KsStipendiatItemPersonTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemPersonTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiatItemPersonTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiatItemPersonTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#create
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiatItemPersonTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#createMany
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPersonTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#upsert
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiatItemPersonTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#exists
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#findById
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#find
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPersonTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#findOne
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#updateAll
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#deleteById
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#count
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#createChangeStream
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiatItemPersonTranslations/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.findById() instead.
        "::findById::KsStipendiatItemPerson::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.destroyById() instead.
        "::destroyById::KsStipendiatItemPerson::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.updateById() instead.
        "::updateById::KsStipendiatItemPerson::translations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations() instead.
        "::get::KsStipendiatItemPerson::translations": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.create() instead.
        "::create::KsStipendiatItemPerson::translations": {
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.createMany() instead.
        "::createMany::KsStipendiatItemPerson::translations": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.destroyAll() instead.
        "::delete::KsStipendiatItemPerson::translations": {
          url: urlBase + "/KsStipendiatItemPeople/:id/translations",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItemPerson.translations.count() instead.
        "::count::KsStipendiatItemPerson::translations": {
          url: urlBase + "/KsStipendiatItemPeople/:id/translations/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#updateOrCreate
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#update
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#destroyById
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemPersonTranslation#removeById
         * @methodOf lbservices.KsStipendiatItemPersonTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiatItemPersonTranslation#modelName
    * @propertyOf lbservices.KsStipendiatItemPersonTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiatItemPersonTranslation`.
    */
    R.modelName = "KsStipendiatItemPersonTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiatItemText
 * @header lbservices.KsStipendiatItemText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiatItemText",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiatItemTexts/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#create
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiatItemTexts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#createMany
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemTexts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#upsert
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiatItemTexts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#exists
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiatItemTexts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#findById
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiatItemTexts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#find
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemTexts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#findOne
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiatItemTexts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#updateAll
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiatItemTexts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#deleteById
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiatItemTexts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#count
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiatItemTexts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiatItemTexts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#createChangeStream
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiatItemTexts/change-stream",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.texts.findById() instead.
        "::findById::KsStipendiatItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.texts.destroyById() instead.
        "::destroyById::KsStipendiatItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.texts.updateById() instead.
        "::updateById::KsStipendiatItem::texts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use KsStipendiatItem.texts() instead.
        "::get::KsStipendiatItem::texts": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "GET"
        },

        // INTERNAL. Use KsStipendiatItem.texts.create() instead.
        "::create::KsStipendiatItem::texts": {
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.texts.createMany() instead.
        "::createMany::KsStipendiatItem::texts": {
          isArray: true,
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "POST"
        },

        // INTERNAL. Use KsStipendiatItem.texts.destroyAll() instead.
        "::delete::KsStipendiatItem::texts": {
          url: urlBase + "/KsStipendiatItems/:id/texts",
          method: "DELETE"
        },

        // INTERNAL. Use KsStipendiatItem.texts.count() instead.
        "::count::KsStipendiatItem::texts": {
          url: urlBase + "/KsStipendiatItems/:id/texts/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#updateOrCreate
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#update
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#destroyById
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemText#removeById
         * @methodOf lbservices.KsStipendiatItemText
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemText` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiatItemText#modelName
    * @propertyOf lbservices.KsStipendiatItemText
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiatItemText`.
    */
    R.modelName = "KsStipendiatItemText";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.KsStipendiatItemTextTranslation
 * @header lbservices.KsStipendiatItemTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "KsStipendiatItemTextTranslation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/KsStipendiatItemTextTranslations/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#create
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/KsStipendiatItemTextTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#createMany
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemTextTranslations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#upsert
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/KsStipendiatItemTextTranslations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#exists
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/KsStipendiatItemTextTranslations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#findById
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/KsStipendiatItemTextTranslations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#find
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/KsStipendiatItemTextTranslations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#findOne
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/KsStipendiatItemTextTranslations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#updateAll
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/KsStipendiatItemTextTranslations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#deleteById
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/KsStipendiatItemTextTranslations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#count
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/KsStipendiatItemTextTranslations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#prototype$updateAttributes
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/KsStipendiatItemTextTranslations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#createChangeStream
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/KsStipendiatItemTextTranslations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#updateOrCreate
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#update
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#destroyById
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.KsStipendiatItemTextTranslation#removeById
         * @methodOf lbservices.KsStipendiatItemTextTranslation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.KsStipendiatItemTextTranslation#modelName
    * @propertyOf lbservices.KsStipendiatItemTextTranslation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `KsStipendiatItemTextTranslation`.
    */
    R.modelName = "KsStipendiatItemTextTranslation";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.Container
 * @header lbservices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Container",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/containers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.Container#getContainers
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#createContainer
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createContainer": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#destroyContainer
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "destroyContainer": {
          url: urlBase + "/containers/:container",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#getContainer
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/containers/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#getFiles
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/containers/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#getFile
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#removeFile
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "removeFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#upload
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/containers/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.Container#download
         * @methodOf lbservices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/containers/:container/download/:file",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbservices.Container#modelName
    * @propertyOf lbservices.Container
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Container`.
    */
    R.modelName = "Container";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.AppUser
 * @header lbservices.AppUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AppUser",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/AppUsers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__findById__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AppUsers/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__destroyById__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AppUsers/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__updateById__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AppUsers/:id/accessTokens/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__get__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Queries accessTokens of AppUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/AppUsers/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__create__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/AppUsers/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__delete__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/AppUsers/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$__count__accessTokens
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Counts accessTokens of AppUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/AppUsers/:id/accessTokens/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#create
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/AppUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#createMany
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/AppUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#upsert
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/AppUsers",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#exists
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/AppUsers/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#findById
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/AppUsers/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#find
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/AppUsers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#findOne
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/AppUsers/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#updateAll
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/AppUsers/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#deleteById
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/AppUsers/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#count
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/AppUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#prototype$updateAttributes
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/AppUsers/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#createChangeStream
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/AppUsers/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#login
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/AppUsers/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#logout
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Logout a user with access token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/AppUsers/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#confirm
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Confirm a user registration with email verification token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/AppUsers/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#resetPassword
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Reset password for a user with email.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/AppUsers/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#ping
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        "ping": {
          url: urlBase + "/AppUsers/ping",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppUser#getCurrent
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/AppUsers" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.AppUser#updateOrCreate
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.AppUser#update
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.AppUser#destroyById
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.AppUser#removeById
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppUser` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.AppUser#getCachedCurrent
         * @methodOf lbservices.AppUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbservices.AppUser#login} or
         * {@link lbservices.AppUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A AppUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbservices.AppUser#isAuthenticated
         * @methodOf lbservices.AppUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbservices.AppUser#getCurrentId
         * @methodOf lbservices.AppUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbservices.AppUser#modelName
    * @propertyOf lbservices.AppUser
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AppUser`.
    */
    R.modelName = "AppUser";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbservices.AppLanguage
 * @header lbservices.AppLanguage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppLanguage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AppLanguage",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/AppLanguages/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#create
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/AppLanguages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#createMany
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/AppLanguages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#upsert
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/AppLanguages",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#exists
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/AppLanguages/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#findById
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/AppLanguages/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#find
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/AppLanguages",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#findOne
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/AppLanguages/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#updateAll
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/AppLanguages/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#deleteById
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/AppLanguages/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#count
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/AppLanguages/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#prototype$updateAttributes
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/AppLanguages/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#createChangeStream
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/AppLanguages/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#updateOrCreate
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#update
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#destroyById
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbservices.AppLanguage#removeById
         * @methodOf lbservices.AppLanguage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AppLanguage` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbservices.AppLanguage#modelName
    * @propertyOf lbservices.AppLanguage
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AppLanguage`.
    */
    R.modelName = "AppLanguage";


    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch(err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name lbservices.LoopBackResourceProvider
   * @header lbservices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbservices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbservices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbservices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbservices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbservices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbservices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);

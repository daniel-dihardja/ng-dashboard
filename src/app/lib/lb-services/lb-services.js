// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.SozialeVerantwortung
 * @header lbServices.SozialeVerantwortung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SozialeVerantwortung",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SozialeVerantwortung/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SozialeVerantwortung.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortung.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#create
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SozialeVerantwortung",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#createMany
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#upsert
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SozialeVerantwortung",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#exists
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SozialeVerantwortung/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#findById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SozialeVerantwortung/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#find
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#findOne
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SozialeVerantwortung/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#updateAll
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SozialeVerantwortung/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#deleteById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SozialeVerantwortung/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#count
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SozialeVerantwortung/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#prototype$updateAttributes
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SozialeVerantwortung/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#createChangeStream
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SozialeVerantwortung/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#getContentData
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SozialeVerantwortung/contentData",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#getZFHilftData
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "getZFHilftData": {
              url: urlBase + "/SozialeVerantwortung/zfHilftData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#updateOrCreate
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#update
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#destroyById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#removeById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SozialeVerantwortung#modelName
        * @propertyOf lbServices.SozialeVerantwortung
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SozialeVerantwortung`.
        */
        R.modelName = "SozialeVerantwortung";

    /**
     * @ngdoc object
     * @name lbServices.SozialeVerantwortung.translations
     * @header lbServices.SozialeVerantwortung.translations
     * @object
     * @description
     *
     * The object `SozialeVerantwortung.translations` groups methods
     * manipulating `SozialeVerantwortungTranslation` instances related to `SozialeVerantwortung`.
     *
     * Call {@link lbServices.SozialeVerantwortung#translations SozialeVerantwortung.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#translations
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Queries translations of SozialeVerantwortung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::get::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#count
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Counts translations of SozialeVerantwortung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::count::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#create
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::create::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#createMany
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::createMany::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#destroyAll
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::delete::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#destroyById
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::destroyById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#findById
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::findById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#updateById
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::updateById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SozialeVerantwortungTranslation
 * @header lbServices.SozialeVerantwortungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SozialeVerantwortungTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SozialeVerantwortungTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#create
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#createMany
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#upsert
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#exists
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#findById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#find
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#findOne
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SozialeVerantwortungTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#updateAll
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SozialeVerantwortungTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#deleteById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#count
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SozialeVerantwortungTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#prototype$updateAttributes
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#createChangeStream
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SozialeVerantwortungTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.findById() instead.
            "::findById::SozialeVerantwortung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyById() instead.
            "::destroyById::SozialeVerantwortung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.updateById() instead.
            "::updateById::SozialeVerantwortung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortung.translations() instead.
            "::get::SozialeVerantwortung::translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.create() instead.
            "::create::SozialeVerantwortung::translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.createMany() instead.
            "::createMany::SozialeVerantwortung::translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyAll() instead.
            "::delete::SozialeVerantwortung::translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.count() instead.
            "::count::SozialeVerantwortung::translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#updateOrCreate
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#update
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#destroyById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#removeById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SozialeVerantwortungTranslation#modelName
        * @propertyOf lbServices.SozialeVerantwortungTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SozialeVerantwortungTranslation`.
        */
        R.modelName = "SozialeVerantwortungTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojekt
 * @header lbServices.SvHilfsprojekt
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojekt` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojekt",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojekts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvHilfsprojekt.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojekt.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojekt.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojekt.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojekt.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojekt.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojekt.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/SvHilfsprojekts/:id/items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#create
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojekts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#createMany
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojekts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#upsert
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojekts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#exists
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojekts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#findById
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojekts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#find
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojekts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#findOne
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojekts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#updateAll
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojekts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#deleteById
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojekts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#count
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojekts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojekts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#createChangeStream
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojekts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.findById() instead.
            "::findById::SvZfhilft::projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyById() instead.
            "::destroyById::SvZfhilft::projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.updateById() instead.
            "::updateById::SvZfhilft::projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.projects() instead.
            "::get::SvZfhilft::projects": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.create() instead.
            "::create::SvZfhilft::projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.createMany() instead.
            "::createMany::SvZfhilft::projects": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyAll() instead.
            "::delete::SvZfhilft::projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.count() instead.
            "::count::SvZfhilft::projects": {
              url: urlBase + "/SvZfhilfts/:id/projects/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#updateOrCreate
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#update
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#destroyById
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#removeById
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojekt#modelName
        * @propertyOf lbServices.SvHilfsprojekt
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojekt`.
        */
        R.modelName = "SvHilfsprojekt";

    /**
     * @ngdoc object
     * @name lbServices.SvHilfsprojekt.items
     * @header lbServices.SvHilfsprojekt.items
     * @object
     * @description
     *
     * The object `SvHilfsprojekt.items` groups methods
     * manipulating `SvHilfsprojektItem` instances related to `SvHilfsprojekt`.
     *
     * Call {@link lbServices.SvHilfsprojekt#items SvHilfsprojekt.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt#items
             * @methodOf lbServices.SvHilfsprojekt
             *
             * @description
             *
             * Queries items of SvHilfsprojekt.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::get::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#count
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Counts items of SvHilfsprojekt.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::count::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#create
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::create::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#createMany
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::createMany::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#destroyAll
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::delete::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#destroyById
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::destroyById::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#findById
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::findById::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojekt.items#updateById
             * @methodOf lbServices.SvHilfsprojekt.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItem");
          var action = TargetResource["::updateById::SvHilfsprojekt::items"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektTranslation
 * @header lbServices.SvHilfsprojektTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#create
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#createMany
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#upsert
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#exists
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#findById
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#find
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#findOne
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#updateAll
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#deleteById
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#count
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#createChangeStream
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#update
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#destroyById
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektTranslation#removeById
             * @methodOf lbServices.SvHilfsprojektTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektTranslation#modelName
        * @propertyOf lbServices.SvHilfsprojektTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektTranslation`.
        */
        R.modelName = "SvHilfsprojektTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItem
 * @header lbServices.SvHilfsprojektItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItem",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItems/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvHilfsprojektItem.texts.findById() instead.
            "prototype$__findById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.destroyById() instead.
            "prototype$__destroyById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.updateById() instead.
            "prototype$__updateById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.findById() instead.
            "prototype$__findById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.destroyById() instead.
            "prototype$__destroyById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.updateById() instead.
            "prototype$__updateById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.findById() instead.
            "prototype$__findById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.destroyById() instead.
            "prototype$__destroyById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.updateById() instead.
            "prototype$__updateById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts() instead.
            "prototype$__get__texts": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.create() instead.
            "prototype$__create__texts": {
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.destroyAll() instead.
            "prototype$__delete__texts": {
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.count() instead.
            "prototype$__count__texts": {
              url: urlBase + "/SvHilfsprojektItems/:id/texts/count",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.images() instead.
            "prototype$__get__images": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.create() instead.
            "prototype$__create__images": {
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.destroyAll() instead.
            "prototype$__delete__images": {
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.count() instead.
            "prototype$__count__images": {
              url: urlBase + "/SvHilfsprojektItems/:id/images/count",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos() instead.
            "prototype$__get__videos": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.create() instead.
            "prototype$__create__videos": {
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.destroyAll() instead.
            "prototype$__delete__videos": {
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.count() instead.
            "prototype$__count__videos": {
              url: urlBase + "/SvHilfsprojektItems/:id/videos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#create
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#createMany
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#upsert
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItems",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#exists
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItems/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#findById
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItems/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#find
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#findOne
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItems/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#updateAll
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItems/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#deleteById
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItems/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#count
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItems/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItems/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojekt.items.findById() instead.
            "::findById::SvHilfsprojekt::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojekt.items.destroyById() instead.
            "::destroyById::SvHilfsprojekt::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojekt.items.updateById() instead.
            "::updateById::SvHilfsprojekt::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojekts/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojekt.items() instead.
            "::get::SvHilfsprojekt::items": {
              isArray: true,
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojekt.items.create() instead.
            "::create::SvHilfsprojekt::items": {
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojekt.items.createMany() instead.
            "::createMany::SvHilfsprojekt::items": {
              isArray: true,
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojekt.items.destroyAll() instead.
            "::delete::SvHilfsprojekt::items": {
              url: urlBase + "/SvHilfsprojekts/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojekt.items.count() instead.
            "::count::SvHilfsprojekt::items": {
              url: urlBase + "/SvHilfsprojekts/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#update
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#destroyById
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#removeById
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItem` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItem#modelName
        * @propertyOf lbServices.SvHilfsprojektItem
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItem`.
        */
        R.modelName = "SvHilfsprojektItem";

    /**
     * @ngdoc object
     * @name lbServices.SvHilfsprojektItem.texts
     * @header lbServices.SvHilfsprojektItem.texts
     * @object
     * @description
     *
     * The object `SvHilfsprojektItem.texts` groups methods
     * manipulating `SvHilfsprojektItemText` instances related to `SvHilfsprojektItem`.
     *
     * Call {@link lbServices.SvHilfsprojektItem#texts SvHilfsprojektItem.texts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#texts
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Queries texts of SvHilfsprojektItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R.texts = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::get::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#count
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Counts texts of SvHilfsprojektItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.texts.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::count::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#create
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Creates a new instance in texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R.texts.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::create::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#createMany
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Creates a new instance in texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R.texts.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::createMany::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#destroyAll
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Deletes all texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.texts.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::delete::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#destroyById
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Delete a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.texts.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::destroyById::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#findById
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Find a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R.texts.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::findById::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.texts#updateById
             * @methodOf lbServices.SvHilfsprojektItem.texts
             *
             * @description
             *
             * Update a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R.texts.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemText");
          var action = TargetResource["::updateById::SvHilfsprojektItem::texts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvHilfsprojektItem.images
     * @header lbServices.SvHilfsprojektItem.images
     * @object
     * @description
     *
     * The object `SvHilfsprojektItem.images` groups methods
     * manipulating `SvHilfsprojektItemImage` instances related to `SvHilfsprojektItem`.
     *
     * Call {@link lbServices.SvHilfsprojektItem#images SvHilfsprojektItem.images()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#images
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Queries images of SvHilfsprojektItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R.images = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::get::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#count
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Counts images of SvHilfsprojektItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.images.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::count::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#create
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R.images.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::create::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#createMany
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R.images.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::createMany::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#destroyAll
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Deletes all images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::delete::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#destroyById
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Delete a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::destroyById::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#findById
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Find a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R.images.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::findById::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.images#updateById
             * @methodOf lbServices.SvHilfsprojektItem.images
             *
             * @description
             *
             * Update a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R.images.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemImage");
          var action = TargetResource["::updateById::SvHilfsprojektItem::images"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvHilfsprojektItem.videos
     * @header lbServices.SvHilfsprojektItem.videos
     * @object
     * @description
     *
     * The object `SvHilfsprojektItem.videos` groups methods
     * manipulating `SvHilfsprojektItemVideo` instances related to `SvHilfsprojektItem`.
     *
     * Call {@link lbServices.SvHilfsprojektItem#videos SvHilfsprojektItem.videos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem#videos
             * @methodOf lbServices.SvHilfsprojektItem
             *
             * @description
             *
             * Queries videos of SvHilfsprojektItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R.videos = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::get::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#count
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Counts videos of SvHilfsprojektItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.videos.count = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::count::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#create
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R.videos.create = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::create::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#createMany
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::createMany::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#destroyAll
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Deletes all videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::delete::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#destroyById
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Delete a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::destroyById::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#findById
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Find a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R.videos.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::findById::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItem.videos#updateById
             * @methodOf lbServices.SvHilfsprojektItem.videos
             *
             * @description
             *
             * Update a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojektItemVideo");
          var action = TargetResource["::updateById::SvHilfsprojektItem::videos"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItemText
 * @header lbServices.SvHilfsprojektItemText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItemText",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItemTexts/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#create
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItemTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#createMany
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#upsert
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItemTexts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#exists
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItemTexts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#findById
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItemTexts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#find
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemTexts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#findOne
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItemTexts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#updateAll
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItemTexts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#deleteById
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItemTexts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#count
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItemTexts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItemTexts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItemTexts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.findById() instead.
            "::findById::SvHilfsprojektItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.destroyById() instead.
            "::destroyById::SvHilfsprojektItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.updateById() instead.
            "::updateById::SvHilfsprojektItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/texts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts() instead.
            "::get::SvHilfsprojektItem::texts": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.create() instead.
            "::create::SvHilfsprojektItem::texts": {
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.createMany() instead.
            "::createMany::SvHilfsprojektItem::texts": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.destroyAll() instead.
            "::delete::SvHilfsprojektItem::texts": {
              url: urlBase + "/SvHilfsprojektItems/:id/texts",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.texts.count() instead.
            "::count::SvHilfsprojektItem::texts": {
              url: urlBase + "/SvHilfsprojektItems/:id/texts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#update
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#destroyById
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemText#removeById
             * @methodOf lbServices.SvHilfsprojektItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemText` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItemText#modelName
        * @propertyOf lbServices.SvHilfsprojektItemText
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItemText`.
        */
        R.modelName = "SvHilfsprojektItemText";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItemTextTranslation
 * @header lbServices.SvHilfsprojektItemTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItemTextTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItemTextTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#create
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#createMany
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#upsert
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#exists
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#findById
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#find
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemTextTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#findOne
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#updateAll
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#deleteById
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#count
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItemTextTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#update
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#destroyById
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemTextTranslation#removeById
             * @methodOf lbServices.SvHilfsprojektItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemTextTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItemTextTranslation#modelName
        * @propertyOf lbServices.SvHilfsprojektItemTextTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItemTextTranslation`.
        */
        R.modelName = "SvHilfsprojektItemTextTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItemImage
 * @header lbServices.SvHilfsprojektItemImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItemImage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItemImages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#create
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItemImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#createMany
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#upsert
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItemImages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#exists
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItemImages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#findById
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItemImages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#find
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemImages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#findOne
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItemImages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#updateAll
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItemImages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#deleteById
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItemImages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#count
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItemImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItemImages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItemImages/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.findById() instead.
            "::findById::SvHilfsprojektItem::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.destroyById() instead.
            "::destroyById::SvHilfsprojektItem::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.updateById() instead.
            "::updateById::SvHilfsprojektItem::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojektItem.images() instead.
            "::get::SvHilfsprojektItem::images": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.create() instead.
            "::create::SvHilfsprojektItem::images": {
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.createMany() instead.
            "::createMany::SvHilfsprojektItem::images": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.destroyAll() instead.
            "::delete::SvHilfsprojektItem::images": {
              url: urlBase + "/SvHilfsprojektItems/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.images.count() instead.
            "::count::SvHilfsprojektItem::images": {
              url: urlBase + "/SvHilfsprojektItems/:id/images/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#update
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#destroyById
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImage#removeById
             * @methodOf lbServices.SvHilfsprojektItemImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItemImage#modelName
        * @propertyOf lbServices.SvHilfsprojektItemImage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItemImage`.
        */
        R.modelName = "SvHilfsprojektItemImage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItemImageTranslation
 * @header lbServices.SvHilfsprojektItemImageTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemImageTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItemImageTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItemImageTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#create
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#createMany
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemImageTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#upsert
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#exists
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#findById
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#find
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemImageTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#findOne
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#updateAll
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#deleteById
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#count
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItemImageTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#update
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#destroyById
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemImageTranslation#removeById
             * @methodOf lbServices.SvHilfsprojektItemImageTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemImageTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItemImageTranslation#modelName
        * @propertyOf lbServices.SvHilfsprojektItemImageTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItemImageTranslation`.
        */
        R.modelName = "SvHilfsprojektItemImageTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKunststiftung
 * @header lbServices.SvKunststiftung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKunststiftung",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKunststiftungs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvKunststiftung.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftung.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#create
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKunststiftungs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#createMany
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#upsert
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKunststiftungs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#exists
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKunststiftungs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#findById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKunststiftungs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#find
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#findOne
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKunststiftungs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#updateAll
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKunststiftungs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#deleteById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKunststiftungs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#count
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKunststiftungs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#prototype$updateAttributes
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKunststiftungs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#createChangeStream
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKunststiftungs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#getContentData
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvKunststiftungs/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#updateOrCreate
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#update
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#destroyById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#removeById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKunststiftung#modelName
        * @propertyOf lbServices.SvKunststiftung
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKunststiftung`.
        */
        R.modelName = "SvKunststiftung";

    /**
     * @ngdoc object
     * @name lbServices.SvKunststiftung.translations
     * @header lbServices.SvKunststiftung.translations
     * @object
     * @description
     *
     * The object `SvKunststiftung.translations` groups methods
     * manipulating `SvKunststiftungTranslation` instances related to `SvKunststiftung`.
     *
     * Call {@link lbServices.SvKunststiftung#translations SvKunststiftung.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#translations
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Queries translations of SvKunststiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::get::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#count
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Counts translations of SvKunststiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::count::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#create
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::create::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#createMany
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::createMany::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#destroyAll
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::delete::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#destroyById
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::destroyById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#findById
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::findById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#updateById
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::updateById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKunststiftungTranslation
 * @header lbServices.SvKunststiftungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKunststiftungTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKunststiftungTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#create
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKunststiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#createMany
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKunststiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#upsert
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKunststiftungTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#exists
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKunststiftungTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#findById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKunststiftungTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#find
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKunststiftungTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#findOne
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKunststiftungTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#updateAll
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKunststiftungTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#deleteById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKunststiftungTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#count
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKunststiftungTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKunststiftungTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#createChangeStream
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKunststiftungTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.findById() instead.
            "::findById::SvKunststiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyById() instead.
            "::destroyById::SvKunststiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.updateById() instead.
            "::updateById::SvKunststiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftung.translations() instead.
            "::get::SvKunststiftung::translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.create() instead.
            "::create::SvKunststiftung::translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.createMany() instead.
            "::createMany::SvKunststiftung::translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyAll() instead.
            "::delete::SvKunststiftung::translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.count() instead.
            "::count::SvKunststiftung::translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#updateOrCreate
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#update
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#destroyById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#removeById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKunststiftungTranslation#modelName
        * @propertyOf lbServices.SvKunststiftungTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKunststiftungTranslation`.
        */
        R.modelName = "SvKunststiftungTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStiftungTranslation
 * @header lbServices.KsStiftungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStiftungTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStiftungTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#create
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#createMany
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#upsert
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStiftungTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#exists
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStiftungTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#findById
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStiftungTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#find
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStiftungTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#findOne
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStiftungTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#updateAll
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStiftungTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#deleteById
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStiftungTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#count
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStiftungTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStiftungTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#createChangeStream
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStiftungTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.translations.findById() instead.
            "::findById::KsStiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.translations.destroyById() instead.
            "::destroyById::KsStiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.translations.updateById() instead.
            "::updateById::KsStiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStiftung.translations() instead.
            "::get::KsStiftung::translations": {
              isArray: true,
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.translations.create() instead.
            "::create::KsStiftung::translations": {
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.translations.createMany() instead.
            "::createMany::KsStiftung::translations": {
              isArray: true,
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.translations.destroyAll() instead.
            "::delete::KsStiftung::translations": {
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.translations.count() instead.
            "::count::KsStiftung::translations": {
              url: urlBase + "/KsStiftungs/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#updateOrCreate
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#update
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#destroyById
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungTranslation#removeById
             * @methodOf lbServices.KsStiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStiftungTranslation#modelName
        * @propertyOf lbServices.KsStiftungTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStiftungTranslation`.
        */
        R.modelName = "KsStiftungTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStiftungVideoTranslation
 * @header lbServices.KsStiftungVideoTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftungVideoTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStiftungVideoTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStiftungVideoTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#create
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStiftungVideoTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#createMany
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStiftungVideoTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#upsert
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStiftungVideoTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#exists
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStiftungVideoTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#findById
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStiftungVideoTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#find
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStiftungVideoTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#findOne
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStiftungVideoTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#updateAll
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStiftungVideoTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#deleteById
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStiftungVideoTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#count
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStiftungVideoTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStiftungVideoTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#createChangeStream
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStiftungVideoTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#updateOrCreate
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#update
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#destroyById
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideoTranslation#removeById
             * @methodOf lbServices.KsStiftungVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideoTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStiftungVideoTranslation#modelName
        * @propertyOf lbServices.KsStiftungVideoTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStiftungVideoTranslation`.
        */
        R.modelName = "KsStiftungVideoTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStiftung
 * @header lbServices.KsStiftung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStiftung",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStiftungs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsStiftung.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStiftung.videos.findById() instead.
            "prototype$__findById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.videos.destroyById() instead.
            "prototype$__destroyById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.videos.updateById() instead.
            "prototype$__updateById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStiftung.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/KsStiftungs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/KsStiftungs/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.videos() instead.
            "prototype$__get__videos": {
              isArray: true,
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.videos.create() instead.
            "prototype$__create__videos": {
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.videos.destroyAll() instead.
            "prototype$__delete__videos": {
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.videos.count() instead.
            "prototype$__count__videos": {
              url: urlBase + "/KsStiftungs/:id/videos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#create
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStiftungs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#createMany
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStiftungs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#upsert
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStiftungs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#exists
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStiftungs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#findById
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStiftungs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#find
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStiftungs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#findOne
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStiftungs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#updateAll
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStiftungs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#deleteById
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStiftungs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#count
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStiftungs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#prototype$updateAttributes
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStiftungs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#createChangeStream
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStiftungs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#getContentData
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/KsStiftungs/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#updateOrCreate
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#update
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#destroyById
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#removeById
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftung` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStiftung#modelName
        * @propertyOf lbServices.KsStiftung
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStiftung`.
        */
        R.modelName = "KsStiftung";

    /**
     * @ngdoc object
     * @name lbServices.KsStiftung.translations
     * @header lbServices.KsStiftung.translations
     * @object
     * @description
     *
     * The object `KsStiftung.translations` groups methods
     * manipulating `KsStiftungTranslation` instances related to `KsStiftung`.
     *
     * Call {@link lbServices.KsStiftung#translations KsStiftung.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#translations
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Queries translations of KsStiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::get::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#count
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Counts translations of KsStiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::count::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#create
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::create::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#createMany
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::createMany::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#destroyAll
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::delete::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#destroyById
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::destroyById::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#findById
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::findById::KsStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.translations#updateById
             * @methodOf lbServices.KsStiftung.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsStiftungTranslation");
          var action = TargetResource["::updateById::KsStiftung::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsStiftung.videos
     * @header lbServices.KsStiftung.videos
     * @object
     * @description
     *
     * The object `KsStiftung.videos` groups methods
     * manipulating `KsStiftungVideo` instances related to `KsStiftung`.
     *
     * Call {@link lbServices.KsStiftung#videos KsStiftung.videos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStiftung#videos
             * @methodOf lbServices.KsStiftung
             *
             * @description
             *
             * Queries videos of KsStiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R.videos = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::get::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#count
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Counts videos of KsStiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.videos.count = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::count::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#create
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R.videos.create = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::create::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#createMany
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::createMany::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#destroyAll
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Deletes all videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::delete::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#destroyById
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Delete a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::destroyById::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#findById
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Find a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R.videos.findById = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::findById::KsStiftung::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStiftung.videos#updateById
             * @methodOf lbServices.KsStiftung.videos
             *
             * @description
             *
             * Update a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("KsStiftungVideo");
          var action = TargetResource["::updateById::KsStiftung::videos"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKultur
 * @header lbServices.KsKultur
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKultur` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKultur",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsKultur.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKultur.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKultur.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/KsKulturs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/KsKulturs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/KsKulturs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/KsKulturs/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/KsKulturs/:id/items",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/KsKulturs/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/KsKulturs/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/KsKulturs/:id/items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#create
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#createMany
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#upsert
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#exists
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#findById
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#find
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#findOne
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#updateAll
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#deleteById
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#count
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#prototype$updateAttributes
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#createChangeStream
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#getContentData
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/KsKulturs/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKultur#updateOrCreate
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#update
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#destroyById
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKultur#removeById
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKultur` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKultur#modelName
        * @propertyOf lbServices.KsKultur
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKultur`.
        */
        R.modelName = "KsKultur";

    /**
     * @ngdoc object
     * @name lbServices.KsKultur.translations
     * @header lbServices.KsKultur.translations
     * @object
     * @description
     *
     * The object `KsKultur.translations` groups methods
     * manipulating `KsKulturTranslation` instances related to `KsKultur`.
     *
     * Call {@link lbServices.KsKultur#translations KsKultur.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsKultur#translations
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Queries translations of KsKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::get::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#count
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Counts translations of KsKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::count::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#create
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::create::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#createMany
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::createMany::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#destroyAll
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::delete::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#destroyById
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::destroyById::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#findById
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::findById::KsKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.translations#updateById
             * @methodOf lbServices.KsKultur.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsKulturTranslation");
          var action = TargetResource["::updateById::KsKultur::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsKultur.items
     * @header lbServices.KsKultur.items
     * @object
     * @description
     *
     * The object `KsKultur.items` groups methods
     * manipulating `KsKulturItem` instances related to `KsKultur`.
     *
     * Call {@link lbServices.KsKultur#items KsKultur.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsKultur#items
             * @methodOf lbServices.KsKultur
             *
             * @description
             *
             * Queries items of KsKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::get::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#count
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Counts items of KsKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::count::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#create
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::create::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#createMany
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::createMany::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#destroyAll
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::delete::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#destroyById
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::destroyById::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#findById
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::findById::KsKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKultur.items#updateById
             * @methodOf lbServices.KsKultur.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("KsKulturItem");
          var action = TargetResource["::updateById::KsKultur::items"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKulturTranslation
 * @header lbServices.KsKulturTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKulturTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#create
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#createMany
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#upsert
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#exists
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#findById
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#find
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#findOne
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#updateAll
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#deleteById
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#count
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#createChangeStream
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.translations.findById() instead.
            "::findById::KsKultur::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.translations.destroyById() instead.
            "::destroyById::KsKultur::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.translations.updateById() instead.
            "::updateById::KsKultur::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKultur.translations() instead.
            "::get::KsKultur::translations": {
              isArray: true,
              url: urlBase + "/KsKulturs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.translations.create() instead.
            "::create::KsKultur::translations": {
              url: urlBase + "/KsKulturs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.translations.createMany() instead.
            "::createMany::KsKultur::translations": {
              isArray: true,
              url: urlBase + "/KsKulturs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.translations.destroyAll() instead.
            "::delete::KsKultur::translations": {
              url: urlBase + "/KsKulturs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.translations.count() instead.
            "::count::KsKultur::translations": {
              url: urlBase + "/KsKulturs/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#updateOrCreate
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#update
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#destroyById
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturTranslation#removeById
             * @methodOf lbServices.KsKulturTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKulturTranslation#modelName
        * @propertyOf lbServices.KsKulturTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKulturTranslation`.
        */
        R.modelName = "KsKulturTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKulturItem
 * @header lbServices.KsKulturItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKulturItem",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturItems/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsKulturItem.images.findById() instead.
            "prototype$__findById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.images.destroyById() instead.
            "prototype$__destroyById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.images.updateById() instead.
            "prototype$__updateById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKulturItem.videos.findById() instead.
            "prototype$__findById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.videos.destroyById() instead.
            "prototype$__destroyById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.videos.updateById() instead.
            "prototype$__updateById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKulturItem.images() instead.
            "prototype$__get__images": {
              isArray: true,
              url: urlBase + "/KsKulturItems/:id/images",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.images.create() instead.
            "prototype$__create__images": {
              url: urlBase + "/KsKulturItems/:id/images",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.images.destroyAll() instead.
            "prototype$__delete__images": {
              url: urlBase + "/KsKulturItems/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.images.count() instead.
            "prototype$__count__images": {
              url: urlBase + "/KsKulturItems/:id/images/count",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.videos() instead.
            "prototype$__get__videos": {
              isArray: true,
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.videos.create() instead.
            "prototype$__create__videos": {
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.videos.destroyAll() instead.
            "prototype$__delete__videos": {
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.videos.count() instead.
            "prototype$__count__videos": {
              url: urlBase + "/KsKulturItems/:id/videos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#create
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#createMany
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#upsert
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturItems",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#exists
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturItems/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#findById
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturItems/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#find
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturItems",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#findOne
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturItems/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#updateAll
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturItems/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#deleteById
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturItems/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#count
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#prototype$updateAttributes
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturItems/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#createChangeStream
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturItems/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.items.findById() instead.
            "::findById::KsKultur::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.items.destroyById() instead.
            "::destroyById::KsKultur::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.items.updateById() instead.
            "::updateById::KsKultur::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturs/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKultur.items() instead.
            "::get::KsKultur::items": {
              isArray: true,
              url: urlBase + "/KsKulturs/:id/items",
              method: "GET",
            },

            // INTERNAL. Use KsKultur.items.create() instead.
            "::create::KsKultur::items": {
              url: urlBase + "/KsKulturs/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.items.createMany() instead.
            "::createMany::KsKultur::items": {
              isArray: true,
              url: urlBase + "/KsKulturs/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsKultur.items.destroyAll() instead.
            "::delete::KsKultur::items": {
              url: urlBase + "/KsKulturs/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use KsKultur.items.count() instead.
            "::count::KsKultur::items": {
              url: urlBase + "/KsKulturs/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#updateOrCreate
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#update
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#destroyById
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#removeById
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItem` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKulturItem#modelName
        * @propertyOf lbServices.KsKulturItem
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKulturItem`.
        */
        R.modelName = "KsKulturItem";

    /**
     * @ngdoc object
     * @name lbServices.KsKulturItem.images
     * @header lbServices.KsKulturItem.images
     * @object
     * @description
     *
     * The object `KsKulturItem.images` groups methods
     * manipulating `KsKulturItemImage` instances related to `KsKulturItem`.
     *
     * Call {@link lbServices.KsKulturItem#images KsKulturItem.images()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#images
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Queries images of KsKulturItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R.images = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::get::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#count
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Counts images of KsKulturItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.images.count = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::count::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#create
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R.images.create = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::create::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#createMany
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R.images.createMany = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::createMany::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#destroyAll
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Deletes all images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::delete::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#destroyById
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Delete a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::destroyById::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#findById
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Find a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R.images.findById = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::findById::KsKulturItem::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.images#updateById
             * @methodOf lbServices.KsKulturItem.images
             *
             * @description
             *
             * Update a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R.images.updateById = function() {
          var TargetResource = $injector.get("KsKulturItemImage");
          var action = TargetResource["::updateById::KsKulturItem::images"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsKulturItem.videos
     * @header lbServices.KsKulturItem.videos
     * @object
     * @description
     *
     * The object `KsKulturItem.videos` groups methods
     * manipulating `KsKulturItemVideo` instances related to `KsKulturItem`.
     *
     * Call {@link lbServices.KsKulturItem#videos KsKulturItem.videos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem#videos
             * @methodOf lbServices.KsKulturItem
             *
             * @description
             *
             * Queries videos of KsKulturItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R.videos = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::get::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#count
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Counts videos of KsKulturItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.videos.count = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::count::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#create
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R.videos.create = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::create::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#createMany
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::createMany::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#destroyAll
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Deletes all videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::delete::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#destroyById
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Delete a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::destroyById::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#findById
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Find a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R.videos.findById = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::findById::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItem.videos#updateById
             * @methodOf lbServices.KsKulturItem.videos
             *
             * @description
             *
             * Update a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("KsKulturItemVideo");
          var action = TargetResource["::updateById::KsKulturItem::videos"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKulturItemImage
 * @header lbServices.KsKulturItemImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKulturItemImage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturItemImages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#create
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturItemImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#createMany
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturItemImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#upsert
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturItemImages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#exists
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturItemImages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#findById
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturItemImages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#find
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturItemImages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#findOne
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturItemImages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#updateAll
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturItemImages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#deleteById
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturItemImages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#count
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturItemImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#prototype$updateAttributes
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturItemImages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#createChangeStream
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturItemImages/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.images.findById() instead.
            "::findById::KsKulturItem::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.images.destroyById() instead.
            "::destroyById::KsKulturItem::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.images.updateById() instead.
            "::updateById::KsKulturItem::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKulturItem.images() instead.
            "::get::KsKulturItem::images": {
              isArray: true,
              url: urlBase + "/KsKulturItems/:id/images",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.images.create() instead.
            "::create::KsKulturItem::images": {
              url: urlBase + "/KsKulturItems/:id/images",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.images.createMany() instead.
            "::createMany::KsKulturItem::images": {
              isArray: true,
              url: urlBase + "/KsKulturItems/:id/images",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.images.destroyAll() instead.
            "::delete::KsKulturItem::images": {
              url: urlBase + "/KsKulturItems/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.images.count() instead.
            "::count::KsKulturItem::images": {
              url: urlBase + "/KsKulturItems/:id/images/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#updateOrCreate
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#update
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#destroyById
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImage#removeById
             * @methodOf lbServices.KsKulturItemImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKulturItemImage#modelName
        * @propertyOf lbServices.KsKulturItemImage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKulturItemImage`.
        */
        R.modelName = "KsKulturItemImage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKulturItemImageTranslation
 * @header lbServices.KsKulturItemImageTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemImageTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKulturItemImageTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturItemImageTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#create
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturItemImageTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#createMany
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturItemImageTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#upsert
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturItemImageTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#exists
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturItemImageTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#findById
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturItemImageTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#find
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturItemImageTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#findOne
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturItemImageTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#updateAll
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturItemImageTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#deleteById
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturItemImageTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#count
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturItemImageTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturItemImageTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#createChangeStream
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturItemImageTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#updateOrCreate
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#update
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#destroyById
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemImageTranslation#removeById
             * @methodOf lbServices.KsKulturItemImageTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemImageTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKulturItemImageTranslation#modelName
        * @propertyOf lbServices.KsKulturItemImageTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKulturItemImageTranslation`.
        */
        R.modelName = "KsKulturItemImageTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKulturItemVideo
 * @header lbServices.KsKulturItemVideo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemVideo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKulturItemVideo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturItemVideos/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#create
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturItemVideos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#createMany
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturItemVideos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#upsert
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturItemVideos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#exists
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturItemVideos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#findById
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturItemVideos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#find
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturItemVideos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#findOne
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturItemVideos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#updateAll
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturItemVideos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#deleteById
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturItemVideos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#count
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturItemVideos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#prototype$updateAttributes
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturItemVideos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#createChangeStream
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturItemVideos/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.videos.findById() instead.
            "::findById::KsKulturItem::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.videos.destroyById() instead.
            "::destroyById::KsKulturItem::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.videos.updateById() instead.
            "::updateById::KsKulturItem::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsKulturItems/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsKulturItem.videos() instead.
            "::get::KsKulturItem::videos": {
              isArray: true,
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use KsKulturItem.videos.create() instead.
            "::create::KsKulturItem::videos": {
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.videos.createMany() instead.
            "::createMany::KsKulturItem::videos": {
              isArray: true,
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use KsKulturItem.videos.destroyAll() instead.
            "::delete::KsKulturItem::videos": {
              url: urlBase + "/KsKulturItems/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use KsKulturItem.videos.count() instead.
            "::count::KsKulturItem::videos": {
              url: urlBase + "/KsKulturItems/:id/videos/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#updateOrCreate
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#update
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#destroyById
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideo#removeById
             * @methodOf lbServices.KsKulturItemVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKulturItemVideo#modelName
        * @propertyOf lbServices.KsKulturItemVideo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKulturItemVideo`.
        */
        R.modelName = "KsKulturItemVideo";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsKulturItemVideoTranslation
 * @header lbServices.KsKulturItemVideoTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsKulturItemVideoTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsKulturItemVideoTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsKulturItemVideoTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#create
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsKulturItemVideoTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#createMany
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsKulturItemVideoTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#upsert
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsKulturItemVideoTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#exists
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsKulturItemVideoTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#findById
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsKulturItemVideoTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#find
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsKulturItemVideoTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#findOne
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsKulturItemVideoTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#updateAll
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsKulturItemVideoTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#deleteById
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsKulturItemVideoTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#count
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsKulturItemVideoTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsKulturItemVideoTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#createChangeStream
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsKulturItemVideoTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#updateOrCreate
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#update
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#destroyById
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsKulturItemVideoTranslation#removeById
             * @methodOf lbServices.KsKulturItemVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsKulturItemVideoTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsKulturItemVideoTranslation#modelName
        * @propertyOf lbServices.KsKulturItemVideoTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsKulturItemVideoTranslation`.
        */
        R.modelName = "KsKulturItemVideoTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreis
 * @header lbServices.KsMusikpreis
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreis` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreis",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreis/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsMusikpreis.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreis.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreis.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/KsMusikpreis/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/KsMusikpreis/:id/items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#create
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreis",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#createMany
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreis",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#upsert
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreis",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#exists
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreis/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#findById
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreis/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#find
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreis",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#findOne
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreis/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#updateAll
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreis/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#deleteById
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreis/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#count
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreis/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreis/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#createChangeStream
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreis/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#getContentData
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/KsMusikpreis/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#updateOrCreate
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#update
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#destroyById
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#removeById
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreis` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreis#modelName
        * @propertyOf lbServices.KsMusikpreis
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreis`.
        */
        R.modelName = "KsMusikpreis";

    /**
     * @ngdoc object
     * @name lbServices.KsMusikpreis.translations
     * @header lbServices.KsMusikpreis.translations
     * @object
     * @description
     *
     * The object `KsMusikpreis.translations` groups methods
     * manipulating `KsMusikpreisTranslation` instances related to `KsMusikpreis`.
     *
     * Call {@link lbServices.KsMusikpreis#translations KsMusikpreis.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#translations
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Queries translations of KsMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::get::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#count
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Counts translations of KsMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::count::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#create
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::create::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#createMany
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::createMany::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#destroyAll
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::delete::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#destroyById
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::destroyById::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#findById
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::findById::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.translations#updateById
             * @methodOf lbServices.KsMusikpreis.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisTranslation");
          var action = TargetResource["::updateById::KsMusikpreis::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsMusikpreis.items
     * @header lbServices.KsMusikpreis.items
     * @object
     * @description
     *
     * The object `KsMusikpreis.items` groups methods
     * manipulating `KsMusikpreisItem` instances related to `KsMusikpreis`.
     *
     * Call {@link lbServices.KsMusikpreis#items KsMusikpreis.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis#items
             * @methodOf lbServices.KsMusikpreis
             *
             * @description
             *
             * Queries items of KsMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::get::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#count
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Counts items of KsMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::count::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#create
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::create::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#createMany
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::createMany::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#destroyAll
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::delete::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#destroyById
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::destroyById::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#findById
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::findById::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreis.items#updateById
             * @methodOf lbServices.KsMusikpreis.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisItem");
          var action = TargetResource["::updateById::KsMusikpreis::items"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreisTranslation
 * @header lbServices.KsMusikpreisTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreisTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreisTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#create
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreisTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#createMany
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreisTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#upsert
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreisTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#exists
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreisTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#findById
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreisTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#find
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreisTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#findOne
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreisTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#updateAll
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreisTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#deleteById
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreisTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#count
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreisTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreisTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#createChangeStream
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreisTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.translations.findById() instead.
            "::findById::KsMusikpreis::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.translations.destroyById() instead.
            "::destroyById::KsMusikpreis::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.translations.updateById() instead.
            "::updateById::KsMusikpreis::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreis.translations() instead.
            "::get::KsMusikpreis::translations": {
              isArray: true,
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.translations.create() instead.
            "::create::KsMusikpreis::translations": {
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.translations.createMany() instead.
            "::createMany::KsMusikpreis::translations": {
              isArray: true,
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.translations.destroyAll() instead.
            "::delete::KsMusikpreis::translations": {
              url: urlBase + "/KsMusikpreis/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.translations.count() instead.
            "::count::KsMusikpreis::translations": {
              url: urlBase + "/KsMusikpreis/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#updateOrCreate
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#update
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#destroyById
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisTranslation#removeById
             * @methodOf lbServices.KsMusikpreisTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreisTranslation#modelName
        * @propertyOf lbServices.KsMusikpreisTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreisTranslation`.
        */
        R.modelName = "KsMusikpreisTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreisItem
 * @header lbServices.KsMusikpreisItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreisItem",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreisItems/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsMusikpreisItem.texts.findById() instead.
            "prototype$__findById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.destroyById() instead.
            "prototype$__destroyById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.updateById() instead.
            "prototype$__updateById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.findById() instead.
            "prototype$__findById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.destroyById() instead.
            "prototype$__destroyById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.updateById() instead.
            "prototype$__updateById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreisItem.texts() instead.
            "prototype$__get__texts": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.create() instead.
            "prototype$__create__texts": {
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.destroyAll() instead.
            "prototype$__delete__texts": {
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.count() instead.
            "prototype$__count__texts": {
              url: urlBase + "/KsMusikpreisItems/:id/texts/count",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.persons() instead.
            "prototype$__get__persons": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.create() instead.
            "prototype$__create__persons": {
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.destroyAll() instead.
            "prototype$__delete__persons": {
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.count() instead.
            "prototype$__count__persons": {
              url: urlBase + "/KsMusikpreisItems/:id/persons/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#create
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreisItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#createMany
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#upsert
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreisItems",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#exists
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreisItems/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#findById
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreisItems/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#find
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#findOne
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreisItems/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#updateAll
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreisItems/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#deleteById
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreisItems/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#count
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreisItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreisItems/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#createChangeStream
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreisItems/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.items.findById() instead.
            "::findById::KsMusikpreis::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.items.destroyById() instead.
            "::destroyById::KsMusikpreis::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.items.updateById() instead.
            "::updateById::KsMusikpreis::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreis/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreis.items() instead.
            "::get::KsMusikpreis::items": {
              isArray: true,
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreis.items.create() instead.
            "::create::KsMusikpreis::items": {
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.items.createMany() instead.
            "::createMany::KsMusikpreis::items": {
              isArray: true,
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreis.items.destroyAll() instead.
            "::delete::KsMusikpreis::items": {
              url: urlBase + "/KsMusikpreis/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreis.items.count() instead.
            "::count::KsMusikpreis::items": {
              url: urlBase + "/KsMusikpreis/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#updateOrCreate
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#update
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#destroyById
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#removeById
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItem` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreisItem#modelName
        * @propertyOf lbServices.KsMusikpreisItem
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreisItem`.
        */
        R.modelName = "KsMusikpreisItem";

    /**
     * @ngdoc object
     * @name lbServices.KsMusikpreisItem.texts
     * @header lbServices.KsMusikpreisItem.texts
     * @object
     * @description
     *
     * The object `KsMusikpreisItem.texts` groups methods
     * manipulating `KsMusikpreisItemText` instances related to `KsMusikpreisItem`.
     *
     * Call {@link lbServices.KsMusikpreisItem#texts KsMusikpreisItem.texts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#texts
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Queries texts of KsMusikpreisItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R.texts = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::get::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#count
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Counts texts of KsMusikpreisItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.texts.count = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::count::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#create
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Creates a new instance in texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R.texts.create = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::create::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#createMany
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Creates a new instance in texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R.texts.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::createMany::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#destroyAll
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Deletes all texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.texts.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::delete::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#destroyById
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Delete a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.texts.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::destroyById::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#findById
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Find a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R.texts.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::findById::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.texts#updateById
             * @methodOf lbServices.KsMusikpreisItem.texts
             *
             * @description
             *
             * Update a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R.texts.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemText");
          var action = TargetResource["::updateById::KsMusikpreisItem::texts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsMusikpreisItem.persons
     * @header lbServices.KsMusikpreisItem.persons
     * @object
     * @description
     *
     * The object `KsMusikpreisItem.persons` groups methods
     * manipulating `KsMusikpreisItemPerson` instances related to `KsMusikpreisItem`.
     *
     * Call {@link lbServices.KsMusikpreisItem#persons KsMusikpreisItem.persons()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem#persons
             * @methodOf lbServices.KsMusikpreisItem
             *
             * @description
             *
             * Queries persons of KsMusikpreisItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R.persons = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::get::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#count
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Counts persons of KsMusikpreisItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.persons.count = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::count::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#create
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Creates a new instance in persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R.persons.create = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::create::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#createMany
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Creates a new instance in persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R.persons.createMany = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::createMany::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#destroyAll
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Deletes all persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.persons.destroyAll = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::delete::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#destroyById
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Delete a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.persons.destroyById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::destroyById::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#findById
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Find a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R.persons.findById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::findById::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItem.persons#updateById
             * @methodOf lbServices.KsMusikpreisItem.persons
             *
             * @description
             *
             * Update a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R.persons.updateById = function() {
          var TargetResource = $injector.get("KsMusikpreisItemPerson");
          var action = TargetResource["::updateById::KsMusikpreisItem::persons"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreisItemText
 * @header lbServices.KsMusikpreisItemText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreisItemText",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreisItemTexts/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#create
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreisItemTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#createMany
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#upsert
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreisItemTexts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#exists
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreisItemTexts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#findById
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreisItemTexts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#find
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemTexts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#findOne
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreisItemTexts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#updateAll
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreisItemTexts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#deleteById
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreisItemTexts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#count
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreisItemTexts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreisItemTexts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#createChangeStream
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreisItemTexts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.findById() instead.
            "::findById::KsMusikpreisItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.destroyById() instead.
            "::destroyById::KsMusikpreisItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.updateById() instead.
            "::updateById::KsMusikpreisItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/texts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreisItem.texts() instead.
            "::get::KsMusikpreisItem::texts": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.create() instead.
            "::create::KsMusikpreisItem::texts": {
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.createMany() instead.
            "::createMany::KsMusikpreisItem::texts": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.destroyAll() instead.
            "::delete::KsMusikpreisItem::texts": {
              url: urlBase + "/KsMusikpreisItems/:id/texts",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.texts.count() instead.
            "::count::KsMusikpreisItem::texts": {
              url: urlBase + "/KsMusikpreisItems/:id/texts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#updateOrCreate
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#update
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#destroyById
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemText#removeById
             * @methodOf lbServices.KsMusikpreisItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemText` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreisItemText#modelName
        * @propertyOf lbServices.KsMusikpreisItemText
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreisItemText`.
        */
        R.modelName = "KsMusikpreisItemText";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreisItemTextTranslation
 * @header lbServices.KsMusikpreisItemTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreisItemTextTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreisItemTextTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#create
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreisItemTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#createMany
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#upsert
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreisItemTextTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#exists
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#findById
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#find
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemTextTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#findOne
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#updateAll
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#deleteById
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#count
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#createChangeStream
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreisItemTextTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#updateOrCreate
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#update
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#destroyById
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemTextTranslation#removeById
             * @methodOf lbServices.KsMusikpreisItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemTextTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreisItemTextTranslation#modelName
        * @propertyOf lbServices.KsMusikpreisItemTextTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreisItemTextTranslation`.
        */
        R.modelName = "KsMusikpreisItemTextTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreisItemPerson
 * @header lbServices.KsMusikpreisItemPerson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemPerson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreisItemPerson",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreisItemPeople/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#create
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreisItemPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#createMany
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#upsert
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreisItemPeople",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#exists
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreisItemPeople/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#findById
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreisItemPeople/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#find
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemPeople",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#findOne
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreisItemPeople/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#updateAll
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreisItemPeople/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#deleteById
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreisItemPeople/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#count
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreisItemPeople/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreisItemPeople/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#createChangeStream
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreisItemPeople/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.findById() instead.
            "::findById::KsMusikpreisItem::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.destroyById() instead.
            "::destroyById::KsMusikpreisItem::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.updateById() instead.
            "::updateById::KsMusikpreisItem::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsMusikpreisItems/:id/persons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsMusikpreisItem.persons() instead.
            "::get::KsMusikpreisItem::persons": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "GET",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.create() instead.
            "::create::KsMusikpreisItem::persons": {
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.createMany() instead.
            "::createMany::KsMusikpreisItem::persons": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.destroyAll() instead.
            "::delete::KsMusikpreisItem::persons": {
              url: urlBase + "/KsMusikpreisItems/:id/persons",
              method: "DELETE",
            },

            // INTERNAL. Use KsMusikpreisItem.persons.count() instead.
            "::count::KsMusikpreisItem::persons": {
              url: urlBase + "/KsMusikpreisItems/:id/persons/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#updateOrCreate
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#update
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#destroyById
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPerson#removeById
             * @methodOf lbServices.KsMusikpreisItemPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPerson` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreisItemPerson#modelName
        * @propertyOf lbServices.KsMusikpreisItemPerson
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreisItemPerson`.
        */
        R.modelName = "KsMusikpreisItemPerson";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsMusikpreisItemPersonTranslation
 * @header lbServices.KsMusikpreisItemPersonTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsMusikpreisItemPersonTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsMusikpreisItemPersonTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsMusikpreisItemPersonTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#create
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#createMany
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemPersonTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#upsert
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#exists
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#findById
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#find
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsMusikpreisItemPersonTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#findOne
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#updateAll
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#deleteById
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#count
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#createChangeStream
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsMusikpreisItemPersonTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#updateOrCreate
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#update
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#destroyById
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsMusikpreisItemPersonTranslation#removeById
             * @methodOf lbServices.KsMusikpreisItemPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsMusikpreisItemPersonTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsMusikpreisItemPersonTranslation#modelName
        * @propertyOf lbServices.KsMusikpreisItemPersonTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsMusikpreisItemPersonTranslation`.
        */
        R.modelName = "KsMusikpreisItemPersonTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItemVideo
 * @header lbServices.SvHilfsprojektItemVideo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemVideo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItemVideo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItemVideos/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#create
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItemVideos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#createMany
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemVideos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#upsert
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItemVideos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#exists
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItemVideos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#findById
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItemVideos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#find
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemVideos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#findOne
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItemVideos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#updateAll
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItemVideos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#deleteById
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItemVideos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#count
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItemVideos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItemVideos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItemVideos/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.findById() instead.
            "::findById::SvHilfsprojektItem::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.destroyById() instead.
            "::destroyById::SvHilfsprojektItem::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.updateById() instead.
            "::updateById::SvHilfsprojektItem::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvHilfsprojektItems/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos() instead.
            "::get::SvHilfsprojektItem::videos": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.create() instead.
            "::create::SvHilfsprojektItem::videos": {
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.createMany() instead.
            "::createMany::SvHilfsprojektItem::videos": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.destroyAll() instead.
            "::delete::SvHilfsprojektItem::videos": {
              url: urlBase + "/SvHilfsprojektItems/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use SvHilfsprojektItem.videos.count() instead.
            "::count::SvHilfsprojektItem::videos": {
              url: urlBase + "/SvHilfsprojektItems/:id/videos/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#update
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#destroyById
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideo#removeById
             * @methodOf lbServices.SvHilfsprojektItemVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItemVideo#modelName
        * @propertyOf lbServices.SvHilfsprojektItemVideo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItemVideo`.
        */
        R.modelName = "SvHilfsprojektItemVideo";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvHilfsprojektItemVideoTranslation
 * @header lbServices.SvHilfsprojektItemVideoTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvHilfsprojektItemVideoTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvHilfsprojektItemVideoTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#create
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#createMany
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemVideoTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#upsert
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#exists
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#findById
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#find
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvHilfsprojektItemVideoTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#findOne
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#updateAll
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#deleteById
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#count
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#createChangeStream
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvHilfsprojektItemVideoTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#updateOrCreate
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#update
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#destroyById
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvHilfsprojektItemVideoTranslation#removeById
             * @methodOf lbServices.SvHilfsprojektItemVideoTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojektItemVideoTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvHilfsprojektItemVideoTranslation#modelName
        * @propertyOf lbServices.SvHilfsprojektItemVideoTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvHilfsprojektItemVideoTranslation`.
        */
        R.modelName = "SvHilfsprojektItemVideoTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftTranslation
 * @header lbServices.SvZfhilftTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#create
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#createMany
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#upsert
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#exists
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#findById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#find
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#findOne
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#updateAll
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#deleteById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#count
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#createChangeStream
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.findById() instead.
            "::findById::SvZfhilft::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyById() instead.
            "::destroyById::SvZfhilft::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.updateById() instead.
            "::updateById::SvZfhilft::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.translations() instead.
            "::get::SvZfhilft::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.create() instead.
            "::create::SvZfhilft::translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.createMany() instead.
            "::createMany::SvZfhilft::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyAll() instead.
            "::delete::SvZfhilft::translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.count() instead.
            "::count::SvZfhilft::translations": {
              url: urlBase + "/SvZfhilfts/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#updateOrCreate
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#update
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#destroyById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#removeById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftTranslation#modelName
        * @propertyOf lbServices.SvZfhilftTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftTranslation`.
        */
        R.modelName = "SvZfhilftTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilft
 * @header lbServices.SvZfhilft
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilft` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilft",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilfts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvZfhilft.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.projects.findById() instead.
            "prototype$__findById__projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyById() instead.
            "prototype$__destroyById__projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.updateById() instead.
            "prototype$__updateById__projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.images.findById() instead.
            "prototype$__findById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.images.destroyById() instead.
            "prototype$__destroyById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.images.updateById() instead.
            "prototype$__updateById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvZfhilfts/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects() instead.
            "prototype$__get__projects": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.create() instead.
            "prototype$__create__projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyAll() instead.
            "prototype$__delete__projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.count() instead.
            "prototype$__count__projects": {
              url: urlBase + "/SvZfhilfts/:id/projects/count",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.images() instead.
            "prototype$__get__images": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.images.create() instead.
            "prototype$__create__images": {
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.images.destroyAll() instead.
            "prototype$__delete__images": {
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.images.count() instead.
            "prototype$__count__images": {
              url: urlBase + "/SvZfhilfts/:id/images/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#create
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilfts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#createMany
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilfts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#upsert
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilfts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#exists
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilfts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#findById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilfts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#find
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilfts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#findOne
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilfts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#updateAll
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilfts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#deleteById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilfts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#count
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilfts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilfts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#createChangeStream
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilfts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#getContentData
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvZfhilfts/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#updateOrCreate
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#update
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#destroyById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#removeById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilft#modelName
        * @propertyOf lbServices.SvZfhilft
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilft`.
        */
        R.modelName = "SvZfhilft";

    /**
     * @ngdoc object
     * @name lbServices.SvZfhilft.translations
     * @header lbServices.SvZfhilft.translations
     * @object
     * @description
     *
     * The object `SvZfhilft.translations` groups methods
     * manipulating `SvZfhilftTranslation` instances related to `SvZfhilft`.
     *
     * Call {@link lbServices.SvZfhilft#translations SvZfhilft.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#translations
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Queries translations of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::get::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#count
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Counts translations of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::count::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#create
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::create::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#createMany
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::createMany::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#destroyAll
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::delete::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#destroyById
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::destroyById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#findById
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::findById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#updateById
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::updateById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvZfhilft.projects
     * @header lbServices.SvZfhilft.projects
     * @object
     * @description
     *
     * The object `SvZfhilft.projects` groups methods
     * manipulating `SvHilfsprojekt` instances related to `SvZfhilft`.
     *
     * Call {@link lbServices.SvZfhilft#projects SvZfhilft.projects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#projects
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Queries projects of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R.projects = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::get::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#count
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Counts projects of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.projects.count = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::count::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#create
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Creates a new instance in projects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R.projects.create = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::create::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#createMany
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Creates a new instance in projects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R.projects.createMany = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::createMany::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#destroyAll
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Deletes all projects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.projects.destroyAll = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::delete::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#destroyById
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Delete a related item by id for projects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for projects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.projects.destroyById = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::destroyById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#findById
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Find a related item by id for projects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for projects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R.projects.findById = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::findById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#updateById
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Update a related item by id for projects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for projects
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvHilfsprojekt` object.)
             * </em>
             */
        R.projects.updateById = function() {
          var TargetResource = $injector.get("SvHilfsprojekt");
          var action = TargetResource["::updateById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvZfhilft.images
     * @header lbServices.SvZfhilft.images
     * @object
     * @description
     *
     * The object `SvZfhilft.images` groups methods
     * manipulating `SvZfhilftImage` instances related to `SvZfhilft`.
     *
     * Call {@link lbServices.SvZfhilft#images SvZfhilft.images()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#images
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Queries images of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R.images = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::get::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#count
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Counts images of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.images.count = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::count::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#create
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R.images.create = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::create::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#createMany
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R.images.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::createMany::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#destroyAll
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Deletes all images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::delete::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#destroyById
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Delete a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::destroyById::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#findById
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Find a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R.images.findById = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::findById::SvZfhilft::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.images#updateById
             * @methodOf lbServices.SvZfhilft.images
             *
             * @description
             *
             * Update a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R.images.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftImage");
          var action = TargetResource["::updateById::SvZfhilft::images"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStiftungVideo
 * @header lbServices.KsStiftungVideo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStiftungVideo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStiftungVideo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStiftungVideos/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#create
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStiftungVideos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#createMany
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStiftungVideos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#upsert
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStiftungVideos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#exists
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStiftungVideos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#findById
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStiftungVideos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#find
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStiftungVideos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#findOne
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStiftungVideos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#updateAll
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStiftungVideos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#deleteById
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStiftungVideos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#count
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStiftungVideos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#prototype$updateAttributes
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStiftungVideos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#createChangeStream
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStiftungVideos/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.videos.findById() instead.
            "::findById::KsStiftung::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.videos.destroyById() instead.
            "::destroyById::KsStiftung::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.videos.updateById() instead.
            "::updateById::KsStiftung::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStiftungs/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStiftung.videos() instead.
            "::get::KsStiftung::videos": {
              isArray: true,
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use KsStiftung.videos.create() instead.
            "::create::KsStiftung::videos": {
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.videos.createMany() instead.
            "::createMany::KsStiftung::videos": {
              isArray: true,
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use KsStiftung.videos.destroyAll() instead.
            "::delete::KsStiftung::videos": {
              url: urlBase + "/KsStiftungs/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use KsStiftung.videos.count() instead.
            "::count::KsStiftung::videos": {
              url: urlBase + "/KsStiftungs/:id/videos/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#updateOrCreate
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#update
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#destroyById
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStiftungVideo#removeById
             * @methodOf lbServices.KsStiftungVideo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStiftungVideo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStiftungVideo#modelName
        * @propertyOf lbServices.KsStiftungVideo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStiftungVideo`.
        */
        R.modelName = "KsStiftungVideo";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiat
 * @header lbServices.KsStipendiat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiat",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiats/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsStipendiat.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiat.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiat.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/KsStipendiats/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/KsStipendiats/:id/items",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/KsStipendiats/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/KsStipendiats/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/KsStipendiats/:id/items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#create
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#createMany
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#upsert
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiats",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#exists
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiats/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#findById
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiats/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#find
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiats",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#findOne
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiats/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#updateAll
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiats/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#deleteById
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiats/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#count
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiats/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#createChangeStream
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiats/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#getContentData
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/KsStipendiats/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#updateOrCreate
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#update
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#destroyById
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#removeById
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiat` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiat#modelName
        * @propertyOf lbServices.KsStipendiat
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiat`.
        */
        R.modelName = "KsStipendiat";

    /**
     * @ngdoc object
     * @name lbServices.KsStipendiat.translations
     * @header lbServices.KsStipendiat.translations
     * @object
     * @description
     *
     * The object `KsStipendiat.translations` groups methods
     * manipulating `KsStipendiatTranslation` instances related to `KsStipendiat`.
     *
     * Call {@link lbServices.KsStipendiat#translations KsStipendiat.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#translations
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Queries translations of KsStipendiat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::get::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#count
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Counts translations of KsStipendiat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::count::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#create
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::create::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#createMany
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::createMany::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#destroyAll
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::delete::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#destroyById
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::destroyById::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#findById
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::findById::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.translations#updateById
             * @methodOf lbServices.KsStipendiat.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatTranslation");
          var action = TargetResource["::updateById::KsStipendiat::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsStipendiat.items
     * @header lbServices.KsStipendiat.items
     * @object
     * @description
     *
     * The object `KsStipendiat.items` groups methods
     * manipulating `KsStipendiatItem` instances related to `KsStipendiat`.
     *
     * Call {@link lbServices.KsStipendiat#items KsStipendiat.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat#items
             * @methodOf lbServices.KsStipendiat
             *
             * @description
             *
             * Queries items of KsStipendiat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::get::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#count
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Counts items of KsStipendiat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::count::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#create
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::create::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#createMany
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::createMany::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#destroyAll
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::delete::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#destroyById
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::destroyById::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#findById
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::findById::KsStipendiat::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiat.items#updateById
             * @methodOf lbServices.KsStipendiat.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItem");
          var action = TargetResource["::updateById::KsStipendiat::items"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiatTranslation
 * @header lbServices.KsStipendiatTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiatTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiatTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#create
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiatTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#createMany
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiatTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#upsert
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiatTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#exists
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiatTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#findById
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiatTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#find
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiatTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#findOne
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiatTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#updateAll
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiatTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#deleteById
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiatTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#count
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiatTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiatTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#createChangeStream
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiatTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.translations.findById() instead.
            "::findById::KsStipendiat::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.translations.destroyById() instead.
            "::destroyById::KsStipendiat::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.translations.updateById() instead.
            "::updateById::KsStipendiat::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiat.translations() instead.
            "::get::KsStipendiat::translations": {
              isArray: true,
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.translations.create() instead.
            "::create::KsStipendiat::translations": {
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.translations.createMany() instead.
            "::createMany::KsStipendiat::translations": {
              isArray: true,
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.translations.destroyAll() instead.
            "::delete::KsStipendiat::translations": {
              url: urlBase + "/KsStipendiats/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.translations.count() instead.
            "::count::KsStipendiat::translations": {
              url: urlBase + "/KsStipendiats/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#updateOrCreate
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#update
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#destroyById
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatTranslation#removeById
             * @methodOf lbServices.KsStipendiatTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiatTranslation#modelName
        * @propertyOf lbServices.KsStipendiatTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiatTranslation`.
        */
        R.modelName = "KsStipendiatTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiatItem
 * @header lbServices.KsStipendiatItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiatItem",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiatItems/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsStipendiatItem.persons.findById() instead.
            "prototype$__findById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.persons.destroyById() instead.
            "prototype$__destroyById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.persons.updateById() instead.
            "prototype$__updateById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiatItem.texts.findById() instead.
            "prototype$__findById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.texts.destroyById() instead.
            "prototype$__destroyById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.texts.updateById() instead.
            "prototype$__updateById__texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiatItem.persons() instead.
            "prototype$__get__persons": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.persons.create() instead.
            "prototype$__create__persons": {
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.persons.destroyAll() instead.
            "prototype$__delete__persons": {
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.persons.count() instead.
            "prototype$__count__persons": {
              url: urlBase + "/KsStipendiatItems/:id/persons/count",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.texts() instead.
            "prototype$__get__texts": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.texts.create() instead.
            "prototype$__create__texts": {
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.texts.destroyAll() instead.
            "prototype$__delete__texts": {
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.texts.count() instead.
            "prototype$__count__texts": {
              url: urlBase + "/KsStipendiatItems/:id/texts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#create
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiatItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#createMany
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#upsert
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiatItems",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#exists
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiatItems/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#findById
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiatItems/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#find
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#findOne
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiatItems/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#updateAll
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiatItems/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#deleteById
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiatItems/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#count
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiatItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiatItems/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#createChangeStream
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiatItems/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.items.findById() instead.
            "::findById::KsStipendiat::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.items.destroyById() instead.
            "::destroyById::KsStipendiat::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.items.updateById() instead.
            "::updateById::KsStipendiat::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiats/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiat.items() instead.
            "::get::KsStipendiat::items": {
              isArray: true,
              url: urlBase + "/KsStipendiats/:id/items",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiat.items.create() instead.
            "::create::KsStipendiat::items": {
              url: urlBase + "/KsStipendiats/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.items.createMany() instead.
            "::createMany::KsStipendiat::items": {
              isArray: true,
              url: urlBase + "/KsStipendiats/:id/items",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiat.items.destroyAll() instead.
            "::delete::KsStipendiat::items": {
              url: urlBase + "/KsStipendiats/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiat.items.count() instead.
            "::count::KsStipendiat::items": {
              url: urlBase + "/KsStipendiats/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#updateOrCreate
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#update
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#destroyById
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#removeById
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItem` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiatItem#modelName
        * @propertyOf lbServices.KsStipendiatItem
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiatItem`.
        */
        R.modelName = "KsStipendiatItem";

    /**
     * @ngdoc object
     * @name lbServices.KsStipendiatItem.persons
     * @header lbServices.KsStipendiatItem.persons
     * @object
     * @description
     *
     * The object `KsStipendiatItem.persons` groups methods
     * manipulating `KsStipendiatItemPerson` instances related to `KsStipendiatItem`.
     *
     * Call {@link lbServices.KsStipendiatItem#persons KsStipendiatItem.persons()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#persons
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Queries persons of KsStipendiatItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R.persons = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::get::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#count
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Counts persons of KsStipendiatItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.persons.count = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::count::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#create
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Creates a new instance in persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R.persons.create = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::create::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#createMany
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Creates a new instance in persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R.persons.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::createMany::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#destroyAll
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Deletes all persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.persons.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::delete::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#destroyById
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Delete a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.persons.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::destroyById::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#findById
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Find a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R.persons.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::findById::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.persons#updateById
             * @methodOf lbServices.KsStipendiatItem.persons
             *
             * @description
             *
             * Update a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R.persons.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPerson");
          var action = TargetResource["::updateById::KsStipendiatItem::persons"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KsStipendiatItem.texts
     * @header lbServices.KsStipendiatItem.texts
     * @object
     * @description
     *
     * The object `KsStipendiatItem.texts` groups methods
     * manipulating `KsStipendiatItemText` instances related to `KsStipendiatItem`.
     *
     * Call {@link lbServices.KsStipendiatItem#texts KsStipendiatItem.texts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem#texts
             * @methodOf lbServices.KsStipendiatItem
             *
             * @description
             *
             * Queries texts of KsStipendiatItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R.texts = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::get::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#count
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Counts texts of KsStipendiatItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.texts.count = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::count::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#create
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Creates a new instance in texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R.texts.create = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::create::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#createMany
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Creates a new instance in texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R.texts.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::createMany::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#destroyAll
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Deletes all texts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.texts.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::delete::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#destroyById
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Delete a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.texts.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::destroyById::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#findById
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Find a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R.texts.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::findById::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItem.texts#updateById
             * @methodOf lbServices.KsStipendiatItem.texts
             *
             * @description
             *
             * Update a related item by id for texts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for texts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R.texts.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItemText");
          var action = TargetResource["::updateById::KsStipendiatItem::texts"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiatItemPerson
 * @header lbServices.KsStipendiatItemPerson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemPerson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiatItemPerson",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiatItemPeople/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KsStipendiatItemPerson.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#create
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiatItemPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#createMany
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#upsert
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiatItemPeople",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#exists
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiatItemPeople/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#findById
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiatItemPeople/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#find
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPeople",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#findOne
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiatItemPeople/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#updateAll
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiatItemPeople/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#deleteById
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiatItemPeople/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#count
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiatItemPeople/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiatItemPeople/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#createChangeStream
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiatItemPeople/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.persons.findById() instead.
            "::findById::KsStipendiatItem::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.persons.destroyById() instead.
            "::destroyById::KsStipendiatItem::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.persons.updateById() instead.
            "::updateById::KsStipendiatItem::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/persons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiatItem.persons() instead.
            "::get::KsStipendiatItem::persons": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.persons.create() instead.
            "::create::KsStipendiatItem::persons": {
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.persons.createMany() instead.
            "::createMany::KsStipendiatItem::persons": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.persons.destroyAll() instead.
            "::delete::KsStipendiatItem::persons": {
              url: urlBase + "/KsStipendiatItems/:id/persons",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.persons.count() instead.
            "::count::KsStipendiatItem::persons": {
              url: urlBase + "/KsStipendiatItems/:id/persons/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#updateOrCreate
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#update
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#destroyById
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#removeById
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPerson` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiatItemPerson#modelName
        * @propertyOf lbServices.KsStipendiatItemPerson
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiatItemPerson`.
        */
        R.modelName = "KsStipendiatItemPerson";

    /**
     * @ngdoc object
     * @name lbServices.KsStipendiatItemPerson.translations
     * @header lbServices.KsStipendiatItemPerson.translations
     * @object
     * @description
     *
     * The object `KsStipendiatItemPerson.translations` groups methods
     * manipulating `KsStipendiatItemPersonTranslation` instances related to `KsStipendiatItemPerson`.
     *
     * Call {@link lbServices.KsStipendiatItemPerson#translations KsStipendiatItemPerson.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson#translations
             * @methodOf lbServices.KsStipendiatItemPerson
             *
             * @description
             *
             * Queries translations of KsStipendiatItemPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::get::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#count
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Counts translations of KsStipendiatItemPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::count::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#create
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::create::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#createMany
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::createMany::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#destroyAll
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::delete::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#destroyById
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::destroyById::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#findById
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::findById::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPerson.translations#updateById
             * @methodOf lbServices.KsStipendiatItemPerson.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("KsStipendiatItemPersonTranslation");
          var action = TargetResource["::updateById::KsStipendiatItemPerson::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiatItemPersonTranslation
 * @header lbServices.KsStipendiatItemPersonTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemPersonTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiatItemPersonTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiatItemPersonTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#create
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiatItemPersonTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#createMany
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPersonTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#upsert
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiatItemPersonTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#exists
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#findById
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#find
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPersonTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#findOne
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#updateAll
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#deleteById
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#count
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#createChangeStream
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiatItemPersonTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.findById() instead.
            "::findById::KsStipendiatItemPerson::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.destroyById() instead.
            "::destroyById::KsStipendiatItemPerson::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.updateById() instead.
            "::updateById::KsStipendiatItemPerson::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations() instead.
            "::get::KsStipendiatItemPerson::translations": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.create() instead.
            "::create::KsStipendiatItemPerson::translations": {
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.createMany() instead.
            "::createMany::KsStipendiatItemPerson::translations": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.destroyAll() instead.
            "::delete::KsStipendiatItemPerson::translations": {
              url: urlBase + "/KsStipendiatItemPeople/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItemPerson.translations.count() instead.
            "::count::KsStipendiatItemPerson::translations": {
              url: urlBase + "/KsStipendiatItemPeople/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#updateOrCreate
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#update
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#destroyById
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemPersonTranslation#removeById
             * @methodOf lbServices.KsStipendiatItemPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemPersonTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiatItemPersonTranslation#modelName
        * @propertyOf lbServices.KsStipendiatItemPersonTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiatItemPersonTranslation`.
        */
        R.modelName = "KsStipendiatItemPersonTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiatItemText
 * @header lbServices.KsStipendiatItemText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiatItemText",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiatItemTexts/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#create
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiatItemTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#createMany
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#upsert
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiatItemTexts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#exists
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiatItemTexts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#findById
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiatItemTexts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#find
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemTexts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#findOne
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiatItemTexts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#updateAll
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiatItemTexts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#deleteById
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiatItemTexts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#count
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiatItemTexts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiatItemTexts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#createChangeStream
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiatItemTexts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.texts.findById() instead.
            "::findById::KsStipendiatItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.texts.destroyById() instead.
            "::destroyById::KsStipendiatItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.texts.updateById() instead.
            "::updateById::KsStipendiatItem::texts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KsStipendiatItems/:id/texts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KsStipendiatItem.texts() instead.
            "::get::KsStipendiatItem::texts": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "GET",
            },

            // INTERNAL. Use KsStipendiatItem.texts.create() instead.
            "::create::KsStipendiatItem::texts": {
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.texts.createMany() instead.
            "::createMany::KsStipendiatItem::texts": {
              isArray: true,
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "POST",
            },

            // INTERNAL. Use KsStipendiatItem.texts.destroyAll() instead.
            "::delete::KsStipendiatItem::texts": {
              url: urlBase + "/KsStipendiatItems/:id/texts",
              method: "DELETE",
            },

            // INTERNAL. Use KsStipendiatItem.texts.count() instead.
            "::count::KsStipendiatItem::texts": {
              url: urlBase + "/KsStipendiatItems/:id/texts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#updateOrCreate
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#update
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#destroyById
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemText#removeById
             * @methodOf lbServices.KsStipendiatItemText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemText` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiatItemText#modelName
        * @propertyOf lbServices.KsStipendiatItemText
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiatItemText`.
        */
        R.modelName = "KsStipendiatItemText";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KsStipendiatItemTextTranslation
 * @header lbServices.KsStipendiatItemTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KsStipendiatItemTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KsStipendiatItemTextTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KsStipendiatItemTextTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#create
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KsStipendiatItemTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#createMany
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#upsert
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KsStipendiatItemTextTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#exists
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KsStipendiatItemTextTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#findById
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KsStipendiatItemTextTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#find
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KsStipendiatItemTextTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#findOne
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KsStipendiatItemTextTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#updateAll
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KsStipendiatItemTextTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#deleteById
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KsStipendiatItemTextTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#count
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KsStipendiatItemTextTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#prototype$updateAttributes
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KsStipendiatItemTextTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#createChangeStream
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KsStipendiatItemTextTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#updateOrCreate
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#update
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#destroyById
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KsStipendiatItemTextTranslation#removeById
             * @methodOf lbServices.KsStipendiatItemTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KsStipendiatItemTextTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KsStipendiatItemTextTranslation#modelName
        * @propertyOf lbServices.KsStipendiatItemTextTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KsStipendiatItemTextTranslation`.
        */
        R.modelName = "KsStipendiatItemTextTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AppUser
 * @header lbServices.AppUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AppUser",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AppUsers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__findById__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AppUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__destroyById__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AppUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__updateById__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AppUsers/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__get__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Queries accessTokens of AppUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/AppUsers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__create__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/AppUsers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__delete__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/AppUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__count__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Counts accessTokens of AppUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/AppUsers/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#create
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AppUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#createMany
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AppUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#upsert
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AppUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#exists
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AppUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#findById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AppUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#find
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AppUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#findOne
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AppUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#updateAll
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AppUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#deleteById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AppUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#count
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AppUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$updateAttributes
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AppUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#createChangeStream
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AppUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#login
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/AppUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#logout
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/AppUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#confirm
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/AppUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#resetPassword
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/AppUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#ping
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "ping": {
              url: urlBase + "/AppUsers/ping",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#getCurrent
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/AppUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AppUser#updateOrCreate
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AppUser#update
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AppUser#destroyById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AppUser#removeById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AppUser#getCachedCurrent
         * @methodOf lbServices.AppUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.AppUser#login} or
         * {@link lbServices.AppUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A AppUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.AppUser#isAuthenticated
         * @methodOf lbServices.AppUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.AppUser#getCurrentId
         * @methodOf lbServices.AppUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.AppUser#modelName
        * @propertyOf lbServices.AppUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AppUser`.
        */
        R.modelName = "AppUser";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AppLanguage
 * @header lbServices.AppLanguage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppLanguage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AppLanguage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AppLanguages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#create
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AppLanguages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#createMany
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AppLanguages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#upsert
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AppLanguages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#exists
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AppLanguages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#findById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AppLanguages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#find
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AppLanguages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#findOne
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AppLanguages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#updateAll
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AppLanguages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#deleteById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AppLanguages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#count
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AppLanguages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#prototype$updateAttributes
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AppLanguages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#createChangeStream
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AppLanguages/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#updateOrCreate
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#update
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#destroyById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#removeById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AppLanguage#modelName
        * @propertyOf lbServices.AppLanguage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AppLanguage`.
        */
        R.modelName = "AppLanguage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftImage
 * @header lbServices.SvZfhilftImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftImage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftImages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#create
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#createMany
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#upsert
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftImages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#exists
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftImages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#findById
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftImages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#find
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftImages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#findOne
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftImages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#updateAll
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftImages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#deleteById
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftImages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#count
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftImages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#createChangeStream
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftImages/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.images.findById() instead.
            "::findById::SvZfhilft::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.images.destroyById() instead.
            "::destroyById::SvZfhilft::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.images.updateById() instead.
            "::updateById::SvZfhilft::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.images() instead.
            "::get::SvZfhilft::images": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.images.create() instead.
            "::create::SvZfhilft::images": {
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.images.createMany() instead.
            "::createMany::SvZfhilft::images": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.images.destroyAll() instead.
            "::delete::SvZfhilft::images": {
              url: urlBase + "/SvZfhilfts/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.images.count() instead.
            "::count::SvZfhilft::images": {
              url: urlBase + "/SvZfhilfts/:id/images/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#updateOrCreate
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#update
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#destroyById
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftImage#removeById
             * @methodOf lbServices.SvZfhilftImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftImage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftImage#modelName
        * @propertyOf lbServices.SvZfhilftImage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftImage`.
        */
        R.modelName = "SvZfhilftImage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZukunftProjekte
 * @header lbServices.ZukunftProjekte
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZukunftProjekte` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZukunftProjekte",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZukunftProjektes/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#create
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZukunftProjektes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#createMany
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZukunftProjektes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#upsert
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZukunftProjektes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#exists
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZukunftProjektes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#findById
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZukunftProjektes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#find
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZukunftProjektes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#findOne
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZukunftProjektes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#updateAll
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZukunftProjektes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#deleteById
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZukunftProjektes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#count
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZukunftProjektes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#prototype$updateAttributes
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZukunftProjektes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#createChangeStream
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZukunftProjektes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#getContentData
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `stationId` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/ZukunftProjektes/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#updateOrCreate
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#update
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#destroyById
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#removeById
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZukunftProjekte#modelName
        * @propertyOf lbServices.ZukunftProjekte
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZukunftProjekte`.
        */
        R.modelName = "ZukunftProjekte";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZukunftProjekteTranslation
 * @header lbServices.ZukunftProjekteTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZukunftProjekteTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZukunftProjekteTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZukunftProjekteTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#create
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZukunftProjekteTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#createMany
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZukunftProjekteTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#upsert
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZukunftProjekteTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#exists
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZukunftProjekteTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#findById
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZukunftProjekteTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#find
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZukunftProjekteTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#findOne
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZukunftProjekteTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#updateAll
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZukunftProjekteTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#deleteById
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZukunftProjekteTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#count
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZukunftProjekteTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZukunftProjekteTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#createChangeStream
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZukunftProjekteTranslations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#updateOrCreate
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#update
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#destroyById
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekteTranslation#removeById
             * @methodOf lbServices.ZukunftProjekteTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekteTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZukunftProjekteTranslation#modelName
        * @propertyOf lbServices.ZukunftProjekteTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZukunftProjekteTranslation`.
        */
        R.modelName = "ZukunftProjekteTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpStation
 * @header lbServices.ZpStation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpStation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpStation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpStations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#create
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#createMany
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#upsert
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpStations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#exists
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpStations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#findById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpStations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#find
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpStations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#findOne
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpStations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#updateAll
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpStations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#deleteById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpStations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#count
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#prototype$updateAttributes
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpStations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#createChangeStream
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpStations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpStation#updateOrCreate
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#update
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#destroyById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#removeById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpStation#modelName
        * @propertyOf lbServices.ZpStation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpStation`.
        */
        R.modelName = "ZpStation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikel
 * @header lbServices.ZpArtikel
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikel` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikel",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikels/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpArtikel.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpArtikels/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/ZpArtikels/:id/medias/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#create
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#createMany
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#upsert
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikels",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#exists
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikels/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#findById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikels/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#find
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikels",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#findOne
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikels/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#updateAll
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikels/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#deleteById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikels/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#count
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikels/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#createChangeStream
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikels/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#voteUp
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "voteUp": {
              url: urlBase + "/ZpArtikels/:id/voteUp",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#voteDown
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "voteDown": {
              url: urlBase + "/ZpArtikels/:id/voteDown",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#updateOrCreate
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#update
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#destroyById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#removeById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikel#modelName
        * @propertyOf lbServices.ZpArtikel
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikel`.
        */
        R.modelName = "ZpArtikel";

    /**
     * @ngdoc object
     * @name lbServices.ZpArtikel.translations
     * @header lbServices.ZpArtikel.translations
     * @object
     * @description
     *
     * The object `ZpArtikel.translations` groups methods
     * manipulating `ZpArtikelTranslation` instances related to `ZpArtikel`.
     *
     * Call {@link lbServices.ZpArtikel#translations ZpArtikel.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#translations
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Queries translations of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::get::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#count
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Counts translations of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::count::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#create
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::create::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#createMany
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::createMany::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#destroyAll
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::delete::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#destroyById
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::destroyById::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#findById
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::findById::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#updateById
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::updateById::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.ZpArtikel.medias
     * @header lbServices.ZpArtikel.medias
     * @object
     * @description
     *
     * The object `ZpArtikel.medias` groups methods
     * manipulating `ZpArtikelMedia` instances related to `ZpArtikel`.
     *
     * Call {@link lbServices.ZpArtikel#medias ZpArtikel.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#medias
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Queries medias of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::get::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#count
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Counts medias of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::count::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#create
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::create::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#createMany
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::createMany::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#destroyAll
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::delete::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#destroyById
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::destroyById::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#findById
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::findById::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.medias#updateById
             * @methodOf lbServices.ZpArtikel.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::updateById::ZpArtikel::medias"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikelTranslation
 * @header lbServices.ZpArtikelTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikelTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikelTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikelTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#create
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikelTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#createMany
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikelTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#upsert
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikelTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#exists
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikelTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#findById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikelTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#find
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikelTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#findOne
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikelTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#updateAll
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikelTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#deleteById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikelTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#count
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikelTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikelTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#createChangeStream
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikelTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.findById() instead.
            "::findById::ZpArtikel::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyById() instead.
            "::destroyById::ZpArtikel::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.updateById() instead.
            "::updateById::ZpArtikel::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.translations() instead.
            "::get::ZpArtikel::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.create() instead.
            "::create::ZpArtikel::translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.createMany() instead.
            "::createMany::ZpArtikel::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyAll() instead.
            "::delete::ZpArtikel::translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.count() instead.
            "::count::ZpArtikel::translations": {
              url: urlBase + "/ZpArtikels/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#updateOrCreate
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#update
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#destroyById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#removeById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikelTranslation#modelName
        * @propertyOf lbServices.ZpArtikelTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikelTranslation`.
        */
        R.modelName = "ZpArtikelTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpMedia
 * @header lbServices.ZpMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#create
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#createMany
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#upsert
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#exists
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#findById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#find
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#findOne
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#updateAll
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#deleteById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#count
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#prototype$updateAttributes
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#createChangeStream
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpMedia/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#updateOrCreate
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#update
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#destroyById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#removeById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpMedia#modelName
        * @propertyOf lbServices.ZpMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpMedia`.
        */
        R.modelName = "ZpMedia";

    /**
     * @ngdoc object
     * @name lbServices.ZpMedia.translations
     * @header lbServices.ZpMedia.translations
     * @object
     * @description
     *
     * The object `ZpMedia.translations` groups methods
     * manipulating `ZpMediaTranslation` instances related to `ZpMedia`.
     *
     * Call {@link lbServices.ZpMedia#translations ZpMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#translations
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Queries translations of ZpMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::get::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#count
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Counts translations of ZpMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::count::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#create
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::create::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#createMany
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::createMany::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#destroyAll
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::delete::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#destroyById
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::destroyById::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#findById
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::findById::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#updateById
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::updateById::ZpMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpMediaTranslation
 * @header lbServices.ZpMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#create
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#createMany
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#upsert
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#exists
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#findById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#find
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#findOne
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#updateAll
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#deleteById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#count
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#createChangeStream
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.findById() instead.
            "::findById::ZpMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.destroyById() instead.
            "::destroyById::ZpMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.updateById() instead.
            "::updateById::ZpMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMedia.translations() instead.
            "::get::ZpMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.create() instead.
            "::create::ZpMedia::translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.createMany() instead.
            "::createMany::ZpMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.destroyAll() instead.
            "::delete::ZpMedia::translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.count() instead.
            "::count::ZpMedia::translations": {
              url: urlBase + "/ZpMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#updateOrCreate
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#update
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#destroyById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#removeById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpMediaTranslation#modelName
        * @propertyOf lbServices.ZpMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpMediaTranslation`.
        */
        R.modelName = "ZpMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikelMedia
 * @header lbServices.ZpArtikelMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikelMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikelMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikelMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpArtikelMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikelMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#create
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikelMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#createMany
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#upsert
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikelMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#exists
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikelMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#findById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikelMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#find
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#findOne
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikelMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#updateAll
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikelMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#deleteById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikelMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#count
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikelMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikelMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#createChangeStream
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikelMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.medias.findById() instead.
            "::findById::ZpArtikel::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.medias.destroyById() instead.
            "::destroyById::ZpArtikel::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.medias.updateById() instead.
            "::updateById::ZpArtikel::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.medias() instead.
            "::get::ZpArtikel::medias": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.medias.create() instead.
            "::create::ZpArtikel::medias": {
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.medias.createMany() instead.
            "::createMany::ZpArtikel::medias": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.medias.destroyAll() instead.
            "::delete::ZpArtikel::medias": {
              url: urlBase + "/ZpArtikels/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.medias.count() instead.
            "::count::ZpArtikel::medias": {
              url: urlBase + "/ZpArtikels/:id/medias/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#updateOrCreate
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#update
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#destroyById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#removeById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikelMedia#modelName
        * @propertyOf lbServices.ZpArtikelMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikelMedia`.
        */
        R.modelName = "ZpArtikelMedia";

    /**
     * @ngdoc object
     * @name lbServices.ZpArtikelMedia.translations
     * @header lbServices.ZpArtikelMedia.translations
     * @object
     * @description
     *
     * The object `ZpArtikelMedia.translations` groups methods
     * manipulating `ZpArtikelMediaTranslation` instances related to `ZpArtikelMedia`.
     *
     * Call {@link lbServices.ZpArtikelMedia#translations ZpArtikelMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#translations
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Queries translations of ZpArtikelMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::get::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#count
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Counts translations of ZpArtikelMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::count::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#create
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::create::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#createMany
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::createMany::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#destroyAll
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::delete::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#destroyById
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::destroyById::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#findById
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::findById::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#updateById
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::updateById::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikelMediaTranslation
 * @header lbServices.ZpArtikelMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikelMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikelMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikelMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#create
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#createMany
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#upsert
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#exists
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#findById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#find
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#findOne
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikelMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#updateAll
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikelMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#deleteById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#count
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikelMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#createChangeStream
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikelMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.findById() instead.
            "::findById::ZpArtikelMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyById() instead.
            "::destroyById::ZpArtikelMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.updateById() instead.
            "::updateById::ZpArtikelMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikelMedia.translations() instead.
            "::get::ZpArtikelMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.create() instead.
            "::create::ZpArtikelMedia::translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.createMany() instead.
            "::createMany::ZpArtikelMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyAll() instead.
            "::delete::ZpArtikelMedia::translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.count() instead.
            "::count::ZpArtikelMedia::translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#updateOrCreate
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#update
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#destroyById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#removeById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikelMediaTranslation#modelName
        * @propertyOf lbServices.ZpArtikelMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikelMediaTranslation`.
        */
        R.modelName = "ZpArtikelMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Tag
 * @header lbServices.Tag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Tag",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Tags/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Tag#create
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Tags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#createMany
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Tags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#upsert
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Tags",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#exists
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Tags/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#findById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Tags/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#find
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Tags",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#findOne
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Tags/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#updateAll
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Tags/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#deleteById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Tags/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#count
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Tags/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#prototype$updateAttributes
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Tags/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#createChangeStream
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Tags/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Tag#updateOrCreate
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Tag#update
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Tag#destroyById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Tag#removeById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Tag#modelName
        * @propertyOf lbServices.Tag
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Tag`.
        */
        R.modelName = "Tag";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.File
 * @header lbServices.File
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `File` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "File",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Files/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.File#create
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Files",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#createMany
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Files",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#upsert
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Files",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#exists
             * @methodOf lbServices.File
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Files/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#findById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Files/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#find
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#findOne
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Files/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#updateAll
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Files/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#deleteById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Files/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#count
             * @methodOf lbServices.File
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Files/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#prototype$updateAttributes
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Files/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#createChangeStream
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Files/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.File#updateOrCreate
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.File#update
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.File#destroyById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.File#removeById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.File#modelName
        * @propertyOf lbServices.File
        * @description
        * The name of the model represented by this $resource,
        * i.e. `File`.
        */
        R.modelName = "File";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FileTag
 * @header lbServices.FileTag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FileTag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FileTag",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/FileTags/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.FileTag#create
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FileTags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#createMany
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FileTags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#upsert
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FileTags",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#exists
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FileTags/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#findById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FileTags/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#find
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FileTags",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#findOne
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FileTags/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#updateAll
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/FileTags/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#deleteById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FileTags/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#count
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FileTags/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#prototype$updateAttributes
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FileTags/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#createChangeStream
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FileTags/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FileTag#updateOrCreate
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FileTag#update
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FileTag#destroyById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FileTag#removeById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.FileTag#modelName
        * @propertyOf lbServices.FileTag
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FileTag`.
        */
        R.modelName = "FileTag";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbContent
 * @header lbServices.EbContent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbContent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbContent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbContents/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbContent.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbContents/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbContents/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/EbContents/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/EbContents/:id/medias/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#create
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbContents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#createMany
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbContents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#upsert
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbContents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#exists
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbContents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#findById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbContents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#find
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbContents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#findOne
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbContents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#updateAll
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbContents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#deleteById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbContents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#count
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbContents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#prototype$updateAttributes
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbContents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#createChangeStream
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbContents/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.findById() instead.
            "::findById::EbCategory::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.destroyById() instead.
            "::destroyById::EbCategory::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.updateById() instead.
            "::updateById::EbCategory::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.contents() instead.
            "::get::EbCategory::contents": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.create() instead.
            "::create::EbCategory::contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.createMany() instead.
            "::createMany::EbCategory::contents": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.destroyAll() instead.
            "::delete::EbCategory::contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.count() instead.
            "::count::EbCategory::contents": {
              url: urlBase + "/EbCategories/:id/contents/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbContent#updateOrCreate
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbContent#update
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbContent#destroyById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbContent#removeById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbContent#modelName
        * @propertyOf lbServices.EbContent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbContent`.
        */
        R.modelName = "EbContent";

    /**
     * @ngdoc object
     * @name lbServices.EbContent.translations
     * @header lbServices.EbContent.translations
     * @object
     * @description
     *
     * The object `EbContent.translations` groups methods
     * manipulating `EbContentTranslation` instances related to `EbContent`.
     *
     * Call {@link lbServices.EbContent#translations EbContent.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbContent#translations
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Queries translations of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::get::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#count
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Counts translations of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::count::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#create
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::create::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#createMany
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::createMany::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#destroyAll
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::delete::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#destroyById
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::destroyById::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#findById
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::findById::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#updateById
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::updateById::EbContent::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EbContent.medias
     * @header lbServices.EbContent.medias
     * @object
     * @description
     *
     * The object `EbContent.medias` groups methods
     * manipulating `EbMedia` instances related to `EbContent`.
     *
     * Call {@link lbServices.EbContent#medias EbContent.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbContent#medias
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Queries medias of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::get::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#count
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Counts medias of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::count::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#create
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::create::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#createMany
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::createMany::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#destroyAll
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::delete::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#destroyById
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::destroyById::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#findById
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::findById::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#updateById
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::updateById::EbContent::medias"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbCategoryTranslation
 * @header lbServices.EbCategoryTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbCategoryTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbCategoryTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbCategoryTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#create
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbCategoryTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#createMany
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbCategoryTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#upsert
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbCategoryTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#exists
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbCategoryTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#findById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbCategoryTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#find
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbCategoryTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#findOne
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbCategoryTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#updateAll
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbCategoryTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#deleteById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbCategoryTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#count
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbCategoryTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbCategoryTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#createChangeStream
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbCategoryTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.findById() instead.
            "::findById::EbCategory::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.destroyById() instead.
            "::destroyById::EbCategory::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.updateById() instead.
            "::updateById::EbCategory::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.translations() instead.
            "::get::EbCategory::translations": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.create() instead.
            "::create::EbCategory::translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.createMany() instead.
            "::createMany::EbCategory::translations": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.destroyAll() instead.
            "::delete::EbCategory::translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.count() instead.
            "::count::EbCategory::translations": {
              url: urlBase + "/EbCategories/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#updateOrCreate
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#update
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#destroyById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#removeById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbCategoryTranslation#modelName
        * @propertyOf lbServices.EbCategoryTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbCategoryTranslation`.
        */
        R.modelName = "EbCategoryTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbCategory
 * @header lbServices.EbCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbCategory.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.contents.findById() instead.
            "prototype$__findById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.destroyById() instead.
            "prototype$__destroyById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.updateById() instead.
            "prototype$__updateById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbCategories/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents() instead.
            "prototype$__get__contents": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.create() instead.
            "prototype$__create__contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.destroyAll() instead.
            "prototype$__delete__contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.count() instead.
            "prototype$__count__contents": {
              url: urlBase + "/EbCategories/:id/contents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#create
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#createMany
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#upsert
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbCategories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#exists
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#findById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#find
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#findOne
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#updateAll
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#deleteById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#count
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#prototype$updateAttributes
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbCategories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#createChangeStream
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbCategories/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbCategory#updateOrCreate
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#update
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#destroyById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#removeById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbCategory#modelName
        * @propertyOf lbServices.EbCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbCategory`.
        */
        R.modelName = "EbCategory";

    /**
     * @ngdoc object
     * @name lbServices.EbCategory.translations
     * @header lbServices.EbCategory.translations
     * @object
     * @description
     *
     * The object `EbCategory.translations` groups methods
     * manipulating `EbCategoryTranslation` instances related to `EbCategory`.
     *
     * Call {@link lbServices.EbCategory#translations EbCategory.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbCategory#translations
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Queries translations of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::get::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#count
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Counts translations of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::count::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#create
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::create::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#createMany
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::createMany::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#destroyAll
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::delete::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#destroyById
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::destroyById::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#findById
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::findById::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#updateById
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::updateById::EbCategory::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EbCategory.contents
     * @header lbServices.EbCategory.contents
     * @object
     * @description
     *
     * The object `EbCategory.contents` groups methods
     * manipulating `EbContent` instances related to `EbCategory`.
     *
     * Call {@link lbServices.EbCategory#contents EbCategory.contents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbCategory#contents
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Queries contents of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::get::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#count
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Counts contents of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contents.count = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::count::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#create
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.create = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::create::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#createMany
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.createMany = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::createMany::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#destroyAll
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Deletes all contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyAll = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::delete::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#destroyById
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Delete a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::destroyById::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#findById
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Find a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.findById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::findById::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#updateById
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Update a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.updateById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::updateById::EbCategory::contents"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbContentTranslation
 * @header lbServices.EbContentTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbContentTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbContentTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbContentTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#create
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbContentTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#createMany
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbContentTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#upsert
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbContentTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#exists
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbContentTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#findById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbContentTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#find
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbContentTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#findOne
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbContentTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#updateAll
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbContentTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#deleteById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbContentTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#count
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbContentTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbContentTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#createChangeStream
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbContentTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.findById() instead.
            "::findById::EbContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.destroyById() instead.
            "::destroyById::EbContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.updateById() instead.
            "::updateById::EbContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.translations() instead.
            "::get::EbContent::translations": {
              isArray: true,
              url: urlBase + "/EbContents/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.create() instead.
            "::create::EbContent::translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.createMany() instead.
            "::createMany::EbContent::translations": {
              isArray: true,
              url: urlBase + "/EbContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.destroyAll() instead.
            "::delete::EbContent::translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.count() instead.
            "::count::EbContent::translations": {
              url: urlBase + "/EbContents/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#updateOrCreate
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#update
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#destroyById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#removeById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbContentTranslation#modelName
        * @propertyOf lbServices.EbContentTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbContentTranslation`.
        */
        R.modelName = "EbContentTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbMedia
 * @header lbServices.EbMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#create
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#createMany
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#upsert
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#exists
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#findById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#find
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#findOne
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#updateAll
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#deleteById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#count
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#prototype$updateAttributes
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#createChangeStream
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.findById() instead.
            "::findById::EbContent::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.destroyById() instead.
            "::destroyById::EbContent::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.updateById() instead.
            "::updateById::EbContent::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.medias() instead.
            "::get::EbContent::medias": {
              isArray: true,
              url: urlBase + "/EbContents/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.create() instead.
            "::create::EbContent::medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.createMany() instead.
            "::createMany::EbContent::medias": {
              isArray: true,
              url: urlBase + "/EbContents/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.destroyAll() instead.
            "::delete::EbContent::medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.count() instead.
            "::count::EbContent::medias": {
              url: urlBase + "/EbContents/:id/medias/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbMedia#updateOrCreate
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#update
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#destroyById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#removeById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbMedia#modelName
        * @propertyOf lbServices.EbMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbMedia`.
        */
        R.modelName = "EbMedia";

    /**
     * @ngdoc object
     * @name lbServices.EbMedia.translations
     * @header lbServices.EbMedia.translations
     * @object
     * @description
     *
     * The object `EbMedia.translations` groups methods
     * manipulating `EbMediaTranslation` instances related to `EbMedia`.
     *
     * Call {@link lbServices.EbMedia#translations EbMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbMedia#translations
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Queries translations of EbMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::get::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#count
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Counts translations of EbMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::count::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#create
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::create::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#createMany
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::createMany::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#destroyAll
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::delete::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#destroyById
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::destroyById::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#findById
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::findById::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#updateById
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::updateById::EbMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbMediaTranslation
 * @header lbServices.EbMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#create
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#createMany
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#upsert
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#exists
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#findById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#find
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#findOne
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#updateAll
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#deleteById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#count
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#createChangeStream
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.findById() instead.
            "::findById::EbMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.destroyById() instead.
            "::destroyById::EbMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.updateById() instead.
            "::updateById::EbMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbMedia.translations() instead.
            "::get::EbMedia::translations": {
              isArray: true,
              url: urlBase + "/EbMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.create() instead.
            "::create::EbMedia::translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.createMany() instead.
            "::createMany::EbMedia::translations": {
              isArray: true,
              url: urlBase + "/EbMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.destroyAll() instead.
            "::delete::EbMedia::translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.count() instead.
            "::count::EbMedia::translations": {
              url: urlBase + "/EbMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#updateOrCreate
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#update
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#destroyById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#removeById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbMediaTranslation#modelName
        * @propertyOf lbServices.EbMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbMediaTranslation`.
        */
        R.modelName = "EbMediaTranslation";



        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);

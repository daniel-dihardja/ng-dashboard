// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AppUser
 * @header lbServices.AppUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AppUser",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AppUsers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__findById__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AppUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__destroyById__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AppUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__updateById__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AppUsers/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__get__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Queries accessTokens of AppUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/AppUsers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__create__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/AppUsers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__delete__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/AppUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$__count__accessTokens
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Counts accessTokens of AppUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/AppUsers/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#create
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AppUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#createMany
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AppUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#upsert
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AppUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#exists
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AppUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#findById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AppUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#find
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AppUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#findOne
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AppUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#updateAll
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AppUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#deleteById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AppUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#count
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AppUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#prototype$updateAttributes
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AppUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#createChangeStream
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AppUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#login
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/AppUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#logout
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/AppUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#confirm
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/AppUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#resetPassword
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/AppUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#ping
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
            "ping": {
              url: urlBase + "/AppUsers/ping",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppUser#getCurrent
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/AppUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AppUser#updateOrCreate
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AppUser#update
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AppUser#destroyById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AppUser#removeById
             * @methodOf lbServices.AppUser
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppUser` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AppUser#getCachedCurrent
         * @methodOf lbServices.AppUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.AppUser#login} or
         * {@link lbServices.AppUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A AppUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.AppUser#isAuthenticated
         * @methodOf lbServices.AppUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.AppUser#getCurrentId
         * @methodOf lbServices.AppUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.AppUser#modelName
        * @propertyOf lbServices.AppUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AppUser`.
        */
        R.modelName = "AppUser";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AppLanguage
 * @header lbServices.AppLanguage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AppLanguage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AppLanguage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AppLanguages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#create
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AppLanguages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#createMany
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AppLanguages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#upsert
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AppLanguages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#exists
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AppLanguages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#findById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AppLanguages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#find
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AppLanguages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#findOne
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AppLanguages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#updateAll
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AppLanguages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#deleteById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AppLanguages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#count
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AppLanguages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#prototype$updateAttributes
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AppLanguages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#createChangeStream
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AppLanguages/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#updateOrCreate
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#update
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#destroyById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AppLanguage#removeById
             * @methodOf lbServices.AppLanguage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AppLanguage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AppLanguage#modelName
        * @propertyOf lbServices.AppLanguage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AppLanguage`.
        */
        R.modelName = "AppLanguage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpStation
 * @header lbServices.ZpStation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpStation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpStation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpStations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#create
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#createMany
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#upsert
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpStations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#exists
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpStations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#findById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpStations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#find
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpStations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#findOne
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpStations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#updateAll
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpStations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#deleteById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpStations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#count
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#prototype$updateAttributes
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpStations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#createChangeStream
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpStations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpStation#updateOrCreate
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#update
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#destroyById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpStation#removeById
             * @methodOf lbServices.ZpStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpStation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpStation#modelName
        * @propertyOf lbServices.ZpStation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpStation`.
        */
        R.modelName = "ZpStation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikel
 * @header lbServices.ZpArtikel
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikel` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikel",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikels/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpArtikel.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpArtikels/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/items",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/ZpArtikels/:id/items",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/ZpArtikels/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/ZpArtikels/:id/items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#create
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#createMany
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#upsert
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikels",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#exists
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikels/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#findById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikels/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#find
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikels",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#findOne
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikels/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#updateAll
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikels/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#deleteById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikels/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#count
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikels/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#createChangeStream
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikels/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#voteUp
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "voteUp": {
              url: urlBase + "/ZpArtikels/:id/voteUp",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#voteDown
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
            "voteDown": {
              url: urlBase + "/ZpArtikels/:id/voteDown",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#updateOrCreate
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#update
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#destroyById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#removeById
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikel` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikel#modelName
        * @propertyOf lbServices.ZpArtikel
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikel`.
        */
        R.modelName = "ZpArtikel";

    /**
     * @ngdoc object
     * @name lbServices.ZpArtikel.translations
     * @header lbServices.ZpArtikel.translations
     * @object
     * @description
     *
     * The object `ZpArtikel.translations` groups methods
     * manipulating `ZpArtikelTranslation` instances related to `ZpArtikel`.
     *
     * Call {@link lbServices.ZpArtikel#translations ZpArtikel.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#translations
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Queries translations of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::get::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#count
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Counts translations of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::count::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#create
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::create::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#createMany
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::createMany::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#destroyAll
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::delete::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#destroyById
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::destroyById::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#findById
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::findById::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.translations#updateById
             * @methodOf lbServices.ZpArtikel.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpArtikelTranslation");
          var action = TargetResource["::updateById::ZpArtikel::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.ZpArtikel.items
     * @header lbServices.ZpArtikel.items
     * @object
     * @description
     *
     * The object `ZpArtikel.items` groups methods
     * manipulating `ZpArtikelMedia` instances related to `ZpArtikel`.
     *
     * Call {@link lbServices.ZpArtikel#items ZpArtikel.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel#items
             * @methodOf lbServices.ZpArtikel
             *
             * @description
             *
             * Queries items of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::get::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#count
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Counts items of ZpArtikel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::count::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#create
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::create::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#createMany
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::createMany::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#destroyAll
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::delete::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#destroyById
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::destroyById::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#findById
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::findById::ZpArtikel::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikel.items#updateById
             * @methodOf lbServices.ZpArtikel.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("ZpArtikelMedia");
          var action = TargetResource["::updateById::ZpArtikel::items"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikelTranslation
 * @header lbServices.ZpArtikelTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikelTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikelTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikelTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#create
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikelTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#createMany
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikelTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#upsert
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikelTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#exists
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikelTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#findById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikelTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#find
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikelTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#findOne
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikelTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#updateAll
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikelTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#deleteById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikelTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#count
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikelTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikelTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#createChangeStream
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikelTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.findById() instead.
            "::findById::ZpArtikel::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyById() instead.
            "::destroyById::ZpArtikel::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.updateById() instead.
            "::updateById::ZpArtikel::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.translations() instead.
            "::get::ZpArtikel::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.translations.create() instead.
            "::create::ZpArtikel::translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.createMany() instead.
            "::createMany::ZpArtikel::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.translations.destroyAll() instead.
            "::delete::ZpArtikel::translations": {
              url: urlBase + "/ZpArtikels/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.translations.count() instead.
            "::count::ZpArtikel::translations": {
              url: urlBase + "/ZpArtikels/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#updateOrCreate
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#update
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#destroyById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelTranslation#removeById
             * @methodOf lbServices.ZpArtikelTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikelTranslation#modelName
        * @propertyOf lbServices.ZpArtikelTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikelTranslation`.
        */
        R.modelName = "ZpArtikelTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpMedia
 * @header lbServices.ZpMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#create
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#createMany
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#upsert
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#exists
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#findById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#find
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#findOne
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#updateAll
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#deleteById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#count
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#prototype$updateAttributes
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#createChangeStream
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.items.findById() instead.
            "::findById::ZpMediaWrapper::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.items.destroyById() instead.
            "::destroyById::ZpMediaWrapper::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.items.updateById() instead.
            "::updateById::ZpMediaWrapper::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMediaWrapper.items() instead.
            "::get::ZpMediaWrapper::items": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.items.create() instead.
            "::create::ZpMediaWrapper::items": {
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.items.createMany() instead.
            "::createMany::ZpMediaWrapper::items": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.items.destroyAll() instead.
            "::delete::ZpMediaWrapper::items": {
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.items.count() instead.
            "::count::ZpMediaWrapper::items": {
              url: urlBase + "/ZpMediaWrappers/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#updateOrCreate
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#update
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#destroyById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#removeById
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpMedia#modelName
        * @propertyOf lbServices.ZpMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpMedia`.
        */
        R.modelName = "ZpMedia";

    /**
     * @ngdoc object
     * @name lbServices.ZpMedia.translations
     * @header lbServices.ZpMedia.translations
     * @object
     * @description
     *
     * The object `ZpMedia.translations` groups methods
     * manipulating `ZpMediaTranslation` instances related to `ZpMedia`.
     *
     * Call {@link lbServices.ZpMedia#translations ZpMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpMedia#translations
             * @methodOf lbServices.ZpMedia
             *
             * @description
             *
             * Queries translations of ZpMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::get::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#count
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Counts translations of ZpMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::count::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#create
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::create::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#createMany
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::createMany::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#destroyAll
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::delete::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#destroyById
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::destroyById::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#findById
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::findById::ZpMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMedia.translations#updateById
             * @methodOf lbServices.ZpMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpMediaTranslation");
          var action = TargetResource["::updateById::ZpMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpMediaTranslation
 * @header lbServices.ZpMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#create
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#createMany
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#upsert
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#exists
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#findById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#find
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#findOne
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#updateAll
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#deleteById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#count
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#createChangeStream
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.findById() instead.
            "::findById::ZpMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.destroyById() instead.
            "::destroyById::ZpMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.updateById() instead.
            "::updateById::ZpMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMedia.translations() instead.
            "::get::ZpMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpMedia.translations.create() instead.
            "::create::ZpMedia::translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.createMany() instead.
            "::createMany::ZpMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMedia.translations.destroyAll() instead.
            "::delete::ZpMedia::translations": {
              url: urlBase + "/ZpMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMedia.translations.count() instead.
            "::count::ZpMedia::translations": {
              url: urlBase + "/ZpMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#updateOrCreate
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#update
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#destroyById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaTranslation#removeById
             * @methodOf lbServices.ZpMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpMediaTranslation#modelName
        * @propertyOf lbServices.ZpMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpMediaTranslation`.
        */
        R.modelName = "ZpMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikelMedia
 * @header lbServices.ZpArtikelMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikelMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikelMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikelMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpArtikelMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikelMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#create
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikelMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#createMany
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#upsert
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikelMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#exists
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikelMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#findById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikelMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#find
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#findOne
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikelMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#updateAll
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikelMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#deleteById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikelMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#count
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikelMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikelMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#createChangeStream
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikelMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.items.findById() instead.
            "::findById::ZpArtikel::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.items.destroyById() instead.
            "::destroyById::ZpArtikel::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.items.updateById() instead.
            "::updateById::ZpArtikel::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikels/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikel.items() instead.
            "::get::ZpArtikel::items": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/items",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikel.items.create() instead.
            "::create::ZpArtikel::items": {
              url: urlBase + "/ZpArtikels/:id/items",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.items.createMany() instead.
            "::createMany::ZpArtikel::items": {
              isArray: true,
              url: urlBase + "/ZpArtikels/:id/items",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikel.items.destroyAll() instead.
            "::delete::ZpArtikel::items": {
              url: urlBase + "/ZpArtikels/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikel.items.count() instead.
            "::count::ZpArtikel::items": {
              url: urlBase + "/ZpArtikels/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#updateOrCreate
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#update
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#destroyById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#removeById
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikelMedia#modelName
        * @propertyOf lbServices.ZpArtikelMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikelMedia`.
        */
        R.modelName = "ZpArtikelMedia";

    /**
     * @ngdoc object
     * @name lbServices.ZpArtikelMedia.translations
     * @header lbServices.ZpArtikelMedia.translations
     * @object
     * @description
     *
     * The object `ZpArtikelMedia.translations` groups methods
     * manipulating `ZpArtikelMediaTranslation` instances related to `ZpArtikelMedia`.
     *
     * Call {@link lbServices.ZpArtikelMedia#translations ZpArtikelMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia#translations
             * @methodOf lbServices.ZpArtikelMedia
             *
             * @description
             *
             * Queries translations of ZpArtikelMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::get::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#count
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Counts translations of ZpArtikelMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::count::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#create
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::create::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#createMany
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::createMany::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#destroyAll
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::delete::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#destroyById
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::destroyById::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#findById
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::findById::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMedia.translations#updateById
             * @methodOf lbServices.ZpArtikelMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpArtikelMediaTranslation");
          var action = TargetResource["::updateById::ZpArtikelMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpArtikelMediaTranslation
 * @header lbServices.ZpArtikelMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpArtikelMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpArtikelMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpArtikelMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#create
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#createMany
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#upsert
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#exists
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#findById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#find
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpArtikelMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#findOne
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpArtikelMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#updateAll
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpArtikelMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#deleteById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#count
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpArtikelMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpArtikelMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#createChangeStream
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpArtikelMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.findById() instead.
            "::findById::ZpArtikelMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyById() instead.
            "::destroyById::ZpArtikelMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.updateById() instead.
            "::updateById::ZpArtikelMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpArtikelMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpArtikelMedia.translations() instead.
            "::get::ZpArtikelMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.create() instead.
            "::create::ZpArtikelMedia::translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.createMany() instead.
            "::createMany::ZpArtikelMedia::translations": {
              isArray: true,
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.destroyAll() instead.
            "::delete::ZpArtikelMedia::translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpArtikelMedia.translations.count() instead.
            "::count::ZpArtikelMedia::translations": {
              url: urlBase + "/ZpArtikelMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#updateOrCreate
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#update
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#destroyById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpArtikelMediaTranslation#removeById
             * @methodOf lbServices.ZpArtikelMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpArtikelMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpArtikelMediaTranslation#modelName
        * @propertyOf lbServices.ZpArtikelMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpArtikelMediaTranslation`.
        */
        R.modelName = "ZpArtikelMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Tag
 * @header lbServices.Tag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Tag",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Tags/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Tag#create
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Tags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#createMany
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Tags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#upsert
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Tags",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#exists
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Tags/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#findById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Tags/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#find
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Tags",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#findOne
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Tags/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#updateAll
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Tags/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#deleteById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Tags/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#count
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Tags/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#prototype$updateAttributes
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Tags/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tag#createChangeStream
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Tags/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Tag#updateOrCreate
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Tag#update
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Tag#destroyById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Tag#removeById
             * @methodOf lbServices.Tag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tag` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Tag#modelName
        * @propertyOf lbServices.Tag
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Tag`.
        */
        R.modelName = "Tag";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.File
 * @header lbServices.File
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `File` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "File",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Files/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.File#create
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Files",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#createMany
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Files",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#upsert
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Files",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#exists
             * @methodOf lbServices.File
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Files/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#findById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Files/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#find
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#findOne
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Files/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#updateAll
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Files/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#deleteById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Files/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#count
             * @methodOf lbServices.File
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Files/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#prototype$updateAttributes
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Files/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#createChangeStream
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Files/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.File#updateOrCreate
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.File#update
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.File#destroyById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.File#removeById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.File#modelName
        * @propertyOf lbServices.File
        * @description
        * The name of the model represented by this $resource,
        * i.e. `File`.
        */
        R.modelName = "File";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FileTag
 * @header lbServices.FileTag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FileTag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FileTag",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/FileTags/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.FileTag#create
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FileTags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#createMany
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FileTags",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#upsert
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FileTags",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#exists
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FileTags/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#findById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FileTags/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#find
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FileTags",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#findOne
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FileTags/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#updateAll
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/FileTags/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#deleteById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FileTags/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#count
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FileTags/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#prototype$updateAttributes
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FileTags/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileTag#createChangeStream
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FileTags/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FileTag#updateOrCreate
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FileTag#update
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FileTag#destroyById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FileTag#removeById
             * @methodOf lbServices.FileTag
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileTag` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.FileTag#modelName
        * @propertyOf lbServices.FileTag
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FileTag`.
        */
        R.modelName = "FileTag";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbContent
 * @header lbServices.EbContent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbContent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbContent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbContents/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbContent.contents.findById() instead.
            "prototype$__findById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.contents.destroyById() instead.
            "prototype$__destroyById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.contents.updateById() instead.
            "prototype$__updateById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.contents() instead.
            "prototype$__get__contents": {
              isArray: true,
              url: urlBase + "/EbContents/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use EbContent.contents.create() instead.
            "prototype$__create__contents": {
              url: urlBase + "/EbContents/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbContent.contents.destroyAll() instead.
            "prototype$__delete__contents": {
              url: urlBase + "/EbContents/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.contents.count() instead.
            "prototype$__count__contents": {
              url: urlBase + "/EbContents/:id/contents/count",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbContents/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbContents/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/EbContents/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/EbContents/:id/medias/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#create
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbContents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#createMany
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbContents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#upsert
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbContents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#exists
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbContents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#findById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbContents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#find
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbContents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#findOne
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbContents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#updateAll
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbContents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#deleteById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbContents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#count
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbContents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#prototype$updateAttributes
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbContents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContent#createChangeStream
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbContents/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbContent.contents.findById() instead.
            "::findById::EbContent::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.contents.destroyById() instead.
            "::destroyById::EbContent::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.contents.updateById() instead.
            "::updateById::EbContent::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.contents() instead.
            "::get::EbContent::contents": {
              isArray: true,
              url: urlBase + "/EbContents/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use EbContent.contents.create() instead.
            "::create::EbContent::contents": {
              url: urlBase + "/EbContents/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbContent.contents.createMany() instead.
            "::createMany::EbContent::contents": {
              isArray: true,
              url: urlBase + "/EbContents/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbContent.contents.destroyAll() instead.
            "::delete::EbContent::contents": {
              url: urlBase + "/EbContents/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.contents.count() instead.
            "::count::EbContent::contents": {
              url: urlBase + "/EbContents/:id/contents/count",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.findById() instead.
            "::findById::EbCategory::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.destroyById() instead.
            "::destroyById::EbCategory::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.updateById() instead.
            "::updateById::EbCategory::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.contents() instead.
            "::get::EbCategory::contents": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.create() instead.
            "::create::EbCategory::contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.createMany() instead.
            "::createMany::EbCategory::contents": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.destroyAll() instead.
            "::delete::EbCategory::contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.count() instead.
            "::count::EbCategory::contents": {
              url: urlBase + "/EbCategories/:id/contents/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbContent#updateOrCreate
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbContent#update
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbContent#destroyById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbContent#removeById
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbContent#modelName
        * @propertyOf lbServices.EbContent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbContent`.
        */
        R.modelName = "EbContent";

    /**
     * @ngdoc object
     * @name lbServices.EbContent.contents
     * @header lbServices.EbContent.contents
     * @object
     * @description
     *
     * The object `EbContent.contents` groups methods
     * manipulating `EbContent` instances related to `EbContent`.
     *
     * Call {@link lbServices.EbContent#contents EbContent.contents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbContent#contents
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Queries contents of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::get::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#count
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Counts contents of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contents.count = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::count::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#create
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.create = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::create::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#createMany
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.createMany = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::createMany::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#destroyAll
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Deletes all contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyAll = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::delete::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#destroyById
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Delete a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::destroyById::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#findById
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Find a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.findById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::findById::EbContent::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.contents#updateById
             * @methodOf lbServices.EbContent.contents
             *
             * @description
             *
             * Update a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.updateById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::updateById::EbContent::contents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EbContent.translations
     * @header lbServices.EbContent.translations
     * @object
     * @description
     *
     * The object `EbContent.translations` groups methods
     * manipulating `EbContentTranslation` instances related to `EbContent`.
     *
     * Call {@link lbServices.EbContent#translations EbContent.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbContent#translations
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Queries translations of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::get::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#count
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Counts translations of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::count::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#create
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::create::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#createMany
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::createMany::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#destroyAll
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::delete::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#destroyById
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::destroyById::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#findById
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::findById::EbContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.translations#updateById
             * @methodOf lbServices.EbContent.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbContentTranslation");
          var action = TargetResource["::updateById::EbContent::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EbContent.medias
     * @header lbServices.EbContent.medias
     * @object
     * @description
     *
     * The object `EbContent.medias` groups methods
     * manipulating `EbMedia` instances related to `EbContent`.
     *
     * Call {@link lbServices.EbContent#medias EbContent.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbContent#medias
             * @methodOf lbServices.EbContent
             *
             * @description
             *
             * Queries medias of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::get::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#count
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Counts medias of EbContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::count::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#create
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::create::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#createMany
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::createMany::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#destroyAll
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::delete::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#destroyById
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::destroyById::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#findById
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::findById::EbContent::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbContent.medias#updateById
             * @methodOf lbServices.EbContent.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::updateById::EbContent::medias"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbCategoryTranslation
 * @header lbServices.EbCategoryTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbCategoryTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbCategoryTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbCategoryTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#create
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbCategoryTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#createMany
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbCategoryTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#upsert
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbCategoryTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#exists
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbCategoryTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#findById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbCategoryTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#find
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbCategoryTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#findOne
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbCategoryTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#updateAll
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbCategoryTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#deleteById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbCategoryTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#count
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbCategoryTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbCategoryTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#createChangeStream
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbCategoryTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.findById() instead.
            "::findById::EbCategory::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.destroyById() instead.
            "::destroyById::EbCategory::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.updateById() instead.
            "::updateById::EbCategory::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.translations() instead.
            "::get::EbCategory::translations": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.create() instead.
            "::create::EbCategory::translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.createMany() instead.
            "::createMany::EbCategory::translations": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.destroyAll() instead.
            "::delete::EbCategory::translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.count() instead.
            "::count::EbCategory::translations": {
              url: urlBase + "/EbCategories/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#updateOrCreate
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#update
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#destroyById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategoryTranslation#removeById
             * @methodOf lbServices.EbCategoryTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbCategoryTranslation#modelName
        * @propertyOf lbServices.EbCategoryTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbCategoryTranslation`.
        */
        R.modelName = "EbCategoryTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbCategory
 * @header lbServices.EbCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbCategory.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.contents.findById() instead.
            "prototype$__findById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.destroyById() instead.
            "prototype$__destroyById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.updateById() instead.
            "prototype$__updateById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbCategories/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbCategories/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents() instead.
            "prototype$__get__contents": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.contents.create() instead.
            "prototype$__create__contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.contents.destroyAll() instead.
            "prototype$__delete__contents": {
              url: urlBase + "/EbCategories/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.contents.count() instead.
            "prototype$__count__contents": {
              url: urlBase + "/EbCategories/:id/contents/count",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/EbCategories/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/EbCategories/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/EbCategories/:id/medias/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#create
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#createMany
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#upsert
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbCategories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#exists
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#findById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#find
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#findOne
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#updateAll
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#deleteById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#count
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#prototype$updateAttributes
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbCategories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#createChangeStream
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbCategories/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbCategory#updateOrCreate
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#update
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#destroyById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbCategory#removeById
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbCategory#modelName
        * @propertyOf lbServices.EbCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbCategory`.
        */
        R.modelName = "EbCategory";

    /**
     * @ngdoc object
     * @name lbServices.EbCategory.translations
     * @header lbServices.EbCategory.translations
     * @object
     * @description
     *
     * The object `EbCategory.translations` groups methods
     * manipulating `EbCategoryTranslation` instances related to `EbCategory`.
     *
     * Call {@link lbServices.EbCategory#translations EbCategory.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbCategory#translations
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Queries translations of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::get::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#count
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Counts translations of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::count::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#create
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::create::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#createMany
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::createMany::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#destroyAll
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::delete::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#destroyById
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::destroyById::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#findById
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::findById::EbCategory::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.translations#updateById
             * @methodOf lbServices.EbCategory.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbCategoryTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbCategoryTranslation");
          var action = TargetResource["::updateById::EbCategory::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EbCategory.contents
     * @header lbServices.EbCategory.contents
     * @object
     * @description
     *
     * The object `EbCategory.contents` groups methods
     * manipulating `EbContent` instances related to `EbCategory`.
     *
     * Call {@link lbServices.EbCategory#contents EbCategory.contents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbCategory#contents
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Queries contents of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::get::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#count
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Counts contents of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contents.count = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::count::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#create
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.create = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::create::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#createMany
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.createMany = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::createMany::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#destroyAll
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Deletes all contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyAll = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::delete::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#destroyById
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Delete a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::destroyById::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#findById
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Find a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.findById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::findById::EbCategory::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.contents#updateById
             * @methodOf lbServices.EbCategory.contents
             *
             * @description
             *
             * Update a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContent` object.)
             * </em>
             */
        R.contents.updateById = function() {
          var TargetResource = $injector.get("EbContent");
          var action = TargetResource["::updateById::EbCategory::contents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EbCategory.medias
     * @header lbServices.EbCategory.medias
     * @object
     * @description
     *
     * The object `EbCategory.medias` groups methods
     * manipulating `EbMedia` instances related to `EbCategory`.
     *
     * Call {@link lbServices.EbCategory#medias EbCategory.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbCategory#medias
             * @methodOf lbServices.EbCategory
             *
             * @description
             *
             * Queries medias of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::get::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#count
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Counts medias of EbCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::count::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#create
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::create::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#createMany
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::createMany::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#destroyAll
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::delete::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#destroyById
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::destroyById::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#findById
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::findById::EbCategory::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbCategory.medias#updateById
             * @methodOf lbServices.EbCategory.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("EbMedia");
          var action = TargetResource["::updateById::EbCategory::medias"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbContentTranslation
 * @header lbServices.EbContentTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbContentTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbContentTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbContentTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#create
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbContentTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#createMany
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbContentTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#upsert
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbContentTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#exists
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbContentTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#findById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbContentTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#find
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbContentTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#findOne
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbContentTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#updateAll
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbContentTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#deleteById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbContentTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#count
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbContentTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbContentTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#createChangeStream
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbContentTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.findById() instead.
            "::findById::EbContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.destroyById() instead.
            "::destroyById::EbContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.updateById() instead.
            "::updateById::EbContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.translations() instead.
            "::get::EbContent::translations": {
              isArray: true,
              url: urlBase + "/EbContents/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbContent.translations.create() instead.
            "::create::EbContent::translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.createMany() instead.
            "::createMany::EbContent::translations": {
              isArray: true,
              url: urlBase + "/EbContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbContent.translations.destroyAll() instead.
            "::delete::EbContent::translations": {
              url: urlBase + "/EbContents/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.translations.count() instead.
            "::count::EbContent::translations": {
              url: urlBase + "/EbContents/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#updateOrCreate
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#update
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#destroyById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbContentTranslation#removeById
             * @methodOf lbServices.EbContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbContentTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbContentTranslation#modelName
        * @propertyOf lbServices.EbContentTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbContentTranslation`.
        */
        R.modelName = "EbContentTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbMedia
 * @header lbServices.EbMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#create
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#createMany
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#upsert
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#exists
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#findById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#find
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#findOne
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#updateAll
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#deleteById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#count
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#prototype$updateAttributes
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#createChangeStream
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.findById() instead.
            "::findById::EbContent::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.destroyById() instead.
            "::destroyById::EbContent::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.updateById() instead.
            "::updateById::EbContent::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbContents/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbContent.medias() instead.
            "::get::EbContent::medias": {
              isArray: true,
              url: urlBase + "/EbContents/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use EbContent.medias.create() instead.
            "::create::EbContent::medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.createMany() instead.
            "::createMany::EbContent::medias": {
              isArray: true,
              url: urlBase + "/EbContents/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbContent.medias.destroyAll() instead.
            "::delete::EbContent::medias": {
              url: urlBase + "/EbContents/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use EbContent.medias.count() instead.
            "::count::EbContent::medias": {
              url: urlBase + "/EbContents/:id/medias/count",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.medias.findById() instead.
            "::findById::EbCategory::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.medias.destroyById() instead.
            "::destroyById::EbCategory::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.medias.updateById() instead.
            "::updateById::EbCategory::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbCategories/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbCategory.medias() instead.
            "::get::EbCategory::medias": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use EbCategory.medias.create() instead.
            "::create::EbCategory::medias": {
              url: urlBase + "/EbCategories/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.medias.createMany() instead.
            "::createMany::EbCategory::medias": {
              isArray: true,
              url: urlBase + "/EbCategories/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use EbCategory.medias.destroyAll() instead.
            "::delete::EbCategory::medias": {
              url: urlBase + "/EbCategories/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use EbCategory.medias.count() instead.
            "::count::EbCategory::medias": {
              url: urlBase + "/EbCategories/:id/medias/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbMedia#updateOrCreate
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#update
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#destroyById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbMedia#removeById
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbMedia#modelName
        * @propertyOf lbServices.EbMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbMedia`.
        */
        R.modelName = "EbMedia";

    /**
     * @ngdoc object
     * @name lbServices.EbMedia.translations
     * @header lbServices.EbMedia.translations
     * @object
     * @description
     *
     * The object `EbMedia.translations` groups methods
     * manipulating `EbMediaTranslation` instances related to `EbMedia`.
     *
     * Call {@link lbServices.EbMedia#translations EbMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbMedia#translations
             * @methodOf lbServices.EbMedia
             *
             * @description
             *
             * Queries translations of EbMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::get::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#count
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Counts translations of EbMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::count::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#create
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::create::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#createMany
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::createMany::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#destroyAll
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::delete::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#destroyById
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::destroyById::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#findById
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::findById::EbMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbMedia.translations#updateById
             * @methodOf lbServices.EbMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbMediaTranslation");
          var action = TargetResource["::updateById::EbMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbMediaTranslation
 * @header lbServices.EbMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#create
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#createMany
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#upsert
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#exists
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#findById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#find
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#findOne
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#updateAll
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#deleteById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#count
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#createChangeStream
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.findById() instead.
            "::findById::EbMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.destroyById() instead.
            "::destroyById::EbMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.updateById() instead.
            "::updateById::EbMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbMedia.translations() instead.
            "::get::EbMedia::translations": {
              isArray: true,
              url: urlBase + "/EbMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbMedia.translations.create() instead.
            "::create::EbMedia::translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.createMany() instead.
            "::createMany::EbMedia::translations": {
              isArray: true,
              url: urlBase + "/EbMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbMedia.translations.destroyAll() instead.
            "::delete::EbMedia::translations": {
              url: urlBase + "/EbMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbMedia.translations.count() instead.
            "::count::EbMedia::translations": {
              url: urlBase + "/EbMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#updateOrCreate
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#update
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#destroyById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbMediaTranslation#removeById
             * @methodOf lbServices.EbMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbMediaTranslation#modelName
        * @propertyOf lbServices.EbMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbMediaTranslation`.
        */
        R.modelName = "EbMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AufEinenBlick
 * @header lbServices.AufEinenBlick
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AufEinenBlick` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AufEinenBlick",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AufEinenBlick/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AufEinenBlick#getContentData
             * @methodOf lbServices.AufEinenBlick
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AufEinenBlick` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/AufEinenBlick/contentData",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.AufEinenBlick#modelName
        * @propertyOf lbServices.AufEinenBlick
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AufEinenBlick`.
        */
        R.modelName = "AufEinenBlick";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZukunftProjekte
 * @header lbServices.ZukunftProjekte
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZukunftProjekte` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZukunftProjekte",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZukunftProjekte/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#getArticles
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `stationId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "getArticles": {
              url: urlBase + "/ZukunftProjekte/articles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZukunftProjekte#getMedias
             * @methodOf lbServices.ZukunftProjekte
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `stationId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZukunftProjekte` object.)
             * </em>
             */
            "getMedias": {
              url: urlBase + "/ZukunftProjekte/medias",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.ZukunftProjekte#modelName
        * @propertyOf lbServices.ZukunftProjekte
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZukunftProjekte`.
        */
        R.modelName = "ZukunftProjekte";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilft
 * @header lbServices.SvZfhilft
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilft` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilft",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilfts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvZfhilft.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.projects.findById() instead.
            "prototype$__findById__projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyById() instead.
            "prototype$__destroyById__projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.updateById() instead.
            "prototype$__updateById__projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvZfhilfts/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/SvZfhilfts/:id/medias/count",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects() instead.
            "prototype$__get__projects": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.create() instead.
            "prototype$__create__projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyAll() instead.
            "prototype$__delete__projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.count() instead.
            "prototype$__count__projects": {
              url: urlBase + "/SvZfhilfts/:id/projects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#create
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilfts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#createMany
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilfts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#upsert
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilfts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#exists
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilfts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#findById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilfts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#find
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilfts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#findOne
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilfts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#updateAll
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilfts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#deleteById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilfts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#count
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilfts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilfts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#createChangeStream
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilfts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#getContentData
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvZfhilfts/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#updateOrCreate
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#update
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#destroyById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#removeById
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilft` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilft#modelName
        * @propertyOf lbServices.SvZfhilft
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilft`.
        */
        R.modelName = "SvZfhilft";

    /**
     * @ngdoc object
     * @name lbServices.SvZfhilft.translations
     * @header lbServices.SvZfhilft.translations
     * @object
     * @description
     *
     * The object `SvZfhilft.translations` groups methods
     * manipulating `SvZfhilftTranslation` instances related to `SvZfhilft`.
     *
     * Call {@link lbServices.SvZfhilft#translations SvZfhilft.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#translations
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Queries translations of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::get::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#count
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Counts translations of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::count::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#create
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::create::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#createMany
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::createMany::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#destroyAll
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::delete::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#destroyById
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::destroyById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#findById
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::findById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.translations#updateById
             * @methodOf lbServices.SvZfhilft.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftTranslation");
          var action = TargetResource["::updateById::SvZfhilft::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvZfhilft.medias
     * @header lbServices.SvZfhilft.medias
     * @object
     * @description
     *
     * The object `SvZfhilft.medias` groups methods
     * manipulating `SvZfhilftMedia` instances related to `SvZfhilft`.
     *
     * Call {@link lbServices.SvZfhilft#medias SvZfhilft.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#medias
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Queries medias of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::get::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#count
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Counts medias of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::count::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#create
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::create::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#createMany
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::createMany::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#destroyAll
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::delete::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#destroyById
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::destroyById::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#findById
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::findById::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.medias#updateById
             * @methodOf lbServices.SvZfhilft.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftMedia");
          var action = TargetResource["::updateById::SvZfhilft::medias"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvZfhilft.projects
     * @header lbServices.SvZfhilft.projects
     * @object
     * @description
     *
     * The object `SvZfhilft.projects` groups methods
     * manipulating `SvZfhilftProject` instances related to `SvZfhilft`.
     *
     * Call {@link lbServices.SvZfhilft#projects SvZfhilft.projects()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft#projects
             * @methodOf lbServices.SvZfhilft
             *
             * @description
             *
             * Queries projects of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R.projects = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::get::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#count
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Counts projects of SvZfhilft.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.projects.count = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::count::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#create
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Creates a new instance in projects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R.projects.create = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::create::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#createMany
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Creates a new instance in projects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R.projects.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::createMany::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#destroyAll
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Deletes all projects of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.projects.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::delete::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#destroyById
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Delete a related item by id for projects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for projects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.projects.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::destroyById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#findById
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Find a related item by id for projects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for projects
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R.projects.findById = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::findById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilft.projects#updateById
             * @methodOf lbServices.SvZfhilft.projects
             *
             * @description
             *
             * Update a related item by id for projects.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for projects
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R.projects.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftProject");
          var action = TargetResource["::updateById::SvZfhilft::projects"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftTranslation
 * @header lbServices.SvZfhilftTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#create
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#createMany
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#upsert
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#exists
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#findById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#find
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#findOne
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#updateAll
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#deleteById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#count
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#createChangeStream
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.findById() instead.
            "::findById::SvZfhilft::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyById() instead.
            "::destroyById::SvZfhilft::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.updateById() instead.
            "::updateById::SvZfhilft::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.translations() instead.
            "::get::SvZfhilft::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.translations.create() instead.
            "::create::SvZfhilft::translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.createMany() instead.
            "::createMany::SvZfhilft::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.translations.destroyAll() instead.
            "::delete::SvZfhilft::translations": {
              url: urlBase + "/SvZfhilfts/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.translations.count() instead.
            "::count::SvZfhilft::translations": {
              url: urlBase + "/SvZfhilfts/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#updateOrCreate
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#update
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#destroyById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftTranslation#removeById
             * @methodOf lbServices.SvZfhilftTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftTranslation#modelName
        * @propertyOf lbServices.SvZfhilftTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftTranslation`.
        */
        R.modelName = "SvZfhilftTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftMedia
 * @header lbServices.SvZfhilftMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvZfhilftMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvZfhilftMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#create
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#createMany
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#upsert
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#exists
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#findById
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#find
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#findOne
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#updateAll
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#deleteById
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#count
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#createChangeStream
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.medias.findById() instead.
            "::findById::SvZfhilft::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.medias.destroyById() instead.
            "::destroyById::SvZfhilft::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.medias.updateById() instead.
            "::updateById::SvZfhilft::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.medias() instead.
            "::get::SvZfhilft::medias": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.medias.create() instead.
            "::create::SvZfhilft::medias": {
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.medias.createMany() instead.
            "::createMany::SvZfhilft::medias": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.medias.destroyAll() instead.
            "::delete::SvZfhilft::medias": {
              url: urlBase + "/SvZfhilfts/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.medias.count() instead.
            "::count::SvZfhilft::medias": {
              url: urlBase + "/SvZfhilfts/:id/medias/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#updateOrCreate
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#update
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#destroyById
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#removeById
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftMedia#modelName
        * @propertyOf lbServices.SvZfhilftMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftMedia`.
        */
        R.modelName = "SvZfhilftMedia";

    /**
     * @ngdoc object
     * @name lbServices.SvZfhilftMedia.translations
     * @header lbServices.SvZfhilftMedia.translations
     * @object
     * @description
     *
     * The object `SvZfhilftMedia.translations` groups methods
     * manipulating `SvZfhilftMediaTranslation` instances related to `SvZfhilftMedia`.
     *
     * Call {@link lbServices.SvZfhilftMedia#translations SvZfhilftMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia#translations
             * @methodOf lbServices.SvZfhilftMedia
             *
             * @description
             *
             * Queries translations of SvZfhilftMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::get::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#count
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Counts translations of SvZfhilftMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::count::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#create
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::create::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#createMany
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::createMany::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#destroyAll
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::delete::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#destroyById
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::destroyById::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#findById
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::findById::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMedia.translations#updateById
             * @methodOf lbServices.SvZfhilftMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftMediaTranslation");
          var action = TargetResource["::updateById::SvZfhilftMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftProject
 * @header lbServices.SvZfhilftProject
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftProject` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftProject",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftProjects/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvZfhilftProject.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftProject.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftProject.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvZfhilftProjects/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/SvZfhilftProjects/:id/medias/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#create
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftProjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#createMany
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#upsert
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftProjects",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#exists
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftProjects/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#findById
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftProjects/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#find
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#findOne
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftProjects/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#updateAll
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftProjects/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#deleteById
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftProjects/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#count
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftProjects/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftProjects/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#createChangeStream
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftProjects/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.findById() instead.
            "::findById::SvZfhilft::projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyById() instead.
            "::destroyById::SvZfhilft::projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.updateById() instead.
            "::updateById::SvZfhilft::projects": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilfts/:id/projects/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilft.projects() instead.
            "::get::SvZfhilft::projects": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilft.projects.create() instead.
            "::create::SvZfhilft::projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.createMany() instead.
            "::createMany::SvZfhilft::projects": {
              isArray: true,
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilft.projects.destroyAll() instead.
            "::delete::SvZfhilft::projects": {
              url: urlBase + "/SvZfhilfts/:id/projects",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilft.projects.count() instead.
            "::count::SvZfhilft::projects": {
              url: urlBase + "/SvZfhilfts/:id/projects/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#updateOrCreate
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#update
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#destroyById
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#removeById
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProject` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftProject#modelName
        * @propertyOf lbServices.SvZfhilftProject
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftProject`.
        */
        R.modelName = "SvZfhilftProject";

    /**
     * @ngdoc object
     * @name lbServices.SvZfhilftProject.translations
     * @header lbServices.SvZfhilftProject.translations
     * @object
     * @description
     *
     * The object `SvZfhilftProject.translations` groups methods
     * manipulating `SvZfhilftProjectTranslation` instances related to `SvZfhilftProject`.
     *
     * Call {@link lbServices.SvZfhilftProject#translations SvZfhilftProject.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#translations
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Queries translations of SvZfhilftProject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::get::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#count
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Counts translations of SvZfhilftProject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::count::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#create
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::create::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#createMany
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::createMany::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#destroyAll
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::delete::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#destroyById
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::destroyById::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#findById
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::findById::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.translations#updateById
             * @methodOf lbServices.SvZfhilftProject.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectTranslation");
          var action = TargetResource["::updateById::SvZfhilftProject::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvZfhilftProject.medias
     * @header lbServices.SvZfhilftProject.medias
     * @object
     * @description
     *
     * The object `SvZfhilftProject.medias` groups methods
     * manipulating `SvZfhilftProjectMedia` instances related to `SvZfhilftProject`.
     *
     * Call {@link lbServices.SvZfhilftProject#medias SvZfhilftProject.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject#medias
             * @methodOf lbServices.SvZfhilftProject
             *
             * @description
             *
             * Queries medias of SvZfhilftProject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::get::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#count
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Counts medias of SvZfhilftProject.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::count::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#create
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::create::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#createMany
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::createMany::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#destroyAll
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::delete::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#destroyById
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::destroyById::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#findById
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::findById::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProject.medias#updateById
             * @methodOf lbServices.SvZfhilftProject.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMedia");
          var action = TargetResource["::updateById::SvZfhilftProject::medias"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftProjectTranslation
 * @header lbServices.SvZfhilftProjectTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftProjectTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftProjectTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftProjectTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#create
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftProjectTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#createMany
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#upsert
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftProjectTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#exists
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftProjectTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#findById
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftProjectTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#find
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#findOne
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftProjectTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#updateAll
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftProjectTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#deleteById
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftProjectTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#count
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftProjectTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftProjectTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#createChangeStream
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftProjectTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.translations.findById() instead.
            "::findById::SvZfhilftProject::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.translations.destroyById() instead.
            "::destroyById::SvZfhilftProject::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.translations.updateById() instead.
            "::updateById::SvZfhilftProject::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftProject.translations() instead.
            "::get::SvZfhilftProject::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.translations.create() instead.
            "::create::SvZfhilftProject::translations": {
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.translations.createMany() instead.
            "::createMany::SvZfhilftProject::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.translations.destroyAll() instead.
            "::delete::SvZfhilftProject::translations": {
              url: urlBase + "/SvZfhilftProjects/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.translations.count() instead.
            "::count::SvZfhilftProject::translations": {
              url: urlBase + "/SvZfhilftProjects/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#updateOrCreate
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#update
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#destroyById
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectTranslation#removeById
             * @methodOf lbServices.SvZfhilftProjectTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftProjectTranslation#modelName
        * @propertyOf lbServices.SvZfhilftProjectTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftProjectTranslation`.
        */
        R.modelName = "SvZfhilftProjectTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftMediaTranslation
 * @header lbServices.SvZfhilftMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#create
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#createMany
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#upsert
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#exists
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#findById
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#find
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#findOne
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#updateAll
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#deleteById
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#count
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#createChangeStream
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.findById() instead.
            "::findById::SvZfhilftMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.destroyById() instead.
            "::destroyById::SvZfhilftMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.updateById() instead.
            "::updateById::SvZfhilftMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftMedia.translations() instead.
            "::get::SvZfhilftMedia::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.create() instead.
            "::create::SvZfhilftMedia::translations": {
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.createMany() instead.
            "::createMany::SvZfhilftMedia::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.destroyAll() instead.
            "::delete::SvZfhilftMedia::translations": {
              url: urlBase + "/SvZfhilftMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftMedia.translations.count() instead.
            "::count::SvZfhilftMedia::translations": {
              url: urlBase + "/SvZfhilftMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#updateOrCreate
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#update
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#destroyById
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftMediaTranslation#removeById
             * @methodOf lbServices.SvZfhilftMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftMediaTranslation#modelName
        * @propertyOf lbServices.SvZfhilftMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftMediaTranslation`.
        */
        R.modelName = "SvZfhilftMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvStipendiaten
 * @header lbServices.SvStipendiaten
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvStipendiaten` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvStipendiaten",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvStipendiatens/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvStipendiaten.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.findById() instead.
            "prototype$__findById__stipendiats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/stipendiats/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.destroyById() instead.
            "prototype$__destroyById__stipendiats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/stipendiats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.updateById() instead.
            "prototype$__updateById__stipendiats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/stipendiats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStipendiaten.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvStipendiatens/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats() instead.
            "prototype$__get__stipendiats": {
              isArray: true,
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.create() instead.
            "prototype$__create__stipendiats": {
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.destroyAll() instead.
            "prototype$__delete__stipendiats": {
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.count() instead.
            "prototype$__count__stipendiats": {
              url: urlBase + "/SvStipendiatens/:id/stipendiats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#create
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvStipendiatens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#createMany
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvStipendiatens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#upsert
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvStipendiatens",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#exists
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvStipendiatens/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#findById
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvStipendiatens/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#find
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvStipendiatens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#findOne
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvStipendiatens/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#updateAll
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvStipendiatens/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#deleteById
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvStipendiatens/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#count
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvStipendiatens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#prototype$updateAttributes
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvStipendiatens/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#createChangeStream
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvStipendiatens/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#getContentData
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvStipendiatens/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#updateOrCreate
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#update
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#destroyById
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#removeById
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiaten` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvStipendiaten#modelName
        * @propertyOf lbServices.SvStipendiaten
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvStipendiaten`.
        */
        R.modelName = "SvStipendiaten";

    /**
     * @ngdoc object
     * @name lbServices.SvStipendiaten.translations
     * @header lbServices.SvStipendiaten.translations
     * @object
     * @description
     *
     * The object `SvStipendiaten.translations` groups methods
     * manipulating `SvStipendiatenTranslation` instances related to `SvStipendiaten`.
     *
     * Call {@link lbServices.SvStipendiaten#translations SvStipendiaten.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#translations
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Queries translations of SvStipendiaten.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::get::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#count
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Counts translations of SvStipendiaten.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::count::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#create
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::create::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#createMany
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::createMany::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#destroyAll
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::delete::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#destroyById
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::destroyById::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#findById
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::findById::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.translations#updateById
             * @methodOf lbServices.SvStipendiaten.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvStipendiatenTranslation");
          var action = TargetResource["::updateById::SvStipendiaten::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvStipendiaten.stipendiats
     * @header lbServices.SvStipendiaten.stipendiats
     * @object
     * @description
     *
     * The object `SvStipendiaten.stipendiats` groups methods
     * manipulating `SvStipendiat` instances related to `SvStipendiaten`.
     *
     * Call {@link lbServices.SvStipendiaten#stipendiats SvStipendiaten.stipendiats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten#stipendiats
             * @methodOf lbServices.SvStipendiaten
             *
             * @description
             *
             * Queries stipendiats of SvStipendiaten.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R.stipendiats = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::get::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#count
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Counts stipendiats of SvStipendiaten.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.stipendiats.count = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::count::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#create
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Creates a new instance in stipendiats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R.stipendiats.create = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::create::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#createMany
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Creates a new instance in stipendiats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R.stipendiats.createMany = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::createMany::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#destroyAll
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Deletes all stipendiats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stipendiats.destroyAll = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::delete::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#destroyById
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Delete a related item by id for stipendiats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stipendiats
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stipendiats.destroyById = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::destroyById::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#findById
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Find a related item by id for stipendiats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stipendiats
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R.stipendiats.findById = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::findById::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiaten.stipendiats#updateById
             * @methodOf lbServices.SvStipendiaten.stipendiats
             *
             * @description
             *
             * Update a related item by id for stipendiats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stipendiats
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R.stipendiats.updateById = function() {
          var TargetResource = $injector.get("SvStipendiat");
          var action = TargetResource["::updateById::SvStipendiaten::stipendiats"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvStipendiatenTranslation
 * @header lbServices.SvStipendiatenTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvStipendiatenTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvStipendiatenTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvStipendiatenTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#create
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvStipendiatenTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#createMany
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvStipendiatenTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#upsert
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvStipendiatenTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#exists
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvStipendiatenTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#findById
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvStipendiatenTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#find
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvStipendiatenTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#findOne
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvStipendiatenTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#updateAll
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvStipendiatenTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#deleteById
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvStipendiatenTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#count
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvStipendiatenTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvStipendiatenTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#createChangeStream
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvStipendiatenTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.translations.findById() instead.
            "::findById::SvStipendiaten::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.translations.destroyById() instead.
            "::destroyById::SvStipendiaten::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.translations.updateById() instead.
            "::updateById::SvStipendiaten::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStipendiaten.translations() instead.
            "::get::SvStipendiaten::translations": {
              isArray: true,
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.translations.create() instead.
            "::create::SvStipendiaten::translations": {
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.translations.createMany() instead.
            "::createMany::SvStipendiaten::translations": {
              isArray: true,
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.translations.destroyAll() instead.
            "::delete::SvStipendiaten::translations": {
              url: urlBase + "/SvStipendiatens/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.translations.count() instead.
            "::count::SvStipendiaten::translations": {
              url: urlBase + "/SvStipendiatens/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#updateOrCreate
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#update
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#destroyById
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatenTranslation#removeById
             * @methodOf lbServices.SvStipendiatenTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatenTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvStipendiatenTranslation#modelName
        * @propertyOf lbServices.SvStipendiatenTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvStipendiatenTranslation`.
        */
        R.modelName = "SvStipendiatenTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvStipendiatTranslation
 * @header lbServices.SvStipendiatTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvStipendiatTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvStipendiatTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvStipendiatTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#create
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvStipendiatTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#createMany
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvStipendiatTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#upsert
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvStipendiatTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#exists
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvStipendiatTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#findById
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvStipendiatTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#find
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvStipendiatTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#findOne
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvStipendiatTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#updateAll
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvStipendiatTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#deleteById
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvStipendiatTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#count
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvStipendiatTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvStipendiatTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#createChangeStream
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvStipendiatTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiat.translations.findById() instead.
            "::findById::SvStipendiat::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiats/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiat.translations.destroyById() instead.
            "::destroyById::SvStipendiat::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiats/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiat.translations.updateById() instead.
            "::updateById::SvStipendiat::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiats/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStipendiat.translations() instead.
            "::get::SvStipendiat::translations": {
              isArray: true,
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiat.translations.create() instead.
            "::create::SvStipendiat::translations": {
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiat.translations.createMany() instead.
            "::createMany::SvStipendiat::translations": {
              isArray: true,
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiat.translations.destroyAll() instead.
            "::delete::SvStipendiat::translations": {
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiat.translations.count() instead.
            "::count::SvStipendiat::translations": {
              url: urlBase + "/SvStipendiats/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#updateOrCreate
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#update
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#destroyById
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiatTranslation#removeById
             * @methodOf lbServices.SvStipendiatTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvStipendiatTranslation#modelName
        * @propertyOf lbServices.SvStipendiatTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvStipendiatTranslation`.
        */
        R.modelName = "SvStipendiatTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvStipendiat
 * @header lbServices.SvStipendiat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvStipendiat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvStipendiat",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvStipendiats/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvStipendiat.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiats/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiat.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiats/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiat.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiats/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStipendiat.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiat.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiat.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvStipendiats/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiat.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvStipendiats/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#create
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvStipendiats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#createMany
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvStipendiats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#upsert
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvStipendiats",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#exists
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvStipendiats/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#findById
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvStipendiats/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#find
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvStipendiats",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#findOne
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvStipendiats/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#updateAll
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvStipendiats/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#deleteById
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvStipendiats/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#count
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvStipendiats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#prototype$updateAttributes
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvStipendiats/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#createChangeStream
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvStipendiats/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.findById() instead.
            "::findById::SvStipendiaten::stipendiats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/stipendiats/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.destroyById() instead.
            "::destroyById::SvStipendiaten::stipendiats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/stipendiats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.updateById() instead.
            "::updateById::SvStipendiaten::stipendiats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStipendiatens/:id/stipendiats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats() instead.
            "::get::SvStipendiaten::stipendiats": {
              isArray: true,
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "GET",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.create() instead.
            "::create::SvStipendiaten::stipendiats": {
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.createMany() instead.
            "::createMany::SvStipendiaten::stipendiats": {
              isArray: true,
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "POST",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.destroyAll() instead.
            "::delete::SvStipendiaten::stipendiats": {
              url: urlBase + "/SvStipendiatens/:id/stipendiats",
              method: "DELETE",
            },

            // INTERNAL. Use SvStipendiaten.stipendiats.count() instead.
            "::count::SvStipendiaten::stipendiats": {
              url: urlBase + "/SvStipendiatens/:id/stipendiats/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#updateOrCreate
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#update
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#destroyById
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#removeById
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiat` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvStipendiat#modelName
        * @propertyOf lbServices.SvStipendiat
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvStipendiat`.
        */
        R.modelName = "SvStipendiat";

    /**
     * @ngdoc object
     * @name lbServices.SvStipendiat.translations
     * @header lbServices.SvStipendiat.translations
     * @object
     * @description
     *
     * The object `SvStipendiat.translations` groups methods
     * manipulating `SvStipendiatTranslation` instances related to `SvStipendiat`.
     *
     * Call {@link lbServices.SvStipendiat#translations SvStipendiat.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat#translations
             * @methodOf lbServices.SvStipendiat
             *
             * @description
             *
             * Queries translations of SvStipendiat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::get::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#count
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Counts translations of SvStipendiat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::count::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#create
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::create::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#createMany
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::createMany::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#destroyAll
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::delete::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#destroyById
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::destroyById::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#findById
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::findById::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStipendiat.translations#updateById
             * @methodOf lbServices.SvStipendiat.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStipendiatTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvStipendiatTranslation");
          var action = TargetResource["::updateById::SvStipendiat::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvStiftung
 * @header lbServices.SvStiftung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvStiftung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvStiftung",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvStiftung/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvStiftung.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStiftung/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStiftung.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStiftung/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStiftung.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStiftung/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStiftung.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvStiftung/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvStiftung.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvStiftung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStiftung.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvStiftung/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvStiftung.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvStiftung/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#create
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvStiftung",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#createMany
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvStiftung",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#upsert
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvStiftung",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#exists
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvStiftung/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#findById
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvStiftung/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#find
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvStiftung",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#findOne
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvStiftung/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#updateAll
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvStiftung/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#deleteById
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvStiftung/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#count
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvStiftung/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#prototype$updateAttributes
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvStiftung/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#createChangeStream
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvStiftung/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#getContentData
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvStiftung/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#updateOrCreate
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#update
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#destroyById
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#removeById
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftung` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvStiftung#modelName
        * @propertyOf lbServices.SvStiftung
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvStiftung`.
        */
        R.modelName = "SvStiftung";

    /**
     * @ngdoc object
     * @name lbServices.SvStiftung.translations
     * @header lbServices.SvStiftung.translations
     * @object
     * @description
     *
     * The object `SvStiftung.translations` groups methods
     * manipulating `SvStiftungTranslation` instances related to `SvStiftung`.
     *
     * Call {@link lbServices.SvStiftung#translations SvStiftung.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvStiftung#translations
             * @methodOf lbServices.SvStiftung
             *
             * @description
             *
             * Queries translations of SvStiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::get::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#count
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Counts translations of SvStiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::count::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#create
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::create::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#createMany
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::createMany::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#destroyAll
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::delete::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#destroyById
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::destroyById::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#findById
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::findById::SvStiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvStiftung.translations#updateById
             * @methodOf lbServices.SvStiftung.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvStiftungTranslation");
          var action = TargetResource["::updateById::SvStiftung::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvStiftungTranslation
 * @header lbServices.SvStiftungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvStiftungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvStiftungTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvStiftungTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#create
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvStiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#createMany
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvStiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#upsert
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvStiftungTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#exists
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvStiftungTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#findById
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvStiftungTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#find
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvStiftungTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#findOne
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvStiftungTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#updateAll
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvStiftungTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#deleteById
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvStiftungTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#count
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvStiftungTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvStiftungTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#createChangeStream
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvStiftungTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvStiftung.translations.findById() instead.
            "::findById::SvStiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStiftung/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvStiftung.translations.destroyById() instead.
            "::destroyById::SvStiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStiftung/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvStiftung.translations.updateById() instead.
            "::updateById::SvStiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvStiftung/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvStiftung.translations() instead.
            "::get::SvStiftung::translations": {
              isArray: true,
              url: urlBase + "/SvStiftung/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvStiftung.translations.create() instead.
            "::create::SvStiftung::translations": {
              url: urlBase + "/SvStiftung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStiftung.translations.createMany() instead.
            "::createMany::SvStiftung::translations": {
              isArray: true,
              url: urlBase + "/SvStiftung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvStiftung.translations.destroyAll() instead.
            "::delete::SvStiftung::translations": {
              url: urlBase + "/SvStiftung/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvStiftung.translations.count() instead.
            "::count::SvStiftung::translations": {
              url: urlBase + "/SvStiftung/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#updateOrCreate
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#update
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#destroyById
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvStiftungTranslation#removeById
             * @methodOf lbServices.SvStiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvStiftungTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvStiftungTranslation#modelName
        * @propertyOf lbServices.SvStiftungTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvStiftungTranslation`.
        */
        R.modelName = "SvStiftungTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvMusikpreisPersonTranslation
 * @header lbServices.SvMusikpreisPersonTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvMusikpreisPersonTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvMusikpreisPersonTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvMusikpreisPersonTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#create
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvMusikpreisPersonTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#createMany
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPersonTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#upsert
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvMusikpreisPersonTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#exists
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvMusikpreisPersonTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#findById
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvMusikpreisPersonTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#find
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPersonTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#findOne
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvMusikpreisPersonTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#updateAll
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvMusikpreisPersonTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#deleteById
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvMusikpreisPersonTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#count
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvMusikpreisPersonTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvMusikpreisPersonTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#createChangeStream
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvMusikpreisPersonTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.findById() instead.
            "::findById::SvMusikpreisPerson::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreisPeople/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.destroyById() instead.
            "::destroyById::SvMusikpreisPerson::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreisPeople/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.updateById() instead.
            "::updateById::SvMusikpreisPerson::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreisPeople/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations() instead.
            "::get::SvMusikpreisPerson::translations": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.create() instead.
            "::create::SvMusikpreisPerson::translations": {
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.createMany() instead.
            "::createMany::SvMusikpreisPerson::translations": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.destroyAll() instead.
            "::delete::SvMusikpreisPerson::translations": {
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.count() instead.
            "::count::SvMusikpreisPerson::translations": {
              url: urlBase + "/SvMusikpreisPeople/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#updateOrCreate
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#update
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#destroyById
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPersonTranslation#removeById
             * @methodOf lbServices.SvMusikpreisPersonTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvMusikpreisPersonTranslation#modelName
        * @propertyOf lbServices.SvMusikpreisPersonTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvMusikpreisPersonTranslation`.
        */
        R.modelName = "SvMusikpreisPersonTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvMusikpreis
 * @header lbServices.SvMusikpreis
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvMusikpreis` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvMusikpreis",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvMusikpreis/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvMusikpreis.persons.findById() instead.
            "prototype$__findById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/persons/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.persons.destroyById() instead.
            "prototype$__destroyById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/persons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.persons.updateById() instead.
            "prototype$__updateById__persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/persons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvMusikpreis.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvMusikpreis.persons() instead.
            "prototype$__get__persons": {
              isArray: true,
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.persons.create() instead.
            "prototype$__create__persons": {
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.persons.destroyAll() instead.
            "prototype$__delete__persons": {
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.persons.count() instead.
            "prototype$__count__persons": {
              url: urlBase + "/SvMusikpreis/:id/persons/count",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvMusikpreis/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#create
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvMusikpreis",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#createMany
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvMusikpreis",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#upsert
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvMusikpreis",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#exists
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvMusikpreis/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#findById
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvMusikpreis/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#find
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvMusikpreis",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#findOne
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvMusikpreis/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#updateAll
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvMusikpreis/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#deleteById
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvMusikpreis/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#count
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvMusikpreis/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#prototype$updateAttributes
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvMusikpreis/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#createChangeStream
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvMusikpreis/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#getContentData
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvMusikpreis/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#updateOrCreate
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#update
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#destroyById
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#removeById
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreis` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvMusikpreis#modelName
        * @propertyOf lbServices.SvMusikpreis
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvMusikpreis`.
        */
        R.modelName = "SvMusikpreis";

    /**
     * @ngdoc object
     * @name lbServices.SvMusikpreis.persons
     * @header lbServices.SvMusikpreis.persons
     * @object
     * @description
     *
     * The object `SvMusikpreis.persons` groups methods
     * manipulating `SvMusikpreisPerson` instances related to `SvMusikpreis`.
     *
     * Call {@link lbServices.SvMusikpreis#persons SvMusikpreis.persons()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#persons
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Queries persons of SvMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R.persons = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::get::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#count
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Counts persons of SvMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.persons.count = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::count::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#create
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Creates a new instance in persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R.persons.create = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::create::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#createMany
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Creates a new instance in persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R.persons.createMany = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::createMany::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#destroyAll
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Deletes all persons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.persons.destroyAll = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::delete::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#destroyById
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Delete a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.persons.destroyById = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::destroyById::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#findById
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Find a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R.persons.findById = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::findById::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.persons#updateById
             * @methodOf lbServices.SvMusikpreis.persons
             *
             * @description
             *
             * Update a related item by id for persons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for persons
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R.persons.updateById = function() {
          var TargetResource = $injector.get("SvMusikpreisPerson");
          var action = TargetResource["::updateById::SvMusikpreis::persons"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvMusikpreis.translations
     * @header lbServices.SvMusikpreis.translations
     * @object
     * @description
     *
     * The object `SvMusikpreis.translations` groups methods
     * manipulating `SvMusikpreisTranslation` instances related to `SvMusikpreis`.
     *
     * Call {@link lbServices.SvMusikpreis#translations SvMusikpreis.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis#translations
             * @methodOf lbServices.SvMusikpreis
             *
             * @description
             *
             * Queries translations of SvMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::get::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#count
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Counts translations of SvMusikpreis.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::count::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#create
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::create::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#createMany
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::createMany::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#destroyAll
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::delete::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#destroyById
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::destroyById::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#findById
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::findById::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreis.translations#updateById
             * @methodOf lbServices.SvMusikpreis.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvMusikpreisTranslation");
          var action = TargetResource["::updateById::SvMusikpreis::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvMusikpreisPerson
 * @header lbServices.SvMusikpreisPerson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvMusikpreisPerson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvMusikpreisPerson",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvMusikpreisPeople/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvMusikpreisPerson.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreisPeople/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreisPeople/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreisPeople/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvMusikpreisPeople/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreisPerson.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvMusikpreisPeople/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#create
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvMusikpreisPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#createMany
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#upsert
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvMusikpreisPeople",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#exists
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvMusikpreisPeople/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#findById
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvMusikpreisPeople/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#find
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvMusikpreisPeople",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#findOne
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvMusikpreisPeople/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#updateAll
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvMusikpreisPeople/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#deleteById
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvMusikpreisPeople/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#count
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvMusikpreisPeople/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#prototype$updateAttributes
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvMusikpreisPeople/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#createChangeStream
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvMusikpreisPeople/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.persons.findById() instead.
            "::findById::SvMusikpreis::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/persons/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.persons.destroyById() instead.
            "::destroyById::SvMusikpreis::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/persons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.persons.updateById() instead.
            "::updateById::SvMusikpreis::persons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/persons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvMusikpreis.persons() instead.
            "::get::SvMusikpreis::persons": {
              isArray: true,
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.persons.create() instead.
            "::create::SvMusikpreis::persons": {
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.persons.createMany() instead.
            "::createMany::SvMusikpreis::persons": {
              isArray: true,
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.persons.destroyAll() instead.
            "::delete::SvMusikpreis::persons": {
              url: urlBase + "/SvMusikpreis/:id/persons",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.persons.count() instead.
            "::count::SvMusikpreis::persons": {
              url: urlBase + "/SvMusikpreis/:id/persons/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#updateOrCreate
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#update
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#destroyById
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#removeById
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPerson` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvMusikpreisPerson#modelName
        * @propertyOf lbServices.SvMusikpreisPerson
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvMusikpreisPerson`.
        */
        R.modelName = "SvMusikpreisPerson";

    /**
     * @ngdoc object
     * @name lbServices.SvMusikpreisPerson.translations
     * @header lbServices.SvMusikpreisPerson.translations
     * @object
     * @description
     *
     * The object `SvMusikpreisPerson.translations` groups methods
     * manipulating `SvMusikpreisPersonTranslation` instances related to `SvMusikpreisPerson`.
     *
     * Call {@link lbServices.SvMusikpreisPerson#translations SvMusikpreisPerson.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson#translations
             * @methodOf lbServices.SvMusikpreisPerson
             *
             * @description
             *
             * Queries translations of SvMusikpreisPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::get::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#count
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Counts translations of SvMusikpreisPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::count::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#create
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::create::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#createMany
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::createMany::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#destroyAll
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::delete::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#destroyById
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::destroyById::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#findById
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::findById::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisPerson.translations#updateById
             * @methodOf lbServices.SvMusikpreisPerson.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisPersonTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvMusikpreisPersonTranslation");
          var action = TargetResource["::updateById::SvMusikpreisPerson::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvMusikpreisTranslation
 * @header lbServices.SvMusikpreisTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvMusikpreisTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvMusikpreisTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvMusikpreisTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#create
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvMusikpreisTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#createMany
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvMusikpreisTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#upsert
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvMusikpreisTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#exists
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvMusikpreisTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#findById
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvMusikpreisTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#find
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvMusikpreisTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#findOne
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvMusikpreisTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#updateAll
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvMusikpreisTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#deleteById
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvMusikpreisTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#count
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvMusikpreisTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvMusikpreisTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#createChangeStream
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvMusikpreisTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.translations.findById() instead.
            "::findById::SvMusikpreis::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.translations.destroyById() instead.
            "::destroyById::SvMusikpreis::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.translations.updateById() instead.
            "::updateById::SvMusikpreis::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvMusikpreis/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvMusikpreis.translations() instead.
            "::get::SvMusikpreis::translations": {
              isArray: true,
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvMusikpreis.translations.create() instead.
            "::create::SvMusikpreis::translations": {
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.translations.createMany() instead.
            "::createMany::SvMusikpreis::translations": {
              isArray: true,
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvMusikpreis.translations.destroyAll() instead.
            "::delete::SvMusikpreis::translations": {
              url: urlBase + "/SvMusikpreis/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvMusikpreis.translations.count() instead.
            "::count::SvMusikpreis::translations": {
              url: urlBase + "/SvMusikpreis/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#updateOrCreate
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#update
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#destroyById
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvMusikpreisTranslation#removeById
             * @methodOf lbServices.SvMusikpreisTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvMusikpreisTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvMusikpreisTranslation#modelName
        * @propertyOf lbServices.SvMusikpreisTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvMusikpreisTranslation`.
        */
        R.modelName = "SvMusikpreisTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKulturItemTranslation
 * @header lbServices.SvKulturItemTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKulturItemTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKulturItemTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKulturItemTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#create
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKulturItemTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#createMany
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKulturItemTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#upsert
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKulturItemTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#exists
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKulturItemTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#findById
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKulturItemTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#find
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKulturItemTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#findOne
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKulturItemTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#updateAll
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKulturItemTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#deleteById
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKulturItemTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#count
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKulturItemTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKulturItemTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#createChangeStream
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKulturItemTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKulturItem.translations.findById() instead.
            "::findById::SvKulturItem::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKulturItems/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKulturItem.translations.destroyById() instead.
            "::destroyById::SvKulturItem::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKulturItems/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKulturItem.translations.updateById() instead.
            "::updateById::SvKulturItem::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKulturItems/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKulturItem.translations() instead.
            "::get::SvKulturItem::translations": {
              isArray: true,
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKulturItem.translations.create() instead.
            "::create::SvKulturItem::translations": {
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKulturItem.translations.createMany() instead.
            "::createMany::SvKulturItem::translations": {
              isArray: true,
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKulturItem.translations.destroyAll() instead.
            "::delete::SvKulturItem::translations": {
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKulturItem.translations.count() instead.
            "::count::SvKulturItem::translations": {
              url: urlBase + "/SvKulturItems/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#updateOrCreate
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#update
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#destroyById
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItemTranslation#removeById
             * @methodOf lbServices.SvKulturItemTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKulturItemTranslation#modelName
        * @propertyOf lbServices.SvKulturItemTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKulturItemTranslation`.
        */
        R.modelName = "SvKulturItemTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKultur
 * @header lbServices.SvKultur
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKultur` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKultur",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKultur/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvKultur.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKultur.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKultur.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvKultur/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvKultur/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvKultur/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvKultur/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/SvKultur/:id/items",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/SvKultur/:id/items",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/SvKultur/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/SvKultur/:id/items/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#create
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKultur",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#createMany
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKultur",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#upsert
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKultur",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#exists
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKultur/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#findById
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKultur/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#find
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKultur",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#findOne
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKultur/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#updateAll
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKultur/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#deleteById
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKultur/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#count
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKultur/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#prototype$updateAttributes
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKultur/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#createChangeStream
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKultur/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#getContentData
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvKultur/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKultur#updateOrCreate
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#update
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#destroyById
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKultur#removeById
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKultur` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKultur#modelName
        * @propertyOf lbServices.SvKultur
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKultur`.
        */
        R.modelName = "SvKultur";

    /**
     * @ngdoc object
     * @name lbServices.SvKultur.translations
     * @header lbServices.SvKultur.translations
     * @object
     * @description
     *
     * The object `SvKultur.translations` groups methods
     * manipulating `SvKulturTranslation` instances related to `SvKultur`.
     *
     * Call {@link lbServices.SvKultur#translations SvKultur.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKultur#translations
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Queries translations of SvKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::get::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#count
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Counts translations of SvKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::count::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#create
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::create::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#createMany
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::createMany::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#destroyAll
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::delete::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#destroyById
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::destroyById::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#findById
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::findById::SvKultur::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.translations#updateById
             * @methodOf lbServices.SvKultur.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvKulturTranslation");
          var action = TargetResource["::updateById::SvKultur::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvKultur.items
     * @header lbServices.SvKultur.items
     * @object
     * @description
     *
     * The object `SvKultur.items` groups methods
     * manipulating `SvKulturItem` instances related to `SvKultur`.
     *
     * Call {@link lbServices.SvKultur#items SvKultur.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKultur#items
             * @methodOf lbServices.SvKultur
             *
             * @description
             *
             * Queries items of SvKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::get::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#count
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Counts items of SvKultur.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::count::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#create
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::create::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#createMany
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::createMany::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#destroyAll
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::delete::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#destroyById
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::destroyById::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#findById
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::findById::SvKultur::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKultur.items#updateById
             * @methodOf lbServices.SvKultur.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("SvKulturItem");
          var action = TargetResource["::updateById::SvKultur::items"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKulturTranslation
 * @header lbServices.SvKulturTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKulturTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKulturTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKulturTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#create
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKulturTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#createMany
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKulturTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#upsert
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKulturTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#exists
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKulturTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#findById
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKulturTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#find
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKulturTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#findOne
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKulturTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#updateAll
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKulturTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#deleteById
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKulturTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#count
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKulturTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKulturTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#createChangeStream
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKulturTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.translations.findById() instead.
            "::findById::SvKultur::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.translations.destroyById() instead.
            "::destroyById::SvKultur::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.translations.updateById() instead.
            "::updateById::SvKultur::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKultur.translations() instead.
            "::get::SvKultur::translations": {
              isArray: true,
              url: urlBase + "/SvKultur/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.translations.create() instead.
            "::create::SvKultur::translations": {
              url: urlBase + "/SvKultur/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.translations.createMany() instead.
            "::createMany::SvKultur::translations": {
              isArray: true,
              url: urlBase + "/SvKultur/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.translations.destroyAll() instead.
            "::delete::SvKultur::translations": {
              url: urlBase + "/SvKultur/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.translations.count() instead.
            "::count::SvKultur::translations": {
              url: urlBase + "/SvKultur/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#updateOrCreate
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#update
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#destroyById
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturTranslation#removeById
             * @methodOf lbServices.SvKulturTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKulturTranslation#modelName
        * @propertyOf lbServices.SvKulturTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKulturTranslation`.
        */
        R.modelName = "SvKulturTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKulturItem
 * @header lbServices.SvKulturItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKulturItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKulturItem",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKulturItems/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvKulturItem.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKulturItems/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKulturItem.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKulturItems/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKulturItem.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKulturItems/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKulturItem.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKulturItem.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKulturItem.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvKulturItems/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKulturItem.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvKulturItems/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#create
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKulturItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#createMany
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKulturItems",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#upsert
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKulturItems",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#exists
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKulturItems/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#findById
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKulturItems/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#find
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKulturItems",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#findOne
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKulturItems/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#updateAll
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKulturItems/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#deleteById
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKulturItems/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#count
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKulturItems/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#prototype$updateAttributes
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKulturItems/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#createChangeStream
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKulturItems/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.items.findById() instead.
            "::findById::SvKultur::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.items.destroyById() instead.
            "::destroyById::SvKultur::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.items.updateById() instead.
            "::updateById::SvKultur::items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKultur/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKultur.items() instead.
            "::get::SvKultur::items": {
              isArray: true,
              url: urlBase + "/SvKultur/:id/items",
              method: "GET",
            },

            // INTERNAL. Use SvKultur.items.create() instead.
            "::create::SvKultur::items": {
              url: urlBase + "/SvKultur/:id/items",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.items.createMany() instead.
            "::createMany::SvKultur::items": {
              isArray: true,
              url: urlBase + "/SvKultur/:id/items",
              method: "POST",
            },

            // INTERNAL. Use SvKultur.items.destroyAll() instead.
            "::delete::SvKultur::items": {
              url: urlBase + "/SvKultur/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use SvKultur.items.count() instead.
            "::count::SvKultur::items": {
              url: urlBase + "/SvKultur/:id/items/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#updateOrCreate
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#update
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#destroyById
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#removeById
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItem` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKulturItem#modelName
        * @propertyOf lbServices.SvKulturItem
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKulturItem`.
        */
        R.modelName = "SvKulturItem";

    /**
     * @ngdoc object
     * @name lbServices.SvKulturItem.translations
     * @header lbServices.SvKulturItem.translations
     * @object
     * @description
     *
     * The object `SvKulturItem.translations` groups methods
     * manipulating `SvKulturItemTranslation` instances related to `SvKulturItem`.
     *
     * Call {@link lbServices.SvKulturItem#translations SvKulturItem.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem#translations
             * @methodOf lbServices.SvKulturItem
             *
             * @description
             *
             * Queries translations of SvKulturItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::get::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#count
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Counts translations of SvKulturItem.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::count::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#create
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::create::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#createMany
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::createMany::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#destroyAll
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::delete::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#destroyById
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::destroyById::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#findById
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::findById::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKulturItem.translations#updateById
             * @methodOf lbServices.SvKulturItem.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKulturItemTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvKulturItemTranslation");
          var action = TargetResource["::updateById::SvKulturItem::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKunststiftungTranslation
 * @header lbServices.SvKunststiftungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKunststiftungTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKunststiftungTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#create
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKunststiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#createMany
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKunststiftungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#upsert
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKunststiftungTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#exists
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKunststiftungTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#findById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKunststiftungTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#find
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKunststiftungTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#findOne
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKunststiftungTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#updateAll
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKunststiftungTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#deleteById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKunststiftungTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#count
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKunststiftungTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKunststiftungTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#createChangeStream
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKunststiftungTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.findById() instead.
            "::findById::SvKunststiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyById() instead.
            "::destroyById::SvKunststiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.updateById() instead.
            "::updateById::SvKunststiftung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftung.translations() instead.
            "::get::SvKunststiftung::translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.create() instead.
            "::create::SvKunststiftung::translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.createMany() instead.
            "::createMany::SvKunststiftung::translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyAll() instead.
            "::delete::SvKunststiftung::translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.count() instead.
            "::count::SvKunststiftung::translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#updateOrCreate
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#update
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#destroyById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungTranslation#removeById
             * @methodOf lbServices.SvKunststiftungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKunststiftungTranslation#modelName
        * @propertyOf lbServices.SvKunststiftungTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKunststiftungTranslation`.
        */
        R.modelName = "SvKunststiftungTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKunststiftungMedia
 * @header lbServices.SvKunststiftungMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftungMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKunststiftungMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKunststiftungMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvKunststiftungMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvKunststiftungMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#create
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKunststiftungMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#createMany
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#upsert
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKunststiftungMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#exists
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKunststiftungMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#findById
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKunststiftungMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#find
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#findOne
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKunststiftungMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#updateAll
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKunststiftungMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#deleteById
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKunststiftungMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#count
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKunststiftungMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#prototype$updateAttributes
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKunststiftungMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#createChangeStream
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKunststiftungMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.medias.findById() instead.
            "::findById::SvKunststiftung::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.medias.destroyById() instead.
            "::destroyById::SvKunststiftung::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.medias.updateById() instead.
            "::updateById::SvKunststiftung::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftung.medias() instead.
            "::get::SvKunststiftung::medias": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.medias.create() instead.
            "::create::SvKunststiftung::medias": {
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.medias.createMany() instead.
            "::createMany::SvKunststiftung::medias": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.medias.destroyAll() instead.
            "::delete::SvKunststiftung::medias": {
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.medias.count() instead.
            "::count::SvKunststiftung::medias": {
              url: urlBase + "/SvKunststiftungs/:id/medias/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#updateOrCreate
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#update
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#destroyById
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#removeById
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKunststiftungMedia#modelName
        * @propertyOf lbServices.SvKunststiftungMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKunststiftungMedia`.
        */
        R.modelName = "SvKunststiftungMedia";

    /**
     * @ngdoc object
     * @name lbServices.SvKunststiftungMedia.translations
     * @header lbServices.SvKunststiftungMedia.translations
     * @object
     * @description
     *
     * The object `SvKunststiftungMedia.translations` groups methods
     * manipulating `SvKunststiftungMediaTranslation` instances related to `SvKunststiftungMedia`.
     *
     * Call {@link lbServices.SvKunststiftungMedia#translations SvKunststiftungMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia#translations
             * @methodOf lbServices.SvKunststiftungMedia
             *
             * @description
             *
             * Queries translations of SvKunststiftungMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::get::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#count
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Counts translations of SvKunststiftungMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::count::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#create
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::create::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#createMany
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::createMany::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#destroyAll
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::delete::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#destroyById
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::destroyById::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#findById
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::findById::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMedia.translations#updateById
             * @methodOf lbServices.SvKunststiftungMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvKunststiftungMediaTranslation");
          var action = TargetResource["::updateById::SvKunststiftungMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKunststiftung
 * @header lbServices.SvKunststiftung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKunststiftung",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKunststiftungs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvKunststiftung.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftung.medias.findById() instead.
            "prototype$__findById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.medias.destroyById() instead.
            "prototype$__destroyById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.medias.updateById() instead.
            "prototype$__updateById__medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungs/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftung.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvKunststiftungs/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.medias() instead.
            "prototype$__get__medias": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftung.medias.create() instead.
            "prototype$__create__medias": {
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftung.medias.destroyAll() instead.
            "prototype$__delete__medias": {
              url: urlBase + "/SvKunststiftungs/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftung.medias.count() instead.
            "prototype$__count__medias": {
              url: urlBase + "/SvKunststiftungs/:id/medias/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#create
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKunststiftungs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#createMany
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#upsert
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKunststiftungs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#exists
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKunststiftungs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#findById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKunststiftungs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#find
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKunststiftungs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#findOne
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKunststiftungs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#updateAll
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKunststiftungs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#deleteById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKunststiftungs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#count
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKunststiftungs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#prototype$updateAttributes
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKunststiftungs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#createChangeStream
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKunststiftungs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#getContentData
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SvKunststiftungs/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#updateOrCreate
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#update
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#destroyById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#removeById
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftung` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKunststiftung#modelName
        * @propertyOf lbServices.SvKunststiftung
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKunststiftung`.
        */
        R.modelName = "SvKunststiftung";

    /**
     * @ngdoc object
     * @name lbServices.SvKunststiftung.translations
     * @header lbServices.SvKunststiftung.translations
     * @object
     * @description
     *
     * The object `SvKunststiftung.translations` groups methods
     * manipulating `SvKunststiftungTranslation` instances related to `SvKunststiftung`.
     *
     * Call {@link lbServices.SvKunststiftung#translations SvKunststiftung.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#translations
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Queries translations of SvKunststiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::get::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#count
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Counts translations of SvKunststiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::count::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#create
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::create::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#createMany
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::createMany::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#destroyAll
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::delete::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#destroyById
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::destroyById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#findById
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::findById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.translations#updateById
             * @methodOf lbServices.SvKunststiftung.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvKunststiftungTranslation");
          var action = TargetResource["::updateById::SvKunststiftung::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SvKunststiftung.medias
     * @header lbServices.SvKunststiftung.medias
     * @object
     * @description
     *
     * The object `SvKunststiftung.medias` groups methods
     * manipulating `SvKunststiftungMedia` instances related to `SvKunststiftung`.
     *
     * Call {@link lbServices.SvKunststiftung#medias SvKunststiftung.medias()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung#medias
             * @methodOf lbServices.SvKunststiftung
             *
             * @description
             *
             * Queries medias of SvKunststiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R.medias = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::get::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#count
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Counts medias of SvKunststiftung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.medias.count = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::count::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#create
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R.medias.create = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::create::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#createMany
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Creates a new instance in medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R.medias.createMany = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::createMany::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#destroyAll
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Deletes all medias of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyAll = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::delete::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#destroyById
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Delete a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.medias.destroyById = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::destroyById::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#findById
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Find a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R.medias.findById = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::findById::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftung.medias#updateById
             * @methodOf lbServices.SvKunststiftung.medias
             *
             * @description
             *
             * Update a related item by id for medias.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for medias
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMedia` object.)
             * </em>
             */
        R.medias.updateById = function() {
          var TargetResource = $injector.get("SvKunststiftungMedia");
          var action = TargetResource["::updateById::SvKunststiftung::medias"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvKunststiftungMediaTranslation
 * @header lbServices.SvKunststiftungMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvKunststiftungMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvKunststiftungMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvKunststiftungMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#create
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvKunststiftungMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#createMany
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#upsert
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvKunststiftungMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#exists
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvKunststiftungMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#findById
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvKunststiftungMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#find
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#findOne
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvKunststiftungMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#updateAll
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvKunststiftungMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#deleteById
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvKunststiftungMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#count
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvKunststiftungMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvKunststiftungMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#createChangeStream
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvKunststiftungMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.findById() instead.
            "::findById::SvKunststiftungMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.destroyById() instead.
            "::destroyById::SvKunststiftungMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.updateById() instead.
            "::updateById::SvKunststiftungMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvKunststiftungMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations() instead.
            "::get::SvKunststiftungMedia::translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.create() instead.
            "::create::SvKunststiftungMedia::translations": {
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.createMany() instead.
            "::createMany::SvKunststiftungMedia::translations": {
              isArray: true,
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.destroyAll() instead.
            "::delete::SvKunststiftungMedia::translations": {
              url: urlBase + "/SvKunststiftungMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvKunststiftungMedia.translations.count() instead.
            "::count::SvKunststiftungMedia::translations": {
              url: urlBase + "/SvKunststiftungMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#updateOrCreate
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#update
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#destroyById
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvKunststiftungMediaTranslation#removeById
             * @methodOf lbServices.SvKunststiftungMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvKunststiftungMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvKunststiftungMediaTranslation#modelName
        * @propertyOf lbServices.SvKunststiftungMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvKunststiftungMediaTranslation`.
        */
        R.modelName = "SvKunststiftungMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SozialeVerantwortungMediaTranslation
 * @header lbServices.SozialeVerantwortungMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortungMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SozialeVerantwortungMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SozialeVerantwortungMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#create
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#createMany
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#upsert
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#exists
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#findById
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#find
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#findOne
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#updateAll
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#deleteById
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#count
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#createChangeStream
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SozialeVerantwortungMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.findById() instead.
            "::findById::SozialeVerantwortungMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.destroyById() instead.
            "::destroyById::SozialeVerantwortungMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.updateById() instead.
            "::updateById::SozialeVerantwortungMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations() instead.
            "::get::SozialeVerantwortungMedia::translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.create() instead.
            "::create::SozialeVerantwortungMedia::translations": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.createMany() instead.
            "::createMany::SozialeVerantwortungMedia::translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.destroyAll() instead.
            "::delete::SozialeVerantwortungMedia::translations": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.count() instead.
            "::count::SozialeVerantwortungMedia::translations": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#updateOrCreate
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#update
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#destroyById
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMediaTranslation#removeById
             * @methodOf lbServices.SozialeVerantwortungMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SozialeVerantwortungMediaTranslation#modelName
        * @propertyOf lbServices.SozialeVerantwortungMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SozialeVerantwortungMediaTranslation`.
        */
        R.modelName = "SozialeVerantwortungMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SozialeVerantwortung
 * @header lbServices.SozialeVerantwortung
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortung` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SozialeVerantwortung",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SozialeVerantwortung/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SozialeVerantwortung.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.findById() instead.
            "prototype$__findById__backdrops": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.destroyById() instead.
            "prototype$__destroyById__backdrops": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.updateById() instead.
            "prototype$__updateById__backdrops": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortung.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations/count",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops() instead.
            "prototype$__get__backdrops": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.create() instead.
            "prototype$__create__backdrops": {
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.destroyAll() instead.
            "prototype$__delete__backdrops": {
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.count() instead.
            "prototype$__count__backdrops": {
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#create
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SozialeVerantwortung",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#createMany
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#upsert
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SozialeVerantwortung",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#exists
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SozialeVerantwortung/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#findById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SozialeVerantwortung/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#find
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#findOne
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SozialeVerantwortung/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#updateAll
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SozialeVerantwortung/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#deleteById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SozialeVerantwortung/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#count
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SozialeVerantwortung/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#prototype$updateAttributes
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SozialeVerantwortung/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#createChangeStream
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SozialeVerantwortung/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#getContentData
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/SozialeVerantwortung/contentData",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#updateOrCreate
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#update
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#destroyById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#removeById
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortung` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SozialeVerantwortung#modelName
        * @propertyOf lbServices.SozialeVerantwortung
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SozialeVerantwortung`.
        */
        R.modelName = "SozialeVerantwortung";

    /**
     * @ngdoc object
     * @name lbServices.SozialeVerantwortung.translations
     * @header lbServices.SozialeVerantwortung.translations
     * @object
     * @description
     *
     * The object `SozialeVerantwortung.translations` groups methods
     * manipulating `SozialeVerantwortungTranslation` instances related to `SozialeVerantwortung`.
     *
     * Call {@link lbServices.SozialeVerantwortung#translations SozialeVerantwortung.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#translations
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Queries translations of SozialeVerantwortung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::get::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#count
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Counts translations of SozialeVerantwortung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::count::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#create
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::create::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#createMany
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::createMany::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#destroyAll
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::delete::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#destroyById
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::destroyById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#findById
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::findById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.translations#updateById
             * @methodOf lbServices.SozialeVerantwortung.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungTranslation");
          var action = TargetResource["::updateById::SozialeVerantwortung::translations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SozialeVerantwortung.backdrops
     * @header lbServices.SozialeVerantwortung.backdrops
     * @object
     * @description
     *
     * The object `SozialeVerantwortung.backdrops` groups methods
     * manipulating `SozialeVerantwortungMedia` instances related to `SozialeVerantwortung`.
     *
     * Call {@link lbServices.SozialeVerantwortung#backdrops SozialeVerantwortung.backdrops()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung#backdrops
             * @methodOf lbServices.SozialeVerantwortung
             *
             * @description
             *
             * Queries backdrops of SozialeVerantwortung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R.backdrops = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::get::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#count
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Counts backdrops of SozialeVerantwortung.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.backdrops.count = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::count::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#create
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Creates a new instance in backdrops of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R.backdrops.create = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::create::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#createMany
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Creates a new instance in backdrops of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R.backdrops.createMany = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::createMany::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#destroyAll
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Deletes all backdrops of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.backdrops.destroyAll = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::delete::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#destroyById
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Delete a related item by id for backdrops.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for backdrops
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.backdrops.destroyById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::destroyById::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#findById
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Find a related item by id for backdrops.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for backdrops
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R.backdrops.findById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::findById::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortung.backdrops#updateById
             * @methodOf lbServices.SozialeVerantwortung.backdrops
             *
             * @description
             *
             * Update a related item by id for backdrops.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for backdrops
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R.backdrops.updateById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMedia");
          var action = TargetResource["::updateById::SozialeVerantwortung::backdrops"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SozialeVerantwortungTranslation
 * @header lbServices.SozialeVerantwortungTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortungTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SozialeVerantwortungTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SozialeVerantwortungTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#create
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#createMany
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#upsert
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#exists
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#findById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#find
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#findOne
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SozialeVerantwortungTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#updateAll
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SozialeVerantwortungTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#deleteById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#count
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SozialeVerantwortungTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#prototype$updateAttributes
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SozialeVerantwortungTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#createChangeStream
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SozialeVerantwortungTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.findById() instead.
            "::findById::SozialeVerantwortung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyById() instead.
            "::destroyById::SozialeVerantwortung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.updateById() instead.
            "::updateById::SozialeVerantwortung::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortung.translations() instead.
            "::get::SozialeVerantwortung::translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.create() instead.
            "::create::SozialeVerantwortung::translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.createMany() instead.
            "::createMany::SozialeVerantwortung::translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.destroyAll() instead.
            "::delete::SozialeVerantwortung::translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.translations.count() instead.
            "::count::SozialeVerantwortung::translations": {
              url: urlBase + "/SozialeVerantwortung/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#updateOrCreate
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#update
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#destroyById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungTranslation#removeById
             * @methodOf lbServices.SozialeVerantwortungTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SozialeVerantwortungTranslation#modelName
        * @propertyOf lbServices.SozialeVerantwortungTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SozialeVerantwortungTranslation`.
        */
        R.modelName = "SozialeVerantwortungTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SozialeVerantwortungMedia
 * @header lbServices.SozialeVerantwortungMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SozialeVerantwortungMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SozialeVerantwortungMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SozialeVerantwortungMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SozialeVerantwortungMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortungMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#create
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SozialeVerantwortungMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#createMany
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#upsert
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SozialeVerantwortungMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#exists
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SozialeVerantwortungMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#findById
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SozialeVerantwortungMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#find
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortungMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#findOne
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SozialeVerantwortungMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#updateAll
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SozialeVerantwortungMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#deleteById
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SozialeVerantwortungMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#count
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SozialeVerantwortungMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#prototype$updateAttributes
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SozialeVerantwortungMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#createChangeStream
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SozialeVerantwortungMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.findById() instead.
            "::findById::SozialeVerantwortung::backdrops": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/:fk",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.destroyById() instead.
            "::destroyById::SozialeVerantwortung::backdrops": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.updateById() instead.
            "::updateById::SozialeVerantwortung::backdrops": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops() instead.
            "::get::SozialeVerantwortung::backdrops": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "GET",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.create() instead.
            "::create::SozialeVerantwortung::backdrops": {
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.createMany() instead.
            "::createMany::SozialeVerantwortung::backdrops": {
              isArray: true,
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "POST",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.destroyAll() instead.
            "::delete::SozialeVerantwortung::backdrops": {
              url: urlBase + "/SozialeVerantwortung/:id/backdrops",
              method: "DELETE",
            },

            // INTERNAL. Use SozialeVerantwortung.backdrops.count() instead.
            "::count::SozialeVerantwortung::backdrops": {
              url: urlBase + "/SozialeVerantwortung/:id/backdrops/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#updateOrCreate
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#update
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#destroyById
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#removeById
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SozialeVerantwortungMedia#modelName
        * @propertyOf lbServices.SozialeVerantwortungMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SozialeVerantwortungMedia`.
        */
        R.modelName = "SozialeVerantwortungMedia";

    /**
     * @ngdoc object
     * @name lbServices.SozialeVerantwortungMedia.translations
     * @header lbServices.SozialeVerantwortungMedia.translations
     * @object
     * @description
     *
     * The object `SozialeVerantwortungMedia.translations` groups methods
     * manipulating `SozialeVerantwortungMediaTranslation` instances related to `SozialeVerantwortungMedia`.
     *
     * Call {@link lbServices.SozialeVerantwortungMedia#translations SozialeVerantwortungMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia#translations
             * @methodOf lbServices.SozialeVerantwortungMedia
             *
             * @description
             *
             * Queries translations of SozialeVerantwortungMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::get::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#count
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Counts translations of SozialeVerantwortungMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::count::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#create
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::create::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#createMany
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::createMany::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#destroyAll
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::delete::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#destroyById
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::destroyById::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#findById
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::findById::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SozialeVerantwortungMedia.translations#updateById
             * @methodOf lbServices.SozialeVerantwortungMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SozialeVerantwortungMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SozialeVerantwortungMediaTranslation");
          var action = TargetResource["::updateById::SozialeVerantwortungMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftProjectMedia
 * @header lbServices.SvZfhilftProjectMedia
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftProjectMedia` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftProjectMedia",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftProjectMedia/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SvZfhilftProjectMedia.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#create
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftProjectMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#createMany
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMedia",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#upsert
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftProjectMedia",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#exists
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#findById
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftProjectMedia/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#find
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMedia",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#findOne
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftProjectMedia/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#updateAll
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftProjectMedia/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#deleteById
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftProjectMedia/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#count
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftProjectMedia/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftProjectMedia/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#createChangeStream
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftProjectMedia/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.medias.findById() instead.
            "::findById::SvZfhilftProject::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/medias/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.medias.destroyById() instead.
            "::destroyById::SvZfhilftProject::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/medias/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.medias.updateById() instead.
            "::updateById::SvZfhilftProject::medias": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjects/:id/medias/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftProject.medias() instead.
            "::get::SvZfhilftProject::medias": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProject.medias.create() instead.
            "::create::SvZfhilftProject::medias": {
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.medias.createMany() instead.
            "::createMany::SvZfhilftProject::medias": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProject.medias.destroyAll() instead.
            "::delete::SvZfhilftProject::medias": {
              url: urlBase + "/SvZfhilftProjects/:id/medias",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProject.medias.count() instead.
            "::count::SvZfhilftProject::medias": {
              url: urlBase + "/SvZfhilftProjects/:id/medias/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#updateOrCreate
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#update
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#destroyById
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#removeById
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMedia` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftProjectMedia#modelName
        * @propertyOf lbServices.SvZfhilftProjectMedia
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftProjectMedia`.
        */
        R.modelName = "SvZfhilftProjectMedia";

    /**
     * @ngdoc object
     * @name lbServices.SvZfhilftProjectMedia.translations
     * @header lbServices.SvZfhilftProjectMedia.translations
     * @object
     * @description
     *
     * The object `SvZfhilftProjectMedia.translations` groups methods
     * manipulating `SvZfhilftProjectMediaTranslation` instances related to `SvZfhilftProjectMedia`.
     *
     * Call {@link lbServices.SvZfhilftProjectMedia#translations SvZfhilftProjectMedia.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia#translations
             * @methodOf lbServices.SvZfhilftProjectMedia
             *
             * @description
             *
             * Queries translations of SvZfhilftProjectMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::get::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#count
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Counts translations of SvZfhilftProjectMedia.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::count::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#create
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::create::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#createMany
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::createMany::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#destroyAll
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::delete::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#destroyById
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::destroyById::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#findById
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::findById::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMedia.translations#updateById
             * @methodOf lbServices.SvZfhilftProjectMedia.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("SvZfhilftProjectMediaTranslation");
          var action = TargetResource["::updateById::SvZfhilftProjectMedia::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SvZfhilftProjectMediaTranslation
 * @header lbServices.SvZfhilftProjectMediaTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SvZfhilftProjectMediaTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SvZfhilftProjectMediaTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SvZfhilftProjectMediaTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#create
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#createMany
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMediaTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#upsert
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#exists
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#findById
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#find
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMediaTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#findOne
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#updateAll
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#deleteById
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#count
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#prototype$updateAttributes
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#createChangeStream
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SvZfhilftProjectMediaTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.findById() instead.
            "::findById::SvZfhilftProjectMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.destroyById() instead.
            "::destroyById::SvZfhilftProjectMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.updateById() instead.
            "::updateById::SvZfhilftProjectMedia::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations() instead.
            "::get::SvZfhilftProjectMedia::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.create() instead.
            "::create::SvZfhilftProjectMedia::translations": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.createMany() instead.
            "::createMany::SvZfhilftProjectMedia::translations": {
              isArray: true,
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.destroyAll() instead.
            "::delete::SvZfhilftProjectMedia::translations": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use SvZfhilftProjectMedia.translations.count() instead.
            "::count::SvZfhilftProjectMedia::translations": {
              url: urlBase + "/SvZfhilftProjectMedia/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#updateOrCreate
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#update
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#destroyById
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SvZfhilftProjectMediaTranslation#removeById
             * @methodOf lbServices.SvZfhilftProjectMediaTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SvZfhilftProjectMediaTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SvZfhilftProjectMediaTranslation#modelName
        * @propertyOf lbServices.SvZfhilftProjectMediaTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SvZfhilftProjectMediaTranslation`.
        */
        R.modelName = "SvZfhilftProjectMediaTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LedPool
 * @header lbServices.LedPool
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LedPool` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LedPool",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LedPools/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LedPool.contents.findById() instead.
            "prototype$__findById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use LedPool.contents.destroyById() instead.
            "prototype$__destroyById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.contents.updateById() instead.
            "prototype$__updateById__contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LedPool.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use LedPool.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LedPool.contents() instead.
            "prototype$__get__contents": {
              isArray: true,
              url: urlBase + "/LedPools/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use LedPool.contents.create() instead.
            "prototype$__create__contents": {
              url: urlBase + "/LedPools/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use LedPool.contents.destroyAll() instead.
            "prototype$__delete__contents": {
              url: urlBase + "/LedPools/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.contents.count() instead.
            "prototype$__count__contents": {
              url: urlBase + "/LedPools/:id/contents/count",
              method: "GET",
            },

            // INTERNAL. Use LedPool.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/LedPools/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use LedPool.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/LedPools/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use LedPool.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/LedPools/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/LedPools/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#create
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LedPools",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#createMany
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LedPools",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#upsert
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LedPools",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#exists
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LedPools/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#findById
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LedPools/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#find
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LedPools",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#findOne
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LedPools/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#updateAll
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LedPools/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#deleteById
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LedPools/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#count
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LedPools/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#prototype$updateAttributes
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LedPools/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPool#createChangeStream
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LedPools/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LedPool#updateOrCreate
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LedPool#update
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LedPool#destroyById
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LedPool#removeById
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPool` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LedPool#modelName
        * @propertyOf lbServices.LedPool
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LedPool`.
        */
        R.modelName = "LedPool";

    /**
     * @ngdoc object
     * @name lbServices.LedPool.contents
     * @header lbServices.LedPool.contents
     * @object
     * @description
     *
     * The object `LedPool.contents` groups methods
     * manipulating `LedContent` instances related to `LedPool`.
     *
     * Call {@link lbServices.LedPool#contents LedPool.contents()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.LedPool#contents
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Queries contents of LedPool.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R.contents = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::get::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#count
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Counts contents of LedPool.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contents.count = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::count::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#create
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R.contents.create = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::create::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#createMany
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Creates a new instance in contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R.contents.createMany = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::createMany::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#destroyAll
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Deletes all contents of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyAll = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::delete::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#destroyById
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Delete a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contents.destroyById = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::destroyById::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#findById
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Find a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R.contents.findById = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::findById::LedPool::contents"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.contents#updateById
             * @methodOf lbServices.LedPool.contents
             *
             * @description
             *
             * Update a related item by id for contents.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for contents
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R.contents.updateById = function() {
          var TargetResource = $injector.get("LedContent");
          var action = TargetResource["::updateById::LedPool::contents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.LedPool.translations
     * @header lbServices.LedPool.translations
     * @object
     * @description
     *
     * The object `LedPool.translations` groups methods
     * manipulating `LedPoolTranslation` instances related to `LedPool`.
     *
     * Call {@link lbServices.LedPool#translations LedPool.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.LedPool#translations
             * @methodOf lbServices.LedPool
             *
             * @description
             *
             * Queries translations of LedPool.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::get::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#count
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Counts translations of LedPool.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::count::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#create
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::create::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#createMany
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::createMany::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#destroyAll
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::delete::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#destroyById
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::destroyById::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#findById
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::findById::LedPool::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedPool.translations#updateById
             * @methodOf lbServices.LedPool.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("LedPoolTranslation");
          var action = TargetResource["::updateById::LedPool::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LedContent
 * @header lbServices.LedContent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LedContent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LedContent",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LedContents/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LedContent.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedContents/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use LedContent.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedContents/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LedContent.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedContents/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LedContent.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/LedContents/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use LedContent.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/LedContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use LedContent.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/LedContents/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use LedContent.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/LedContents/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#create
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LedContents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#createMany
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LedContents",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#upsert
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LedContents",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#exists
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LedContents/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#findById
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LedContents/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#find
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LedContents",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#findOne
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LedContents/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#updateAll
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LedContents/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#deleteById
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LedContents/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#count
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LedContents/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#prototype$updateAttributes
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LedContents/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContent#createChangeStream
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LedContents/change-stream",
              method: "POST",
            },

            // INTERNAL. Use LedPool.contents.findById() instead.
            "::findById::LedPool::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/contents/:fk",
              method: "GET",
            },

            // INTERNAL. Use LedPool.contents.destroyById() instead.
            "::destroyById::LedPool::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/contents/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.contents.updateById() instead.
            "::updateById::LedPool::contents": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/contents/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LedPool.contents() instead.
            "::get::LedPool::contents": {
              isArray: true,
              url: urlBase + "/LedPools/:id/contents",
              method: "GET",
            },

            // INTERNAL. Use LedPool.contents.create() instead.
            "::create::LedPool::contents": {
              url: urlBase + "/LedPools/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use LedPool.contents.createMany() instead.
            "::createMany::LedPool::contents": {
              isArray: true,
              url: urlBase + "/LedPools/:id/contents",
              method: "POST",
            },

            // INTERNAL. Use LedPool.contents.destroyAll() instead.
            "::delete::LedPool::contents": {
              url: urlBase + "/LedPools/:id/contents",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.contents.count() instead.
            "::count::LedPool::contents": {
              url: urlBase + "/LedPools/:id/contents/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LedContent#updateOrCreate
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LedContent#update
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LedContent#destroyById
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LedContent#removeById
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContent` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LedContent#modelName
        * @propertyOf lbServices.LedContent
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LedContent`.
        */
        R.modelName = "LedContent";

    /**
     * @ngdoc object
     * @name lbServices.LedContent.translations
     * @header lbServices.LedContent.translations
     * @object
     * @description
     *
     * The object `LedContent.translations` groups methods
     * manipulating `LedContentTranslation` instances related to `LedContent`.
     *
     * Call {@link lbServices.LedContent#translations LedContent.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.LedContent#translations
             * @methodOf lbServices.LedContent
             *
             * @description
             *
             * Queries translations of LedContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::get::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#count
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Counts translations of LedContent.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::count::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#create
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::create::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#createMany
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::createMany::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#destroyAll
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::delete::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#destroyById
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::destroyById::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#findById
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::findById::LedContent::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LedContent.translations#updateById
             * @methodOf lbServices.LedContent.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("LedContentTranslation");
          var action = TargetResource["::updateById::LedContent::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LedPoolTranslation
 * @header lbServices.LedPoolTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LedPoolTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LedPoolTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LedPoolTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#create
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LedPoolTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#createMany
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LedPoolTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#upsert
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LedPoolTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#exists
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LedPoolTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#findById
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LedPoolTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#find
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LedPoolTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#findOne
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LedPoolTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#updateAll
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LedPoolTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#deleteById
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LedPoolTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#count
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LedPoolTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#prototype$updateAttributes
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LedPoolTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#createChangeStream
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LedPoolTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use LedPool.translations.findById() instead.
            "::findById::LedPool::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use LedPool.translations.destroyById() instead.
            "::destroyById::LedPool::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.translations.updateById() instead.
            "::updateById::LedPool::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedPools/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LedPool.translations() instead.
            "::get::LedPool::translations": {
              isArray: true,
              url: urlBase + "/LedPools/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use LedPool.translations.create() instead.
            "::create::LedPool::translations": {
              url: urlBase + "/LedPools/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use LedPool.translations.createMany() instead.
            "::createMany::LedPool::translations": {
              isArray: true,
              url: urlBase + "/LedPools/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use LedPool.translations.destroyAll() instead.
            "::delete::LedPool::translations": {
              url: urlBase + "/LedPools/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use LedPool.translations.count() instead.
            "::count::LedPool::translations": {
              url: urlBase + "/LedPools/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#updateOrCreate
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#update
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#destroyById
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LedPoolTranslation#removeById
             * @methodOf lbServices.LedPoolTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedPoolTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LedPoolTranslation#modelName
        * @propertyOf lbServices.LedPoolTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LedPoolTranslation`.
        */
        R.modelName = "LedPoolTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LedContentTranslation
 * @header lbServices.LedContentTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LedContentTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LedContentTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LedContentTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#create
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LedContentTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#createMany
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LedContentTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#upsert
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LedContentTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#exists
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LedContentTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#findById
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LedContentTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#find
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LedContentTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#findOne
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LedContentTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#updateAll
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LedContentTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#deleteById
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LedContentTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#count
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LedContentTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#prototype$updateAttributes
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LedContentTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#createChangeStream
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LedContentTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use LedContent.translations.findById() instead.
            "::findById::LedContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedContents/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use LedContent.translations.destroyById() instead.
            "::destroyById::LedContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedContents/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LedContent.translations.updateById() instead.
            "::updateById::LedContent::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LedContents/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LedContent.translations() instead.
            "::get::LedContent::translations": {
              isArray: true,
              url: urlBase + "/LedContents/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use LedContent.translations.create() instead.
            "::create::LedContent::translations": {
              url: urlBase + "/LedContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use LedContent.translations.createMany() instead.
            "::createMany::LedContent::translations": {
              isArray: true,
              url: urlBase + "/LedContents/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use LedContent.translations.destroyAll() instead.
            "::delete::LedContent::translations": {
              url: urlBase + "/LedContents/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use LedContent.translations.count() instead.
            "::count::LedContent::translations": {
              url: urlBase + "/LedContents/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#updateOrCreate
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#update
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#destroyById
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LedContentTranslation#removeById
             * @methodOf lbServices.LedContentTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedContentTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LedContentTranslation#modelName
        * @propertyOf lbServices.LedContentTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LedContentTranslation`.
        */
        R.modelName = "LedContentTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LedRing
 * @header lbServices.LedRing
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LedRing` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LedRing",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LedRing/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.LedRing#getContentData
             * @methodOf lbServices.LedRing
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LedRing` object.)
             * </em>
             */
            "getContentData": {
              url: urlBase + "/LedRing/contentData",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.LedRing#modelName
        * @propertyOf lbServices.LedRing
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LedRing`.
        */
        R.modelName = "LedRing";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpMediaWrapper
 * @header lbServices.ZpMediaWrapper
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpMediaWrapper` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpMediaWrapper",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpMediaWrappers/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ZpMediaWrapper.items.findById() instead.
            "prototype$__findById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/items/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.items.destroyById() instead.
            "prototype$__destroyById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/items/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.items.updateById() instead.
            "prototype$__updateById__items": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/items/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMediaWrapper.items() instead.
            "prototype$__get__items": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.items.create() instead.
            "prototype$__create__items": {
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.items.destroyAll() instead.
            "prototype$__delete__items": {
              url: urlBase + "/ZpMediaWrappers/:id/items",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.items.count() instead.
            "prototype$__count__items": {
              url: urlBase + "/ZpMediaWrappers/:id/items/count",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/ZpMediaWrappers/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#create
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpMediaWrappers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#createMany
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#upsert
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpMediaWrappers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#exists
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpMediaWrappers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#findById
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpMediaWrappers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#find
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#findOne
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpMediaWrappers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#updateAll
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpMediaWrappers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#deleteById
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpMediaWrappers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#count
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpMediaWrappers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#prototype$updateAttributes
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpMediaWrappers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#createChangeStream
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpMediaWrappers/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#updateOrCreate
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#update
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#destroyById
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#removeById
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapper` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpMediaWrapper#modelName
        * @propertyOf lbServices.ZpMediaWrapper
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpMediaWrapper`.
        */
        R.modelName = "ZpMediaWrapper";

    /**
     * @ngdoc object
     * @name lbServices.ZpMediaWrapper.items
     * @header lbServices.ZpMediaWrapper.items
     * @object
     * @description
     *
     * The object `ZpMediaWrapper.items` groups methods
     * manipulating `ZpMedia` instances related to `ZpMediaWrapper`.
     *
     * Call {@link lbServices.ZpMediaWrapper#items ZpMediaWrapper.items()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#items
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Queries items of ZpMediaWrapper.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R.items = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::get::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#count
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Counts items of ZpMediaWrapper.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.items.count = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::count::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#create
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R.items.create = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::create::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#createMany
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Creates a new instance in items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R.items.createMany = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::createMany::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#destroyAll
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Deletes all items of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyAll = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::delete::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#destroyById
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Delete a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.items.destroyById = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::destroyById::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#findById
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Find a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R.items.findById = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::findById::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.items#updateById
             * @methodOf lbServices.ZpMediaWrapper.items
             *
             * @description
             *
             * Update a related item by id for items.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for items
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMedia` object.)
             * </em>
             */
        R.items.updateById = function() {
          var TargetResource = $injector.get("ZpMedia");
          var action = TargetResource["::updateById::ZpMediaWrapper::items"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.ZpMediaWrapper.translations
     * @header lbServices.ZpMediaWrapper.translations
     * @object
     * @description
     *
     * The object `ZpMediaWrapper.translations` groups methods
     * manipulating `ZpMediaWrapperTranslation` instances related to `ZpMediaWrapper`.
     *
     * Call {@link lbServices.ZpMediaWrapper#translations ZpMediaWrapper.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper#translations
             * @methodOf lbServices.ZpMediaWrapper
             *
             * @description
             *
             * Queries translations of ZpMediaWrapper.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::get::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#count
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Counts translations of ZpMediaWrapper.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::count::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#create
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::create::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#createMany
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::createMany::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#destroyAll
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::delete::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#destroyById
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::destroyById::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#findById
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::findById::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapper.translations#updateById
             * @methodOf lbServices.ZpMediaWrapper.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("ZpMediaWrapperTranslation");
          var action = TargetResource["::updateById::ZpMediaWrapper::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ZpMediaWrapperTranslation
 * @header lbServices.ZpMediaWrapperTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ZpMediaWrapperTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ZpMediaWrapperTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ZpMediaWrapperTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#create
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ZpMediaWrapperTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#createMany
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ZpMediaWrapperTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#upsert
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ZpMediaWrapperTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#exists
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ZpMediaWrapperTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#findById
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ZpMediaWrapperTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#find
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ZpMediaWrapperTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#findOne
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ZpMediaWrapperTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#updateAll
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ZpMediaWrapperTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#deleteById
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ZpMediaWrapperTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#count
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ZpMediaWrapperTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#prototype$updateAttributes
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ZpMediaWrapperTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#createChangeStream
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ZpMediaWrapperTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.findById() instead.
            "::findById::ZpMediaWrapper::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.destroyById() instead.
            "::destroyById::ZpMediaWrapper::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.updateById() instead.
            "::updateById::ZpMediaWrapper::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ZpMediaWrappers/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ZpMediaWrapper.translations() instead.
            "::get::ZpMediaWrapper::translations": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.create() instead.
            "::create::ZpMediaWrapper::translations": {
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.createMany() instead.
            "::createMany::ZpMediaWrapper::translations": {
              isArray: true,
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.destroyAll() instead.
            "::delete::ZpMediaWrapper::translations": {
              url: urlBase + "/ZpMediaWrappers/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use ZpMediaWrapper.translations.count() instead.
            "::count::ZpMediaWrapper::translations": {
              url: urlBase + "/ZpMediaWrappers/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#updateOrCreate
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#update
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#destroyById
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ZpMediaWrapperTranslation#removeById
             * @methodOf lbServices.ZpMediaWrapperTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ZpMediaWrapperTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ZpMediaWrapperTranslation#modelName
        * @propertyOf lbServices.ZpMediaWrapperTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ZpMediaWrapperTranslation`.
        */
        R.modelName = "ZpMediaWrapperTranslation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbText
 * @header lbServices.EbText
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbText` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbText",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbTexts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EbText.translations.findById() instead.
            "prototype$__findById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbTexts/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbText.translations.destroyById() instead.
            "prototype$__destroyById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbTexts/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbText.translations.updateById() instead.
            "prototype$__updateById__translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbTexts/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbText.translations() instead.
            "prototype$__get__translations": {
              isArray: true,
              url: urlBase + "/EbTexts/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbText.translations.create() instead.
            "prototype$__create__translations": {
              url: urlBase + "/EbTexts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbText.translations.destroyAll() instead.
            "prototype$__delete__translations": {
              url: urlBase + "/EbTexts/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbText.translations.count() instead.
            "prototype$__count__translations": {
              url: urlBase + "/EbTexts/:id/translations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#create
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#createMany
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbTexts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#upsert
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbTexts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#exists
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbTexts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#findById
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbTexts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#find
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbTexts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#findOne
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbTexts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#updateAll
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbTexts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#deleteById
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbTexts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#count
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbTexts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#prototype$updateAttributes
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbTexts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbText#createChangeStream
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbTexts/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbText#updateOrCreate
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbText#update
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbText#destroyById
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbText#removeById
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbText` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbText#modelName
        * @propertyOf lbServices.EbText
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbText`.
        */
        R.modelName = "EbText";

    /**
     * @ngdoc object
     * @name lbServices.EbText.translations
     * @header lbServices.EbText.translations
     * @object
     * @description
     *
     * The object `EbText.translations` groups methods
     * manipulating `EbTextTranslation` instances related to `EbText`.
     *
     * Call {@link lbServices.EbText#translations EbText.translations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EbText#translations
             * @methodOf lbServices.EbText
             *
             * @description
             *
             * Queries translations of EbText.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R.translations = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::get::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#count
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Counts translations of EbText.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.translations.count = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::count::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#create
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R.translations.create = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::create::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#createMany
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Creates a new instance in translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R.translations.createMany = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::createMany::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#destroyAll
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Deletes all translations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyAll = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::delete::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#destroyById
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Delete a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.translations.destroyById = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::destroyById::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#findById
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Find a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R.translations.findById = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::findById::EbText::translations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EbText.translations#updateById
             * @methodOf lbServices.EbText.translations
             *
             * @description
             *
             * Update a related item by id for translations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for translations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R.translations.updateById = function() {
          var TargetResource = $injector.get("EbTextTranslation");
          var action = TargetResource["::updateById::EbText::translations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EbTextTranslation
 * @header lbServices.EbTextTranslation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EbTextTranslation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EbTextTranslation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EbTextTranslations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#create
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EbTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#createMany
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EbTextTranslations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#upsert
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EbTextTranslations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#exists
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EbTextTranslations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#findById
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EbTextTranslations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#find
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EbTextTranslations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#findOne
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EbTextTranslations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#updateAll
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EbTextTranslations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#deleteById
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EbTextTranslations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#count
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EbTextTranslations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#prototype$updateAttributes
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EbTextTranslations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#createChangeStream
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EbTextTranslations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EbText.translations.findById() instead.
            "::findById::EbText::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbTexts/:id/translations/:fk",
              method: "GET",
            },

            // INTERNAL. Use EbText.translations.destroyById() instead.
            "::destroyById::EbText::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbTexts/:id/translations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EbText.translations.updateById() instead.
            "::updateById::EbText::translations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EbTexts/:id/translations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EbText.translations() instead.
            "::get::EbText::translations": {
              isArray: true,
              url: urlBase + "/EbTexts/:id/translations",
              method: "GET",
            },

            // INTERNAL. Use EbText.translations.create() instead.
            "::create::EbText::translations": {
              url: urlBase + "/EbTexts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbText.translations.createMany() instead.
            "::createMany::EbText::translations": {
              isArray: true,
              url: urlBase + "/EbTexts/:id/translations",
              method: "POST",
            },

            // INTERNAL. Use EbText.translations.destroyAll() instead.
            "::delete::EbText::translations": {
              url: urlBase + "/EbTexts/:id/translations",
              method: "DELETE",
            },

            // INTERNAL. Use EbText.translations.count() instead.
            "::count::EbText::translations": {
              url: urlBase + "/EbTexts/:id/translations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#updateOrCreate
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#update
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#destroyById
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EbTextTranslation#removeById
             * @methodOf lbServices.EbTextTranslation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EbTextTranslation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EbTextTranslation#modelName
        * @propertyOf lbServices.EbTextTranslation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EbTextTranslation`.
        */
        R.modelName = "EbTextTranslation";



        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
